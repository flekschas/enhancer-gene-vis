{"version":3,"sources":["AppInitializing.js","AppError.js","utils.js","Viewer.js","with-either.js","App.js","serviceWorker.js","annotation-overlay-meta-track.js","stratified-bed-track.js","scalable-arcs-track.js","snp-track.js","stacked-bar-track.js","tss-track.js","index.js"],"names":["useStyles","makeStyles","theme","backdrop","zIndex","drawer","color","backgroundColor","AppInitializing","classes","className","Backdrop","open","CircularProgress","createColorTexture","PIXI","colors","colorTexRes","Math","max","ceil","sqrt","length","rgba","Float32Array","forEach","i","Texture","fromBuffer","dashedXLineTo","graphics","xStart","xEnd","y","dashSize","diff","direction","sign","width","abs","stepSize","numSteps","moveTo","lineTo","root","position","display","top","right","bottom","left","appBar","marginLeft","palette","common","black","white","boxShadow","grey","flexShrink","drawerPaper","textInput","minWidth","toolbar","mixins","content","flexDirection","flexGrow","padding","spacing","higlass","DEFAULT_STRATIFICATION","categoryField","axisShowGroupSeparator","groups","label","categories","DEFAULT_VIEW_CONFIG","editable","trackSourceServers","views","uid","genomePositionSearchBox","autocompleteServer","autocompleteId","chromInfoServer","chromInfoId","visible","chromInfoPath","tracks","type","height","contents","options","stroke","fontSize","fontIsLeftAligned","showMousePosition","mousePositionColor","tilesetUid","server","fromViewUid","projectionFillColor","projectionStrokeColor","projectionFillOpacity","projectionStrokeOpacity","strokeWidth","plusStrandColor","minusStrandColor","geneAnnotationHeight","geneLabelPosition","geneStrandSpacing","axisPositionHorizontal","markColor","markColorFocus","markSize","markOpacity","markOpacityFocus","valueColumn","focusRegion","name","toolTip","field","value","numDecimals","other","binSize","axisAlign","labelPosition","arcStyle","indicatorStyle","labelColor","trackBorderWidth","trackBorderColor","geneField","importanceField","importanceDomain","stratification","markMinWidth","markHeight","rowHeight","overlays","includes","extent","fill","fillOpacity","outline","outlineOpacity","outlineWidth","outlinePos","metaTracks","overlaysTrack","annotationTracks","layout","w","h","x","initialXDomain","initialYDomain","DEFAULT_HIGLASS_OPTIONS","sizeMode","Viewer","props","useState","focusGene","setFocusGene","focusVariant","setFocusVariant","variantYScale","setVariantYScale","viewConfig","setViewConfig","xDomainStart","setXDomainStart","xDomainEnd","setXDomainEnd","higlassApi","useRef","updateFocusGeneInHiglass","start","end","newViewConfig","JSON","parse","stringify","n","updateFocusVariantInHiglass","variant","deepClone","absPosition","chromInfo","indexOf","split","chrom","pos","chrPositions","toAbsPosition","Number","isNaN","updateFocusVariantInHiglassDb","debounce","higlassClickHandler","event","payload","fields","higlassLocationChangeHandlerDb","xDomain","map","absPos","absToChr","slice","join","newXDomainStart","newXDomainEnd","higlassInitHandler","useCallback","higlassInstance","current","api","on","numericalXDomainStart","isString","chrToAbs","numericalXDomainEnd","CssBaseline","AppBar","Toolbar","Typography","noWrap","Drawer","paper","anchor","Divider","Box","m","FormControl","margin","fullWidth","InputLabel","htmlFor","OutlinedInput","id","onChange","target","Button","onClick","zoomTo","disableElevation","default","endAdornment","InputAdornment","IconButton","aria-label","edge","size","component","FormLabel","RadioGroup","yScale","updateVariantYScaleInHiglass","FormControlLabel","control","Radio","ref","withEither","ifEitherFn","EitherComponent","Component","App","setChromInfo","useEffect","ChromosomeInfo","then","_chromInfo","undefined","totalLength","console","log","catch","AppViewer","pipe","AppError","Boolean","window","location","hostname","match","createAnnotationOverlayMetaTrack","HGC","Error","pubSub","services","AnnotationOverlayMetaTrack","context","definition","getTrackObject","animate","onNewTilesLoaded","this","annotationTrackIds","Set","track","add","uuid","warn","filter","annotationDrawnHandlerBound","annotationDrawnHandler","bind","drawnAnnotations","Map","tracksDrawingTiles","pubSubs","subscribe","push","tilesDrawnEndHandler","xStartAbs","xEndAbs","data","set","unsubscribe","has","updateOverlays","Array","from","values","draw","clear","args","config","availableOptions","defaultOptions","VS","FS","DEFAULT_GROUP_COLORS","DEFAULT_GROUP_COLORS_DARK","DEFAULT_GROUP_COLORS_LIGHT","pointToPosition","pt","cX","widthHalf","pointToIndex","base","pointToOpacity","opacity","pointToFocused","focused","getIs2d","tile","tileData","yStart","get1dItemWidth","item","get2dItemWidth","yEnd","get1dStart","get2dStart","get1dEnd","get2dEnd","getMaxWidth","fetchedTiles","Object","reduce","maxWidth","maxWidthItem","scaleScalableGraphics","xScale","drawnAtScale","tileK","domain","posOffset","scale","createStratifiedBedTrack","libraries","d3Scale","scaleLinear","scaleLog","tileProxy","opacityLogScale","range","clamp","StratifiedBedTrack","updateOptions","is2d","getItemWidth","getStart","getEnd","intervals","isLeftToRight","intervalTree","createIntervalTree","categoryToGroup","groupToColor","numGroups","numCategories","groupLabels","getCategory","toLowerCase","categoryToY","yToCategory","groupSizes","group","groupSize","k","utils","colorToHex","category","j","cat","groupLabelsPixiText","Text","labelSize","align","axisLabelColor","markColorRgbNorm","colorToRgba","min","markColorFocusRgbNorm","getImportance","opacityLinearScale","opacityScale","Infinity","getGene","minImportance","updateStratificationOption","newOptions","updateExistingGraphics","dimensions","heightScale","categoryHeightScale","valueScale","valueScaleInverted","_xScale","get","mapFn","filteredItems","dataToPoint","itemToIndicatorReducer","itemToIndicatorCategory","points","flatMap","positions","indices","Uint16Array","opacities","uniforms","UniformGroup","uColor","uColorFocused","shader","Shader","geometry","Geometry","addAttribute","addIndex","mesh","Mesh","newGraphics","Graphics","addChild","pMain","indicatorPointGraphics","removeChild","drawAxis","pAxis","xTickOffset","xTickEnd","xLabelOffset","numAxisLabels","children","lineStyle","labelPixiText","renderIndicatorCategoryAxis","renderIndicatorPoints","hasFetchedTiles","updateScales","updateIndicators","storePolyStr","axisNoGroupColor","beginFill","drawRect","endFill","trackX","trackY","tilesetInfo","zoomLevel","calculateZoomLevel","tileWidth","calculateTileWidth","tile_size","tileId","tileToLocalId","floor","invert","fetchedTile","foundItem","xAbsLo","xAbsHi","queryInterval","interval","bg","colorHex","toString","bgHex","toFixed","newPosition","newXScale","newYScale","refreshTiles","setAttribute","output","document","createElement","appendChild","visibleAndFetchedTiles","polys","drawTile","polyStr","g","HorizontalLine1DPixiTrack","datatype","orientation","thumbnail","DOMParser","parseFromString","documentElement","flip1D","optionsInfo","inlineOptions","circle","ellipse","FS_ROUND","FS_SQUARE","createScalableArcs1dTrack","ScalableArcs1dTrack","numBins","pointSize","widthHistogramLeft","Uint32Array","widthHistogramRight","bin","round","histPos","widthHistogramMax","updateTileWidthHistogram","markSizeFocus","strokeColor","updateWidthHistograms","markSizeHalf","fullHeightScale","fullHeightScaleInverted","incomingHeightScale","outgoingHeightScale","startX","endX","startY","endY","cY","wHalf","sizeHalf","vertexShader","fragmentShader","drawTriangles","uPointSize","State","DRAW_MODES","TRIANGLES","POINTS","itemToIndicatorDiverging","itemToIndicatorStart","renderIndicatorDistanceAxis","itemToIndicatorEnd","startsWith","drawCircle","drawEllipse","x1","x2","trackWidth","trackHeight","d","r","cx","cy","limitX1","limitX2","startAngle","acos","endAngle","flip","PI","angleScale","resolution","rx","cos","ry","sin","createSnpTrack","d3Array","scaleBand","SnpTrack","colorEncodingRange","minVisibleValueInTiles","maxVisibleValueInTiles","makeValueScale","calculateMedianVisibleValue","xStartPos","xEndPos","rectY","doubleRadius","drawnPoly","anchorRadius","radius","rectGraphics","finalDotYPos","rows","maxRows","initialize","rowScale","paddingInner","circleDraws","circleFocusDraws","td","geneInfo","chrOffset","txStart","txEnd","yMiddle","step","drawnRects","circleDraw","drawPoly","interactive","buttonMode","mouseup","hoveringSnp","publish","relTilePos","tilePos","minDist","dist","itemY","importance","MAX_RADIUS","otherStr","v","substr","BedLikeTrack","DEFAULT_COLOR_MAP","DEFAULT_COLOR_MAP_DARK","DEFAULT_COLOR_MAP_LIGHT","getHistMax","histMax","histogramMax","segmentToPosition","segment","segmentToColorIdx","colorIdx","segmentToFocused","createStackedBarTrack","toRgbNorm","StackedBarTrack","updateTileFocusMap","getTilePosAndDimensions","tileX","binXPos","histogram1d","histogram2d","histogram2dNumPred","Uint8Array","categoryBinHash","maxBinId","binStart","binEnd","score","histIdx","binHash","updateTileHistogram","focusMap","colorMap","colorMapRgbNorm","colorMapTex","colorMapTexRes","colorMapFocus","colorMapFocusRgbNorm","colorMapFocusTex","colorMapFocusTexRes","updateFocusMap","updateHistograms","brgs","oldNumBins","segments","cumHeight","histToSegments","colorIdxs","uColorMapTex","uColorMapTexRes","uColorMapFocus","uColorMapFocusTexRes","renderStackedBars","renderTrack","relPos","rowCumSum","rowNumPred","totalPred","sum","numPred","relYPos","findIndex","createTssTrack","TssTrack","createPubSub","xStartScreen","xEndScreen","register","isMetaTrack","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"qXAKMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,SAAU,CACRC,OAAQF,EAAME,OAAOC,OAAS,EAC9BC,MAAO,OACPC,gBAAiB,YAgBNC,EAZS,WACtB,IAAMC,EAAUT,IAEhB,OACE,yBAAKU,UAAU,WACb,kBAACC,EAAA,EAAD,CAAUD,UAAWD,EAAQN,SAAUS,MAAM,GAC3C,kBAACC,EAAA,EAAD,CAAkBP,MAAM,eCVjBE,G,OANS,kBACtB,yBAAKE,UAAU,qBACb,0D,mLCLEI,EAAqB,SAACC,EAAMC,GAChC,IAAMC,EAAcC,KAAKC,IAAI,EAAGD,KAAKE,KAAKF,KAAKG,KAAKL,EAAOM,UACrDC,EAAO,IAAIC,aAAgC,EAAnB,SAAAP,EAAe,IAY7C,OAXAD,EAAOS,SAAQ,SAACnB,EAAOoB,GAErBH,EAAS,EAAJG,GAASpB,EAAM,GAEpBiB,EAAS,EAAJG,EAAQ,GAAKpB,EAAM,GAExBiB,EAAS,EAAJG,EAAQ,GAAKpB,EAAM,GAExBiB,EAAS,EAAJG,EAAQ,GAAKpB,EAAM,MAGnB,CAACS,EAAKY,QAAQC,WAAWL,EAAMN,EAAaA,GAAcA,IAG7DY,EAAgB,SAACC,EAAUC,EAAQC,EAAMC,EAAGC,GAMhD,IALA,IAAMC,EAAOH,EAAOD,EACdK,EAAYlB,KAAKmB,KAAKF,GACtBG,EAAQpB,KAAKqB,IAAIJ,GACjBK,EAAsB,EAAXN,EACXO,EAAWvB,KAAKE,KAAKkB,EAAQE,GAC1Bd,EAAI,EAAGA,EAAIe,EAAUf,IAC5BI,EAASY,OAAOX,EAASL,EAAIc,EAAWJ,EAAWH,GACnDH,EAASa,OAAOZ,GAAUL,EAAIc,EAAWN,GAAYE,EAAWH,ICM9DjC,G,cAAYC,aAAW,SAACC,GAAD,MAAY,CACvC0C,KAAM,CACJC,SAAU,WACVC,QAAS,OACTC,IAAK,EACLC,MAAO,EACPC,OAAQ,EACRC,KAAM,GAERC,OAAQ,CACNb,MAAM,eAAD,OAZW,IAYX,OACLc,WAbgB,IAchB9C,MAAOJ,EAAMmD,QAAQC,OAAOC,MAC5BhD,gBAAiBL,EAAMmD,QAAQC,OAAOE,MACtCC,UAAU,aAAD,OAAevD,EAAMmD,QAAQK,KAAK,OAE7CrD,OAAQ,CACNiC,MAnBgB,IAoBhBqB,WAAY,GAEdC,YAAa,CACXtB,MAvBgB,KAyBlBuB,UAAW,CACTC,SAAU,QAEZC,QAAS7D,EAAM8D,OAAOD,QACtBE,QAAS,CACPnB,QAAS,OACToB,cAAe,SACfC,SAAU,EACVC,QAASlE,EAAMmE,QAAQ,GACvB9D,gBAAiB,SAEnB+D,QAAS,CACPH,SAAU,QAIRI,EAAyB,CAC7BC,cAAe,GACfC,wBAAwB,EAExBC,OAAQ,CACN,CACEC,MAAO,yBACPC,WAAY,CACV,wBACA,qBACA,2DACA,0DACA,4DACA,gBACA,sBACA,0DACA,sBACA,+BACA,2DACA,gCACA,qBACA,+EACA,4DACA,wBACA,uCACA,iFACA,0DACA,qBACA,OACA,iCACA,iFACA,gBACA,4DACA,4DACA,2DACA,2DACA,sBACA,qBACA,iFACA,0DACA,oFACA,uBACA,iFACA,sBACA,kCACA,wBAGJ,CACED,MAAO,UACPC,WAAY,CACV,oBACA,gBACA,uCACA,gBACA,iBACA,kBACA,eACA,+BACA,0CAGJ,CACED,MAAO,UACPC,WAAY,CACV,mCACA,kBACA,8BACA,oCACA,4CACA,uBACA,wCACA,kBAGJ,CACED,MAAO,6BACPC,WAAY,CACV,gBACA,eACA,6CACA,0BACA,kCACA,gDACA,iCACA,kBAGJ,CACED,MAAO,cACPC,WAAY,CACV,8BACA,+BACA,2BACA,mBACA,+BAGJ,CACED,MAAO,aACPC,WAAY,CACV,gCACA,qCACA,gBACA,eACA,6BACA,KACA,uBACA,gBACA,mBACA,kCACA,kBACA,OACA,4DACA,cACA,kBACA,uBACA,OACA,aACA,iCACA,gCACA,eACA,uBACA,qCACA,0BACA,qDACA,gBACA,0BACA,wBACA,aACA,0BACA,qDACA,2BACA,uCACA,QACA,4CACA,gBACA,uBACA,mCACA,kCACA,gDACA,iBACA,kCAGJ,CACED,MAAO,QACPC,WAAY,CACV,wBACA,kBACA,oBACA,yBACA,2BACA,yBACA,gBACA,8BACA,gCACA,yBACA,mBACA,eACA,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","file":"static/js/main.3497b0ac.chunk.js","sourcesContent":["import React from 'react';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#bbb',\n    backgroundColor: '#fff',\n  },\n}));\n\nconst AppInitializing = () => {\n  const classes = useStyles();\n\n  return (\n    <div className=\"full-wh\">\n      <Backdrop className={classes.backdrop} open={true}>\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n    </div>\n  );\n};\n\nexport default AppInitializing;\n","import React from 'react';\nimport './AppError.css';\n\nconst AppInitializing = () => (\n  <div className=\"full-wh app-error\">\n    <span>Failed to initialize!</span>\n  </div>\n);\n\nexport default AppInitializing;\n","const createColorTexture = (PIXI, colors) => {\n  const colorTexRes = Math.max(2, Math.ceil(Math.sqrt(colors.length)));\n  const rgba = new Float32Array(colorTexRes ** 2 * 4);\n  colors.forEach((color, i) => {\n    // eslint-disable-next-line prefer-destructuring\n    rgba[i * 4] = color[0]; // r\n    // eslint-disable-next-line prefer-destructuring\n    rgba[i * 4 + 1] = color[1]; // g\n    // eslint-disable-next-line prefer-destructuring\n    rgba[i * 4 + 2] = color[2]; // b\n    // eslint-disable-next-line prefer-destructuring\n    rgba[i * 4 + 3] = color[3]; // a\n  });\n\n  return [PIXI.Texture.fromBuffer(rgba, colorTexRes, colorTexRes), colorTexRes];\n};\n\nconst dashedXLineTo = (graphics, xStart, xEnd, y, dashSize) => {\n  const diff = xEnd - xStart;\n  const direction = Math.sign(diff);\n  const width = Math.abs(diff);\n  const stepSize = dashSize * 2;\n  const numSteps = Math.ceil(width / stepSize);\n  for (let i = 0; i < numSteps; i++) {\n    graphics.moveTo(xStart + i * stepSize * direction, y);\n    graphics.lineTo(xStart + (i * stepSize + dashSize) * direction, y);\n  }\n};\n\nconst toAbsPosition = (position, chromInfo) => {\n  let absPosition;\n  if (position.indexOf && position.indexOf(':') >= 0) {\n    const [chrom, pos] = position.split(':');\n    absPosition = chromInfo.chrPositions[chrom].pos + +pos;\n  } else {\n    absPosition = +position;\n  }\n  return absPosition;\n};\n\nexport { createColorTexture, dashedXLineTo, toAbsPosition };\n","import React, { useCallback, useRef, useState } from 'react';\nimport { HiGlassComponent } from 'higlass';\nimport { debounce, deepClone, isString } from '@flekschas/utils';\nimport AppBar from '@material-ui/core/AppBar';\n// import Autocomplete from '@material-ui/core/Autocomplete';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { toAbsPosition } from './utils';\n\nimport 'higlass/dist/hglib.css';\nimport './Viewer.css';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: 'absolute',\n    display: 'flex',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n  },\n  appBar: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    color: theme.palette.common.black,\n    backgroundColor: theme.palette.common.white,\n    boxShadow: `0 1px 0 0 ${theme.palette.grey['300']}`,\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  textInput: {\n    minWidth: '100%',\n  },\n  toolbar: theme.mixins.toolbar,\n  content: {\n    display: 'flex',\n    flexDirection: 'column',\n    flexGrow: 1,\n    padding: theme.spacing(1),\n    backgroundColor: 'white',\n  },\n  higlass: {\n    flexGrow: 1,\n  },\n}));\n\nconst DEFAULT_STRATIFICATION = {\n  categoryField: 10,\n  axisShowGroupSeparator: true,\n  // axisNoGroupColor: true,\n  groups: [\n    {\n      label: 'Mononuclear Phagocytes',\n      categories: [\n        'THP1_LPS_4hr-Engreitz',\n        'THP_pmaLPS_ATAC_6h',\n        'CD14-positive_monocyte_treated_with_LPS_4h-Novakovic2016',\n        'CD14-positive_monocyte_treated_with_BG_1h-Novakovic2016',\n        'CD14-positive_monocyte_treated_with_RPMI_d6-Novakovic2016',\n        'THP1-Engreitz',\n        'THP_pmaLPS_ATAC_96h',\n        'CD14-positive_monocyte_treated_with_BG_d1-Novakovic2016',\n        'THP_pmaLPS_ATAC_72h',\n        'THP-1_monocyte-VanBortle2017',\n        'CD14-positive_monocyte_treated_with_LPS_d1-Novakovic2016',\n        'CD14-positive_monocyte-ENCODE',\n        'THP_pmaLPS_ATAC_2h',\n        'dendritic_cell_treated_with_Lipopolysaccharide_0_ng-mL_for_0_hour-Garber2017',\n        'CD14-positive_monocyte_treated_with_RPMI_1h-Novakovic2016',\n        'U937_LPS_4hr-Engreitz',\n        'CD14-positive_monocyte-Novakovic2016',\n        'dendritic_cell_treated_with_Lipopolysaccharide_100_ng-mL_for_6_hour-Garber2017',\n        'CD14-positive_monocyte_treated_with_BG_4h-Novakovic2016',\n        'THP_pmaLPS_ATAC_0h',\n        'HAP1',\n        'THP-1_macrophage-VanBortle2017',\n        'dendritic_cell_treated_with_Lipopolysaccharide_100_ng-mL_for_1_hour-Garber2017',\n        'U937-Engreitz',\n        'CD14-positive_monocyte_treated_with_RPMI_d1-Novakovic2016',\n        'CD14-positive_monocyte_treated_with_RPMI_4h-Novakovic2016',\n        'CD14-positive_monocyte_treated_with_LPS_d6-Novakovic2016',\n        'CD14-positive_monocyte_treated_with_LPS_1h-Novakovic2016',\n        'THP_pmaLPS_ATAC_24h',\n        'THP_pmaLPS_ATAC_1h',\n        'dendritic_cell_treated_with_Lipopolysaccharide_100_ng-mL_for_2_hour-Garber2017',\n        'CD14-positive_monocyte_treated_with_BG_d6-Novakovic2016',\n        'dendritic_cell_treated_with_Lipopolysaccharide_100_ng-mL_for_30_minute-Garber2017',\n        'THP_pmaLPS_ATAC_120h',\n        'dendritic_cell_treated_with_Lipopolysaccharide_100_ng-mL_for_4_hour-Garber2017',\n        'THP_pmaLPS_ATAC_48h',\n        'CD14-positive_monocytes-Roadmap',\n        'THP_pmaLPS_ATAC_12h', // monoctye\n      ],\n    },\n    {\n      label: 'B Cells',\n      categories: [\n        'Karpas-422-ENCODE', // b-cell cell line\n        'BJAB-Engreitz',\n        'BJAB_anti-IgM_anti-CD40_4hr-Engreitz',\n        'B_cell-ENCODE',\n        'OCI-LY7-ENCODE',\n        'GM12878-Roadmap',\n        'MM.1S-ENCODE',\n        'CD19-positive_B_cell-Roadmap',\n        'CD8-positive_alpha-beta_T_cell-ENCODE',\n      ],\n    },\n    {\n      label: 'T Cells',\n      categories: [\n        'Jurkat_anti-CD3_PMA_4hr-Engreitz', // t-cell\n        'Jurkat-Engreitz',\n        'CD3-positive_T_cell-Roadmap',\n        'CD4-positive_helper_T_cell-ENCODE',\n        'CD8-positive_alpha-beta_T_cell-Corces2016',\n        'thymus_fetal-Roadmap',\n        'CD4-positive_helper_T_cell-Corces2016',\n        'T-cell-ENCODE',\n      ],\n    },\n    {\n      label: 'Other haematopoietic cells',\n      categories: [\n        'spleen-ENCODE',\n        'K562-Roadmap',\n        'CD56-positive_natural_killer_cells-Roadmap',\n        'erythroblast-Corces2016',\n        'CD34-positive_mobilized-Roadmap',\n        'megakaryocyte-erythroid_progenitor-Corces2016',\n        'natural_killer_cell-Corces2016',\n        'IMR90-Roadmap',\n      ],\n    },\n    {\n      label: 'Fibroblasts',\n      categories: [\n        'foreskin_fibroblast-Roadmap',\n        'fibroblast_of_dermis-Roadmap',\n        'fibroblast_of_arm-ENCODE',\n        'astrocyte-ENCODE',\n        'fibroblast_of_lung-Roadmap',\n      ],\n    },\n    {\n      label: 'Epithelial',\n      categories: [\n        'small_intestine_fetal-Roadmap',\n        'epithelial_cell_of_prostate-ENCODE',\n        'HCT116-ENCODE',\n        'MCF-7-ENCODE',\n        'adrenal_gland_fetal-ENCODE',\n        'H7',\n        'keratinocyte-Roadmap',\n        'MCF10A-Ji2017',\n        'pancreas-Roadmap',\n        'mammary_epithelial_cell-Roadmap',\n        'stomach-Roadmap',\n        'LoVo',\n        'A549_treated_with_ethanol_0.02_percent_for_1_hour-Roadmap',\n        'PC-9-ENCODE',\n        'H1-hESC-Roadmap',\n        'thyroid_gland-ENCODE',\n        'HT29',\n        'MDA-MB-231',\n        'iPS_DF_19.11_Cell_Line-Roadmap',\n        'large_intestine_fetal-Roadmap',\n        'Panc1-ENCODE',\n        'adrenal_gland-ENCODE',\n        'MCF10A_treated_with_TAM24hr-Ji2017',\n        'trophoblast_cell-ENCODE',\n        'H1_BMP4_Derived_Trophoblast_Cultured_Cells-Roadmap',\n        'uterus-ENCODE',\n        'body_of_pancreas-ENCODE',\n        'stomach_fetal-Roadmap',\n        'H9-Roadmap',\n        'transverse_colon-ENCODE',\n        'H1_BMP4_Derived_Mesendoderm_Cultured_Cells-Roadmap',\n        'breast_epithelium-ENCODE',\n        'induced_pluripotent_stem_cell-ENCODE',\n        'LNCAP',\n        'H1_Derived_Mesenchymal_Stem_Cells-Roadmap',\n        'ovary-Roadmap',\n        'sigmoid_colon-ENCODE',\n        'skeletal_muscle_myoblast-Roadmap',\n        'bipolar_neuron_from_iPSC-ENCODE',\n        'coronary_artery_smooth_muscle_cell-Miller2016',\n        'SK-N-SH-ENCODE',\n        'muscle_of_trunk_fetal-Roadmap',\n      ],\n    },\n    {\n      label: 'Other',\n      categories: [\n        'adipose_tissue-ENCODE',\n        'HeLa-S3-Roadmap',\n        'hepatocyte-ENCODE',\n        'heart_ventricle-ENCODE',\n        'spinal_cord_fetal-ENCODE',\n        'coronary_artery-ENCODE',\n        'HepG2-Roadmap',\n        'muscle_of_leg_fetal-Roadmap',\n        'gastrocnemius_medialis-ENCODE',\n        'brite_adipose-Loft2014',\n        'placenta-Roadmap',\n        'liver-ENCODE',\n        'A673-ENCODE',\n        'white_adipose-Loft2014',\n        'cardiac_muscle_cell-ENCODE',\n        'osteoblast-ENCODE',\n        'H1_Derived_Neuronal_Progenitor_Cultured_Cells-Roadmap',\n        'endothelial_cell_of_umbilical_vein-Roadmap',\n        'NCCIT',\n        'myotube_originated_from_skeletal_muscle_myoblast-Roadmap',\n        'psoas_muscle-Roadmap',\n        'endothelial_cell_of_umbilical_vein_vegf_stim_4_hours-zhang2013',\n        'endothelial_cell_of_umbilical_vein_vegf_stim_12_hours-zhang2013',\n      ],\n    },\n  ],\n};\n\nconst DEFAULT_X_DOMAIN_START = 1761366260;\nconst DEFAULT_X_DOMAIN_END = 1761603836;\n\nconst DEFAULT_VIEW_CONFIG = {\n  editable: false,\n  trackSourceServers: [\n    '//higlass.io/api/v1',\n    'https://resgen.io/api/v1/gt/paper-data',\n  ],\n  views: [\n    // {\n    //   uid: 'overview',\n    //   chromInfoPath: '//s3.amazonaws.com/pkerp/data/hg19/chromSizes.tsv',\n    //   layout: {\n    //     w: 12,\n    //     h: 24,\n    //     x: 0,\n    //     y: 0,\n    //   },\n    //   initialXDomain: [0, 3095693983],\n    //   initialYDomain: [0, 3095693983],\n    //   tracks: {\n    //     top: [\n    //       {\n    //         type: 'combined',\n    //         uid: 'chroms-viewport',\n    //         height: 24,\n    //         contents: [\n    //           {\n    //             type: 'horizontal-chromosome-labels',\n    //             tilesetUid: 'ADfY_RtsQR6oKOMyrq6qhw',\n    //             height: 24,\n    //             server: 'https://resgen.io/api/v1',\n    //             uid: 'chroms',\n    //             options: {\n    //               // tickPositions: 'ends',\n    //               color: '#999999',\n    //               stroke: 'white',\n    //               fontSize: 12,\n    //               fontIsLeftAligned: false,\n    //               showMousePosition: true,\n    //               mousePositionColor: '#000000',\n    //             },\n    //           },\n    //           {\n    //             uid: 'viewport-details-chroms',\n    //             type: 'viewport-projection-horizontal',\n    //             fromViewUid: 'context',\n    //             height: 24,\n    //             options: {\n    //               projectionFillColor: '#cc0078',\n    //               projectionStrokeColor: '#cc0078',\n    //               projectionFillOpacity: 0.3,\n    //               projectionStrokeOpacity: 0.3,\n    //               strokeWidth: 1,\n    //             },\n    //           },\n    //         ],\n    //       },\n    //     ],\n    //   },\n    // },\n    {\n      uid: 'context',\n      genomePositionSearchBox: {\n        autocompleteServer: '//higlass.io/api/v1',\n        autocompleteId: 'OHJakQICQD6gTD7skx4EWA',\n        chromInfoServer: '//higlass.io/api/v1',\n        chromInfoId: 'hg19',\n        visible: true,\n      },\n      chromInfoPath: '//s3.amazonaws.com/pkerp/data/hg19/chromSizes.tsv',\n      tracks: {\n        top: [\n          {\n            type: 'combined',\n            uid: 'chroms-viewport',\n            height: 12,\n            contents: [\n              {\n                type: 'horizontal-chromosome-labels',\n                options: {\n                  // tickPositions: 'ends',\n                  color: '#999999',\n                  stroke: 'white',\n                  fontSize: 10,\n                  fontIsLeftAligned: true,\n                  showMousePosition: false,\n                  mousePositionColor: '#000000',\n                },\n                tilesetUid: 'ADfY_RtsQR6oKOMyrq6qhw',\n                height: 12,\n                server: 'https://resgen.io/api/v1',\n                uid: 'chroms',\n              },\n              {\n                uid: 'viewport-details-chroms',\n                type: 'viewport-projection-horizontal',\n                fromViewUid: 'details',\n                height: 12,\n                options: {\n                  projectionFillColor: '#cc0078',\n                  projectionStrokeColor: '#cc0078',\n                  projectionFillOpacity: 0.3,\n                  projectionStrokeOpacity: 0.3,\n                  strokeWidth: 1,\n                },\n              },\n            ],\n          },\n          {\n            type: 'combined',\n            uid: 'genes-tss-viewport',\n            height: 50,\n            contents: [\n              {\n                type: 'horizontal-gene-annotations',\n                uid: 'genes',\n                height: 50,\n                server: 'https://resgen.io/api/v1',\n                tilesetUid: 'NCifnbrKQu6j-ohVWJLoJw',\n                options: {\n                  fontSize: 9,\n                  plusStrandColor: 'black',\n                  minusStrandColor: 'black',\n                  geneAnnotationHeight: 12,\n                  geneLabelPosition: 'outside',\n                  geneStrandSpacing: 2,\n                },\n              },\n              {\n                type: 'tss',\n                uid: 'tss',\n                height: 50,\n                // server: 'http://localhost:9876/api/v1',\n                // tilesetUid: 'RefSeqCurated170308bedCollapsedGeneBoundsTSS500bp',\n                server: 'https://resgen.io/api/v1',\n                tilesetUid: 'VMZDLKrtQDmJMSjg7Ds4yA',\n                options: {\n                  fontSize: 9,\n                  plusStrandColor: 'black',\n                  minusStrandColor: 'black',\n                  geneAnnotationHeight: 12,\n                  geneLabelPosition: 'outside',\n                  geneStrandSpacing: 2,\n                },\n              },\n              {\n                uid: 'viewport-details-genes',\n                type: 'viewport-projection-horizontal',\n                fromViewUid: 'details',\n                height: 50,\n                options: {\n                  projectionFillColor: '#cc0078',\n                  projectionStrokeColor: '#cc0078',\n                  projectionFillOpacity: 0.3,\n                  projectionStrokeOpacity: 0.3,\n                  strokeWidth: 1,\n                },\n              },\n            ],\n          },\n          {\n            type: 'point-annotation',\n            uid: 'ibd-snps',\n            // server: 'http://localhost:9876/api/v1',\n            // tilesetUid: 'IBDCombinedset1-2variantonly-pval',\n            server: 'https://resgen.io/api/v1',\n            tilesetUid: 'VF5-RDXWTxidGMJU7FeaxA',\n            height: 36,\n            options: {\n              axisPositionHorizontal: 'right',\n              markColor: 'black',\n              markColorFocus: '#cc0078',\n              markSize: 2,\n              markOpacity: 0.33,\n              markOpacityFocus: 0.66,\n              // axisPositionHorizontal: 'right',\n              valueColumn: 7,\n              focusRegion: [\n                1680373143 + 81046453 - 25,\n                1680373143 + 81046453 + 25,\n              ],\n              name: 'IBD SNPs',\n              toolTip: {\n                name: {\n                  field: 3,\n                },\n                value: {\n                  field: 6,\n                  numDecimals: 2,\n                },\n                other: [\n                  {\n                    label: 'Post. Prob.',\n                    field: 7,\n                    numDecimals: 2,\n                  },\n                ],\n              },\n            },\n          },\n          // {\n          //   type: 'horizontal-bar',\n          //   uid: 'microglia',\n          //   server: 'https://resgen.io/api/v1',\n          //   tilesetUid: 'V3eSdmpsQqquMuV-gX8lPw',\n          //   height: 36,\n          //   options: {\n          //     barFillColor: 'black',\n          //     align: 'bottom',\n          //     labelColor: '[glyph-color]',\n          //     labelPosition: 'topLeft',\n          //     labelLeftMargin: 0,\n          //     labelRightMargin: 0,\n          //     labelTopMargin: 0,\n          //     labelBottomMargin: 0,\n          //     labelShowResolution: false,\n          //     axisLabelFormatting: 'scientific',\n          //     axisPositionHorizontal: 'right',\n          //     valueScaling: 'linear',\n          //     trackBorderWidth: 0,\n          //     trackBorderColor: 'black',\n          //     labelTextOpacity: 0.4,\n          //     barOpacity: 1,\n          //     name: 'microglia_H3K27ac_pooled',\n          //   },\n          // },\n          {\n            type: 'stacked-bar',\n            // server: 'http://localhost:9876/api/v1',\n            // tilesetUid: 'AllPredictionsAvgHiCABC0015minus150ForABCPaperV2',\n            server: 'https://resgen.io/api/v1',\n            tilesetUid: 'P0Ng5fhvQWeO7dlpx0FknA',\n            height: 96,\n            uid: 'stacked-bars',\n            options: {\n              binSize: 4,\n              axisAlign: 'right',\n              axisPositionHorizontal: 'right',\n              labelPosition: 'hidden',\n              markColor: 'black',\n              markColorFocus: '#cc0078',\n              markSize: 4,\n              markOpacity: 0.33,\n              arcStyle: 'indicator',\n              indicatorStyle: 'category-rect',\n              labelColor: 'black',\n              trackBorderWidth: 0,\n              trackBorderColor: 'black',\n              geneField: 6,\n              importanceField: 7,\n              importanceDomain: [0, 1],\n              focusRegion: [\n                1680373143 + 81046453 - 25,\n                1680373143 + 81046453 + 25,\n              ],\n              name: 'By Celltype',\n              stratification: DEFAULT_STRATIFICATION,\n            },\n          },\n          {\n            type: 'stratified-bed',\n            // server: 'http://localhost:9876/api/v1',\n            // tilesetUid: 'AllPredictionsAvgHiCABC0015minus150ForABCPaperV2',\n            server: 'https://resgen.io/api/v1',\n            tilesetUid: 'P0Ng5fhvQWeO7dlpx0FknA',\n            height: 403,\n            uid: 'indicatorByCellTypes',\n            options: {\n              axisAlign: 'right',\n              labelPosition: 'hidden',\n              markColor: 'black',\n              markColorFocus: '#cc0078',\n              markSize: 4,\n              markMinWidth: 4,\n              markHeight: 3,\n              rowHeight: 3,\n              markOpacity: 0.33,\n              arcStyle: 'indicator',\n              indicatorStyle: 'category-rect',\n              labelColor: 'black',\n              trackBorderWidth: 0,\n              trackBorderColor: 'black',\n              geneField: 6,\n              importanceField: 7,\n              importanceDomain: [0, 1],\n              // focusRegion: [\n              //   1680373143 + 81046453 - 25,\n              //   1680373143 + 81046453 + 25,\n              // ],\n              name: 'By Celltype',\n              axisPositionHorizontal: 'right',\n              stratification: DEFAULT_STRATIFICATION,\n            },\n          },\n        ],\n      },\n      overlays: [\n        {\n          uid: 'region-focus',\n          includes: [\n            'chroms',\n            'genes-tss-viewport',\n            'ibd-snps',\n            'stacked-bars',\n            'indicatorByCellTypes',\n          ],\n          options: {\n            extent: [[1680373143 + 81046453, 1680373143 + 81046454]],\n            minWidth: 3,\n            fill: '#cc0078',\n            fillOpacity: 0.05,\n            strokeWidth: 0,\n            outline: '#cc0078',\n            outlineOpacity: 0.33,\n            outlineWidth: 1,\n            outlinePos: ['left', 'right'],\n          },\n        },\n        {\n          uid: 'gene-focus',\n          includes: ['genes-tss-viewport'],\n          options: {\n            extent: [],\n            minWidth: 3,\n            fill: '#cc0078',\n            fillOpacity: 0.25,\n            stroke: '#cc0078',\n            strokeWidth: 1,\n            outlineWidth: 0,\n          },\n        },\n        {\n          uid: 'tss-overlays',\n          includes: [\n            'chroms',\n            'genes-tss-viewport',\n            'ibd-snps',\n            'stacked-bars',\n            'indicatorByCellTypes',\n          ],\n          options: {\n            extent: [],\n            minWidth: 0,\n            fill: 'black',\n            fillOpacity: 0.05,\n            strokeWidth: 0,\n            outline: 'black',\n            outlineOpacity: 1,\n            outlineWidth: 1,\n            outlinePos: ['left'],\n          },\n        },\n      ],\n      metaTracks: [\n        {\n          uid: 'tss-overlays-meta',\n          type: 'annotation-overlay',\n          overlaysTrack: 'tss-overlays',\n          options: {\n            annotationTracks: ['tss'],\n          },\n        },\n      ],\n      layout: {\n        w: 12,\n        h: 12,\n        x: 0,\n        y: 0,\n      },\n      initialXDomain: [DEFAULT_X_DOMAIN_START, DEFAULT_X_DOMAIN_END],\n      initialYDomain: [DEFAULT_X_DOMAIN_START, DEFAULT_X_DOMAIN_END],\n    },\n    //   {\n    //     uid: 'details',\n    //     chromInfoPath: '//s3.amazonaws.com/pkerp/data/hg19/chromSizes.tsv',\n    //     tracks: {\n    //       top: [\n    //         {\n    //           type: 'horizontal-chromosome-labels',\n    //           options: {\n    //             // tickPositions: 'ends',\n    //             color: '#999999',\n    //             stroke: 'white',\n    //             fontSize: 10,\n    //             fontIsLeftAligned: true,\n    //             showMousePosition: false,\n    //             mousePositionColor: '#000000',\n    //           },\n    //           tilesetUid: 'ADfY_RtsQR6oKOMyrq6qhw',\n    //           height: 12,\n    //           server: 'https://resgen.io/api/v1',\n    //           uid: 'chroms',\n    //         },\n    //         {\n    //           type: 'horizontal-gene-annotations',\n    //           uid: 'genes',\n    //           height: 48,\n    //           server: 'https://resgen.io/api/v1',\n    //           tilesetUid: 'NCifnbrKQu6j-ohVWJLoJw',\n    //           options: {\n    //             fontSize: 9,\n    //             plusStrandColor: 'black',\n    //             minusStrandColor: 'black',\n    //             geneAnnotationHeight: 12,\n    //             geneLabelPosition: 'outside',\n    //             geneStrandSpacing: 2,\n    //           },\n    //         },\n    //         {\n    //           type: 'point-annotation',\n    //           uid: 'ibd-snps',\n    //           // server: 'http://localhost:9876/api/v1',\n    //           // tilesetUid: 'IBDCombinedset1-2variantonly-pval',\n    //           server: 'https://resgen.io/api/v1',\n    //           tilesetUid: 'VF5-RDXWTxidGMJU7FeaxA',\n    //           height: 132,\n    //           options: {\n    //             axisPositionHorizontal: 'right',\n    //             markColor: 'black',\n    //             markColorFocus: '#cc0078',\n    //             markSize: 2,\n    //             markOpacity: 0.33,\n    //             markOpacityFocus: 0.66,\n    //             // axisPositionHorizontal: 'right',\n    //             valueColumn: 7,\n    //             focusRegion: [\n    //               1680373143 + 81046453 - 25,\n    //               1680373143 + 81046453 + 25,\n    //             ],\n    //             name: 'IBD SNPs',\n    //             toolTip: {\n    //               name: {\n    //                 field: 3,\n    //               },\n    //               value: {\n    //                 field: 6,\n    //                 numDecimals: 2,\n    //               },\n    //               other: [\n    //                 {\n    //                   label: 'Post. Prob.',\n    //                   field: 7,\n    //                   numDecimals: 2,\n    //                 },\n    //               ],\n    //             },\n    //           },\n    //         },\n    //         {\n    //           type: 'multivec',\n    //           uid: 'dna-accessibility',\n    //           height: 403,\n    //           // server: 'http://localhost:9876/api/v1',\n    //           // tilesetUid: 'test',\n    //           server: 'https://resgen.io/api/v1',\n    //           tilesetUid: 'Uz1_tEABQf-uzktblvBKSQ',\n    //           options: {\n    //             name: 'DNA Accessibility',\n    //             labelPosition: 'outerBottom',\n    //             labelShowResolution: false,\n    //             labelShowAssembly: false,\n    //             valueScaling: 'exponential',\n    //             colorRange: ['#ffffff', '#000000'],\n    //             selectRows: [\n    //               120,\n    //               36,\n    //               54,\n    //               20,\n    //               80,\n    //               35,\n    //               101,\n    //               49,\n    //               44,\n    //               23,\n    //               30,\n    //               66,\n    //               5,\n    //               26,\n    //               15,\n    //               105,\n    //               57,\n    //               56,\n    //               74,\n    //               84,\n    //               79,\n    //               93,\n    //               106,\n    //               107,\n    //               34,\n    //               28,\n    //               25,\n    //               55,\n    //               121,\n    //               94,\n    //               58,\n    //               69,\n    //               67,\n    //               63,\n    //               126,\n    //               71,\n    //               72,\n    //               47,\n    //               11,\n    //               46,\n    //               39,\n    //               113,\n    //               29,\n    //               60,\n    //               45,\n    //               76,\n    //               21,\n    //               103,\n    //               129,\n    //               13,\n    //               128,\n    //               90,\n    //               104,\n    //               32,\n    //               109,\n    //               27,\n    //               9,\n    //               130,\n    //               95,\n    //               86,\n    //               53,\n    //               73,\n    //               50,\n    //               48,\n    //               78,\n    //               14,\n    //               92,\n    //               124,\n    //               31,\n    //               114,\n    //               64,\n    //               88,\n    //               12,\n    //               10,\n    //               38,\n    //               68,\n    //               3,\n    //               111,\n    //               70,\n    //               22,\n    //               61,\n    //               98,\n    //               6,\n    //               123,\n    //               118,\n    //               43,\n    //               37,\n    //               65,\n    //               81,\n    //               62,\n    //               33,\n    //               1,\n    //               24,\n    //               122,\n    //               83,\n    //               75,\n    //               112,\n    //               40,\n    //               97,\n    //               16,\n    //               117,\n    //               87,\n    //               19,\n    //               125,\n    //               7,\n    //               102,\n    //               116,\n    //               77,\n    //               8,\n    //               17,\n    //               82,\n    //               115,\n    //               89,\n    //               119,\n    //               18,\n    //               4,\n    //               108,\n    //               59,\n    //               127,\n    //               91,\n    //               0,\n    //               100,\n    //               85,\n    //               110,\n    //               99,\n    //               2,\n    //               96,\n    //               51,\n    //               41,\n    //               52,\n    //               42,\n    //             ],\n    //           },\n    //         },\n    //       ],\n    //     },\n    //     layout: {\n    //       w: 4,\n    //       h: 11,\n    //       x: 8,\n    //       y: 1,\n    //     },\n    //     initialXDomain: [\n    //       1680373143 + 81046453 - 500,\n    //       1680373143 + 81046454 + 500,\n    //     ],\n    //     initialYDomain: [\n    //       1680373143 + 81046453 - 500,\n    //       1680373143 + 81046454 + 500,\n    //     ],\n    //   },\n  ],\n};\n\nconst DEFAULT_HIGLASS_OPTIONS = {\n  sizeMode: 'bounded',\n  // pixelPreciseMarginPadding: true,\n  // containerPaddingX: 0,\n  // containerPaddingY: 0,\n  // viewMarginTop: 0,\n  // viewMarginBottom: 6,\n  // viewMarginLeft: 0,\n  // viewMarginRight: 0,\n  // viewPaddingTop: 3,\n  // viewPaddingBottom: 3,\n  // viewPaddingLeft: 0,\n  // viewPaddingRight: 0,\n};\n\nconst Viewer = (props) => {\n  const [focusGene, setFocusGene] = useState('');\n  const [focusVariant, setFocusVariant] = useState('chr10:81046453');\n  const [variantYScale, setVariantYScale] = useState('pValue');\n  const [options, setOptions] = useState(DEFAULT_HIGLASS_OPTIONS);\n  const [viewConfig, setViewConfig] = useState(DEFAULT_VIEW_CONFIG);\n  const [xDomainStart, setXDomainStart] = useState(DEFAULT_X_DOMAIN_START);\n  const [xDomainEnd, setXDomainEnd] = useState(DEFAULT_X_DOMAIN_END);\n  const higlassApi = useRef(null);\n\n  const updateFocusGeneInHiglass = (name, start, end) => {\n    const newViewConfig = JSON.parse(JSON.stringify(viewConfig));\n    const n = newViewConfig.views[0].tracks.top.length;\n\n    if (name) {\n      newViewConfig.views[0].tracks.top[n - 1].options.focusGene = name;\n      newViewConfig.views[0].overlays[1].options.extent = [[start, end]];\n    } else {\n      delete newViewConfig.views[0].tracks.top[n - 1].options.focusGene;\n      delete newViewConfig.views[0].overlays[1].options.extent;\n    }\n\n    setViewConfig(newViewConfig);\n  };\n\n  const clearFocusGene = () => {\n    setFocusGene('');\n    updateFocusGeneInHiglass();\n  };\n\n  const updateFocusVariantInHiglass = (variant) => {\n    const newViewConfig = deepClone(viewConfig);\n    // const n = newViewConfig.views.length;\n\n    const absPosition = toAbsPosition(variant, props.chromInfo);\n    const focusRegion = Number.isNaN(+absPosition)\n      ? []\n      : [absPosition - 0.5, absPosition + 0.5];\n\n    newViewConfig.views[0].tracks.top[2].options.focusRegion = focusRegion;\n    newViewConfig.views[0].tracks.top[4].options.focusRegion = focusRegion;\n    // newViewConfig.views[0].tracks.top[n - 1].options.focusRegion = focusRegion;\n    newViewConfig.views[0].overlays[0].options.extent = [focusRegion];\n\n    // const focusDomain = Number.isNaN(+absPosition)\n    //   ? newViewConfig.views[1].initialXDomain\n    //   : [absPosition - 500, absPosition + 500];\n\n    // newViewConfig.views[1].initialXDomain = focusDomain;\n    // newViewConfig.views[1].initialYDomain = focusDomain;\n\n    setViewConfig(newViewConfig);\n  };\n\n  const updateFocusVariantInHiglassDb = debounce(\n    updateFocusVariantInHiglass,\n    500\n  );\n\n  const focusVariantChangeHandler = (event) => {\n    setFocusVariant(event.target.value);\n    updateFocusVariantInHiglassDb(event.target.value);\n  };\n\n  const clearFocusVariant = () => {\n    setFocusVariant('');\n    updateFocusVariantInHiglass('');\n  };\n\n  const updateVariantYScaleInHiglass = (yScale) => {\n    const newViewConfig = deepClone(viewConfig);\n\n    newViewConfig.views[0].tracks.top[2].options.valueColumn =\n      yScale === 'pValue' ? 7 : 8;\n    // newViewConfig.views[1].tracks.top[2].options.valueColumn =\n    //   yScale === 'pValue' ? 7 : 8;\n\n    setViewConfig(newViewConfig);\n  };\n\n  const variantYScaleChangeHandler = (event) => {\n    setVariantYScale(event.target.value);\n    updateVariantYScaleInHiglass(event.target.value);\n  };\n\n  const higlassClickHandler = (event) => {\n    if (event.type === 'gene-annotation') {\n      setFocusGene(event.payload.name);\n      updateFocusGeneInHiglass(\n        event.payload.name,\n        event.payload.xStart,\n        event.payload.xEnd\n      );\n    } else if (event.type === 'snp') {\n      setFocusVariant(`${event.payload.fields[0]}:${event.payload.fields[1]}`);\n      updateFocusVariantInHiglass(event.payload.xStart);\n    }\n  };\n\n  const higlassLocationChangeHandler = (event) => {\n    const [newXDomainStart, newXDomainEnd] = event.xDomain.map((absPos) =>\n      props.chromInfo.absToChr(absPos).slice(0, 2).join(':')\n    );\n    setXDomainStart(newXDomainStart);\n    setXDomainEnd(newXDomainEnd);\n  };\n  const higlassLocationChangeHandlerDb = debounce(\n    higlassLocationChangeHandler,\n    250\n  );\n\n  const higlassInitHandler = useCallback((higlassInstance) => {\n    if (higlassInstance !== null) {\n      higlassApi.current = higlassInstance.api;\n      higlassInstance.api.on('click', higlassClickHandler);\n      higlassInstance.api.on(\n        'location',\n        higlassLocationChangeHandlerDb,\n        'context'\n      );\n    }\n  }, []);\n\n  const numericalXDomainStart =\n    isString(xDomainStart) && xDomainStart.indexOf(':') >= 0\n      ? props.chromInfo.chrToAbs([\n          xDomainStart.split(':')[0],\n          +xDomainStart.split(':')[1],\n        ])\n      : +xDomainStart;\n\n  const numericalXDomainEnd =\n    isString(xDomainEnd) && xDomainEnd.indexOf(':') >= 0\n      ? props.chromInfo.chrToAbs([\n          xDomainEnd.split(':')[0],\n          +xDomainEnd.split(':')[1],\n        ])\n      : +xDomainEnd;\n\n  const xDomainStartChangeHandler = (event) => {\n    setXDomainStart(event.target.value);\n  };\n\n  const xDomainEndChangeHandler = (event) => {\n    setXDomainEnd(event.target.value);\n  };\n\n  const updateXDomain = (event) => {\n    if (!higlassApi.current) return;\n\n    const newViewConfig = deepClone(viewConfig);\n\n    const xDomain = [...newViewConfig.views[0].initialXDomain];\n\n    if (!Number.isNaN(+numericalXDomainStart)) {\n      xDomain[0] = numericalXDomainStart;\n    }\n    if (!Number.isNaN(+numericalXDomainEnd)) {\n      xDomain[1] = numericalXDomainEnd;\n    }\n\n    higlassApi.current.zoomTo(\n      'context',\n      xDomain[0],\n      xDomain[1],\n      xDomain[0],\n      xDomain[1],\n      2000\n    );\n  };\n\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <Typography variant=\"h6\" noWrap>\n            Enhancer-Promoter Vis\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"permanent\"\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n        anchor=\"left\"\n      >\n        <div className={classes.toolbar} />\n        <Divider />\n        <Box m={1}>\n          <Box m={0}>\n            <FormControl variant=\"outlined\" margin=\"dense\" fullWidth>\n              <InputLabel htmlFor=\"x-domain-start\">Region Start</InputLabel>\n              <OutlinedInput\n                id=\"x-domain-start\"\n                label=\"Region Start\"\n                onChange={xDomainStartChangeHandler}\n                value={xDomainStart}\n              />\n            </FormControl>\n          </Box>\n          <Box m={0}>\n            <FormControl variant=\"outlined\" margin=\"dense\" fullWidth>\n              <InputLabel htmlFor=\"x-domain-end\">Region End</InputLabel>\n              <OutlinedInput\n                id=\"x-domain-end\"\n                label=\"Region End\"\n                onChange={xDomainEndChangeHandler}\n                value={xDomainEnd}\n              />\n            </FormControl>\n          </Box>\n          <Box m={0}>\n            <Button\n              variant=\"contained\"\n              margin=\"dense\"\n              onClick={updateXDomain}\n              fullWidth\n              disableElevation\n            >\n              Go\n            </Button>\n          </Box>\n        </Box>\n        <Divider />\n        <Box m={1}>\n          <Box m={0}>\n            <FormControl variant=\"outlined\" margin=\"dense\" fullWidth>\n              <InputLabel htmlFor=\"focus-gene\">Focus Gene</InputLabel>\n              <OutlinedInput\n                id=\"focus-gene\"\n                value={focusGene}\n                default=\"\"\n                label=\"Focus Gene\"\n                endAdornment={\n                  focusGene && (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        aria-label=\"clear input\"\n                        onClick={clearFocusGene}\n                        edge=\"end\"\n                        size=\"small\"\n                      >\n                        <ClearIcon />\n                      </IconButton>\n                    </InputAdornment>\n                  )\n                }\n              />\n            </FormControl>\n          </Box>\n          <Box m={0}>\n            <FormControl variant=\"outlined\" margin=\"dense\" fullWidth>\n              <InputLabel htmlFor=\"focus-variant\">Focus Variant</InputLabel>\n              <OutlinedInput\n                id=\"focus-variant\"\n                value={focusVariant}\n                onChange={focusVariantChangeHandler}\n                label=\"Focus Variant\"\n                default=\"chr10:81046453\"\n                endAdornment={\n                  focusVariant && (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        aria-label=\"clear input\"\n                        onClick={clearFocusVariant}\n                        edge=\"end\"\n                        size=\"small\"\n                      >\n                        <ClearIcon />\n                      </IconButton>\n                    </InputAdornment>\n                  )\n                }\n              />\n            </FormControl>\n          </Box>\n        </Box>\n        <Box m={1}>\n          <FormControl component=\"fieldset\">\n            <FormLabel component=\"legend\">Variant y-scale</FormLabel>\n            <RadioGroup\n              aria-label=\"variantYScale\"\n              name=\"variantYScale\"\n              value={variantYScale}\n              onChange={variantYScaleChangeHandler}\n            >\n              <FormControlLabel\n                label=\"p-value\"\n                control={<Radio size=\"small\" />}\n                value=\"pValue\"\n              />\n              <FormControlLabel\n                label=\"Posterior probability\"\n                control={<Radio size=\"small\" />}\n                value=\"posteriorProbability\"\n              />\n            </RadioGroup>\n          </FormControl>\n        </Box>\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <div className={classes.higlass}>\n          <HiGlassComponent\n            ref={higlassInitHandler}\n            viewConfig={viewConfig}\n            options={options}\n          />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default Viewer;\n","import React from 'react';\n\nconst withEither = (ifEitherFn, EitherComponent) => (Component) => (props) =>\n  ifEitherFn(props) ? <EitherComponent {...props} /> : <Component {...props} />;\n\nexport default withEither;\n","import React, { useState, useEffect } from 'react';\nimport { ChromosomeInfo } from 'higlass';\nimport { pipe } from '@flekschas/utils';\n\nimport AppInitializing from './AppInitializing';\nimport AppError from './AppError';\nimport Viewer from './Viewer';\nimport withEither from './with-either';\n\nimport './App.css';\n\nconst App = () => {\n  const [chromInfo, setChromInfo] = useState(null);\n\n  useEffect(() => {\n    ChromosomeInfo('https://s3.amazonaws.com/pkerp/data/hg19/chromSizes.tsv')\n      .then((_chromInfo) => {\n        if (_chromInfo.totalLength === undefined) {\n          // Monkey patch: chrom sizes were actually unavailable...\n          // Also see https://github.com/higlass/higlass/issues/957\n          setChromInfo(false);\n        } else {\n          console.log(_chromInfo);\n          setChromInfo(_chromInfo);\n        }\n      })\n      .catch(() => {\n        setChromInfo(false);\n      });\n  }, []);\n\n  const AppViewer = pipe(\n    withEither(() => chromInfo === null, AppInitializing),\n    withEither(() => chromInfo === false, AppError)\n  )(Viewer);\n\n  return (\n    <div className=\"App\">\n      <AppViewer chromInfo={chromInfo} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","function createAnnotationOverlayMetaTrack(HGC, ...args) {\n  if (!new.target) {\n    throw new Error(\n      'Uncaught TypeError: Class constructor cannot be invoked without \"new\"'\n    );\n  }\n\n  // Services\n  const { pubSub } = HGC.services;\n\n  class AnnotationOverlayMetaTrack {\n    constructor(context, options) {\n      const { definition, getTrackObject, onNewTilesLoaded: animate } = context;\n\n      this.animate = animate;\n      this.options = options;\n\n      this.overlaysTrack = getTrackObject(definition.overlaysTrack);\n\n      if (!this.overlaysTrack) {\n        console.warn(\n          `Overlays track (uid: ${definition.overlaysTrack}) not found`\n        );\n        return;\n      }\n\n      this.annotationTrackIds = new Set();\n      this.annotationTracks = definition.options.annotationTracks\n        .map((uid) => {\n          const track = getTrackObject(uid);\n\n          if (!track) {\n            console.warn(`Child track (uid: ${uid}) not found`);\n          } else {\n            this.annotationTrackIds.add(track.uuid);\n          }\n\n          return track;\n        })\n        .filter((track) => track);\n\n      this.annotationDrawnHandlerBound = this.annotationDrawnHandler.bind(this);\n\n      this.drawnAnnotations = new Map();\n      this.tracksDrawingTiles = new Set();\n\n      this.pubSubs = [];\n\n      // Augment annotation tracks\n      this.annotationTracks.forEach((track) => {\n        track.subscribe('annotationDrawn', this.annotationDrawnHandlerBound);\n      });\n\n      this.pubSubs.push(\n        pubSub.subscribe(\n          'TiledPixiTrack.tilesDrawnEnd',\n          this.tilesDrawnEndHandler.bind(this)\n        )\n      );\n    }\n\n    /**\n     * Handles annotation drawn events\n     *\n     * @param  {String}  event.uid  UID of the view that triggered the event.\n     * @param  {Array}  event.viewPos  View position (i.e., [x, y, width, height])\n     *   of the drawn annotation on the screen.\n     * @param  {Array}  event.dataPos  Data position of the drawn annotation. For\n     *   example base pairs (Hi-C), or pixels (gigapixel images), or lng-lat\n     *   (geo json).\n     */\n    annotationDrawnHandler({ xStartAbs, xEndAbs, data }) {\n      this.drawnAnnotations.set(data.uid, [xStartAbs, xEndAbs]);\n    }\n\n    /**\n     * Remove this track.\n     */\n    remove() {\n      this.pubSubs.forEach(pubSub.unsubscribe);\n      this.pubSubs = undefined;\n      this.annotationTracks.forEach((track) => {\n        track.unsubscribe('annotationDrawn', this.annotationDrawnHandlerBound);\n      });\n    }\n\n    /**\n     * Callback function passed into the annotation tracks to trigger tree\n     * building of the spatial RTree.\n     *\n     * @description\n     * Simple counter that call `this.buildTree()` once the number of annotation\n     * tracks is reached.\n     */\n    tilesDrawnEndHandler({ uuid }) {\n      if (!this.annotationTrackIds.has(uuid)) return;\n\n      this.tracksDrawingTiles.add(uuid);\n\n      if (!(this.tracksDrawingTiles.size % this.annotationTracks.length)) {\n        this.updateOverlays();\n      }\n    }\n\n    updateOverlays() {\n      this.overlaysTrack.options.extent = Array.from(\n        this.drawnAnnotations.values()\n      );\n      this.overlaysTrack.draw();\n      this.tracksDrawingTiles.clear();\n    }\n  }\n\n  return new AnnotationOverlayMetaTrack(...args);\n}\n\ncreateAnnotationOverlayMetaTrack.config = {\n  type: 'annotation-overlay',\n  availableOptions: ['annotationTracks'],\n  defaultOptions: {\n    annotationTracks: [],\n  },\n};\n\nexport default createAnnotationOverlayMetaTrack;\n","import createIntervalTree from 'interval-tree-1d';\nimport { dashedXLineTo } from './utils';\n\nconst VS = `\n  precision mediump float;\n  attribute vec2 aPosition;\n  attribute float aOpacity;\n  attribute float aFocused;\n\n  uniform mat3 projectionMatrix;\n  uniform mat3 translationMatrix;\n  uniform float uPointSize;\n  uniform vec4 uColor;\n  uniform vec4 uColorFocused;\n\n  varying vec4 vColor;\n  varying vec4 vColorFocused;\n  varying float vOpacity;\n  varying float vFocused;\n\n  void main(void)\n  {\n    vColor = uColor;\n    vColorFocused = uColorFocused;\n    vOpacity = aOpacity;\n    vFocused = aFocused;\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aPosition, 1.0)).xy, 0.0, 1.0);\n    gl_PointSize = uPointSize;\n  }\n`;\n\nconst FS = `\n  precision mediump float;\n  varying vec4 vColor;\n  varying vec4 vColorFocused;\n  varying float vOpacity;\n  varying float vFocused;\n\n  void main() {\n    float isNotFocused = 1.0 - vFocused;\n\n    float r = vColor.r * isNotFocused + vColorFocused.r * vFocused;\n    float g = vColor.g * isNotFocused + vColorFocused.g * vFocused;\n    float b = vColor.b * isNotFocused + vColorFocused.b * vFocused;\n\n    gl_FragColor = vec4(r, g, b, 1.0) * vOpacity;\n  }\n`;\n\nconst DEFAULT_GROUP_COLORS = [\n  // '#c17da5',\n  '#c76526',\n  '#dca237',\n  '#eee462',\n  '#469b76',\n  '#3170ad',\n  '#6fb2e4',\n  '#000000',\n  '#999999',\n];\n\nconst DEFAULT_GROUP_COLORS_DARK = [\n  // '#a1688a',\n  '#a65420',\n  '#b7872e',\n  '#9f9841',\n  '#3a8162',\n  '#295d90',\n  '#4a7798',\n  '#000000',\n  '#666666',\n];\n\nconst DEFAULT_GROUP_COLORS_LIGHT = [\n  // '#f5e9f0',\n  '#f6e5db',\n  '#f9f0de',\n  '#fcfbe5',\n  '#e0eee8',\n  '#dde7f1',\n  '#e7f2fb',\n  '#d5d5d5',\n  '#ffffff',\n];\n\n// prettier-ignore\nconst pointToPosition = (pt) => [\n  // top-left\n  pt.cX - pt.widthHalf, pt.y,\n  // top-right\n  pt.cX + pt.widthHalf, pt.y,\n  // bottom-right\n  pt.cX + pt.widthHalf, pt.y + pt.height,\n  // pt.cX + pt.widthHalf, pt.y + pt.height,\n  // bottom-left\n  pt.cX - pt.widthHalf, pt.y + pt.height,\n  // pt.cX - pt.widthHalf, pt.y,\n];\n\nconst pointToIndex = (pt, i) => {\n  const base = i * 4;\n  return [base, base + 1, base + 2, base + 2, base + 3, base];\n};\n\nconst pointToOpacity = (pt) => [\n  pt.opacity,\n  pt.opacity,\n  pt.opacity,\n  pt.opacity,\n  // pt.opacity,\n  // pt.opacity,\n];\n\nconst pointToFocused = (pt) => [\n  pt.focused,\n  pt.focused,\n  pt.focused,\n  pt.focused,\n  // pt.focused,\n  // pt.focused,\n];\n\nconst getIs2d = (tile) =>\n  tile.tileData.length && tile.tileData[0].yStart !== undefined;\n\nconst get1dItemWidth = (item) => item.xEnd - item.xStart;\n\nconst get2dItemWidth = (item) =>\n  Math.abs(\n    item.xStart +\n      (item.xEnd - item.xStart) / 2 -\n      (item.yStart + (item.yEnd - item.yStart) / 2)\n  );\n\nconst get1dStart = (item) => item.xStart;\n\nconst get2dStart = (item) => item.xStart + (item.xEnd - item.xStart) / 2;\n\nconst get1dEnd = (item) => item.xEnd;\n\nconst get2dEnd = (item) => item.yStart + (item.yEnd - item.yStart) / 2;\n\nconst getMaxWidth = (fetchedTiles) =>\n  Object.values(fetchedTiles).reduce(\n    (maxWidth, tile) =>\n      Math.max(\n        maxWidth,\n        tile.tileData.reduce(\n          (maxWidthItem, item) => Math.max(maxWidthItem, item.width),\n          0\n        )\n      ),\n    0\n  );\n\nconst scaleScalableGraphics = (graphics, xScale, drawnAtScale) => {\n  const tileK =\n    (drawnAtScale.domain()[1] - drawnAtScale.domain()[0]) /\n    (xScale.domain()[1] - xScale.domain()[0]);\n  const newRange = xScale.domain().map(drawnAtScale);\n\n  const posOffset = newRange[0];\n  graphics.scale.x = tileK;\n  graphics.position.x = -posOffset * tileK;\n};\n\nconst createStratifiedBedTrack = function createStratifiedBedTrack(\n  HGC,\n  ...args\n) {\n  if (!new.target) {\n    throw new Error(\n      'Uncaught TypeError: Class constructor cannot be invoked without \"new\"'\n    );\n  }\n\n  const { PIXI } = HGC.libraries;\n  const { scaleLinear, scaleLog } = HGC.libraries.d3Scale;\n  const { tileProxy } = HGC.services;\n\n  const opacityLogScale = scaleLog()\n    .domain([1, 10])\n    .range([0.1, 1])\n    .clamp(true);\n\n  class StratifiedBedTrack extends HGC.tracks.HorizontalLine1DPixiTrack {\n    constructor(context, options) {\n      super(context, options);\n\n      this.updateOptions();\n    }\n\n    initTile(tile) {\n      const is2d = getIs2d(tile);\n      const getItemWidth = is2d ? get2dItemWidth : get1dItemWidth;\n      const getStart = is2d ? get2dStart : get1dStart;\n      const getEnd = is2d ? get2dEnd : get1dEnd;\n\n      const intervals = [];\n\n      tile.tileData.forEach((item, i) => {\n        item.width = getItemWidth(item);\n        item.start = getStart(item);\n        item.end = getEnd(item);\n        item.isLeftToRight = item.start < item.end;\n        intervals.push([item.xStart, item.xEnd, i]);\n      });\n\n      tile.intervalTree = createIntervalTree(intervals);\n    }\n\n    updateStratificationOption() {\n      if (!this.options.stratification) {\n        this.categoryField = undefined;\n        this.categoryToGroup = undefined;\n        this.groupToColor = undefined;\n        this.numGroups = 0;\n        this.numCategories = 0;\n        this.groupLabels = [];\n        return;\n      }\n\n      this.categoryField = this.options.stratification.categoryField;\n      this.getCategory = (item) =>\n        item.fields[this.categoryField].toLowerCase();\n      this.categoryToGroup = new Map();\n      this.categoryToY = new Map();\n      this.yToCategory = new Map();\n      this.groupToColor = new Map();\n      this.numGroups = this.options.stratification.groups.length;\n      this.groupSizes = this.options.stratification.groups.map(\n        (group) => group.categories.length\n      );\n      this.numCategories = this.groupSizes.reduce(\n        (numCategories, groupSize) => numCategories + groupSize,\n        0\n      );\n      this.groupLabels = this.options.stratification.groups.map(\n        (group, i) => group.label || `Group ${i}`\n      );\n\n      let k = 0;\n      this.options.stratification.groups.forEach((group, i) => {\n        this.groupToColor.set(i, [\n          HGC.utils.colorToHex(\n            group.color || DEFAULT_GROUP_COLORS[i % DEFAULT_GROUP_COLORS.length]\n          ),\n          HGC.utils.colorToHex(\n            group.backgroundColor ||\n              DEFAULT_GROUP_COLORS_LIGHT[i % DEFAULT_GROUP_COLORS.length]\n          ),\n        ]);\n        group.categories.forEach((category, j) => {\n          const cat = category.toLowerCase();\n          this.categoryToGroup.set(cat, i);\n          this.categoryToY.set(cat, k + j);\n          this.yToCategory.set(k + j, cat);\n        });\n        k += group.categories.length;\n      });\n\n      this.groupLabelsPixiText = this.groupLabels.map(\n        (label, i) =>\n          new PIXI.Text(label, {\n            fontSize: this.labelSize,\n            // fill: this.labelColor,\n            align: this.axisAlign === 'right' ? 'right' : 'left',\n            fill: HGC.utils.colorToHex(\n              this.options.stratification.groups[i].axisLabelColor ||\n                DEFAULT_GROUP_COLORS_DARK[i % DEFAULT_GROUP_COLORS_DARK.length]\n            ),\n          })\n      );\n    }\n\n    updateOptions() {\n      this.axisAlign = this.options.axisAlign || 'left';\n\n      this.labelColor = HGC.utils.colorToHex(\n        this.options.labelColor || 'black'\n      );\n\n      this.labelSize = this.options.labelSize || 12;\n\n      this.markColor = HGC.utils.colorToHex(this.options.markColor || 'black');\n\n      this.markColorRgbNorm = this.options.markColor\n        ? HGC.utils\n            .colorToRgba(this.options.markColor)\n            .slice(0, 3)\n            .map((x) => Math.min(1, Math.max(0, x / 255)))\n        : [0, 0, 0];\n\n      this.markOpacity = Number.isNaN(+this.options.markOpacity)\n        ? 1\n        : Math.min(1, Math.max(0, +this.options.markOpacity));\n\n      this.markSize = this.options.markSize || 2;\n      this.markMinWidth = this.options.markMinWidth || this.markSize;\n      this.markHeight = this.options.markHeight || this.markSize;\n\n      this.rowHeight = this.options.rowHeight || this.markHeight;\n\n      this.markColorFocus = HGC.utils.colorToHex(\n        this.options.markColorFocus || 'red'\n      );\n\n      this.markColorFocusRgbNorm = this.options.markColorFocus\n        ? HGC.utils\n            .colorToRgba(this.options.markColorFocus)\n            .slice(0, 3)\n            .map((x) => Math.min(1, Math.max(0, x / 255)))\n        : [1, 0, 0];\n\n      this.markOpacityFocus = Number.isNaN(+this.options.markOpacityFocus)\n        ? this.markOpacity\n        : Math.min(1, Math.max(0, +this.options.markOpacityFocus));\n\n      this.getImportance = this.options.importanceField\n        ? (item) => +item.fields[this.options.importanceField]\n        : (item) => item.width;\n\n      const importanceDomain = this.options.importanceDomain || [1000, 1];\n\n      const opacityLinearScale = scaleLinear()\n        .domain(importanceDomain)\n        .range([1, 10]);\n\n      this.opacityScale = (x) => opacityLogScale(opacityLinearScale(x));\n\n      this.focusRegion = this.options.focusRegion\n        ? this.options.focusRegion\n        : [Infinity, Infinity];\n\n      this.focusGene = this.options.focusGene\n        ? this.options.focusGene.toLowerCase()\n        : undefined;\n\n      this.getGene = this.options.geneField\n        ? (item) => item.fields[this.options.geneField].toLowerCase()\n        : undefined;\n\n      this.minImportance = this.options.minImportance || 0;\n\n      this.updateStratificationOption();\n    }\n\n    rerender(newOptions) {\n      this.options = newOptions;\n      this.updateOptions();\n      this.updateExistingGraphics();\n    }\n\n    hasFetchedTiles() {\n      return Object.values(this.fetchedTiles).length;\n    }\n\n    updateScales() {\n      const fetchedTiles = Object.values(this.fetchedTiles);\n\n      if (!fetchedTiles.length) return;\n\n      const [, height] = this.dimensions;\n\n      this.maxWidth = getMaxWidth(this.fetchedTiles);\n\n      this.heightScale = scaleLinear()\n        .domain([0, this.maxWidth])\n        .range([Math.min(12, height / 10), height]);\n\n      this.categoryHeightScale = scaleLinear()\n        .domain([0, this.numCategories])\n        .range([0, this.numCategories * this.rowHeight]);\n\n      this.valueScale = scaleLinear()\n        .domain([0, this.maxWidth])\n        .range([height, 0]);\n\n      this.valueScaleInverted = scaleLinear()\n        .domain([0, this.maxWidth])\n        .range([0, height]);\n    }\n\n    itemToIndicatorCategory(item) {\n      return {\n        cX: this._xScale(item.start),\n        y: this.categoryHeightScale(\n          this.categoryToY.get(this.getCategory(item))\n        ),\n        opacity: this.opacityScale(this.getImportance(item)),\n        focused:\n          item.xStart <= this.focusRegion[1] &&\n          item.xEnd >= this.focusRegion[0],\n        widthHalf: Math.max(\n          this.markMinWidth / 2,\n          Math.abs(this._xScale(item.xStart) - this._xScale(item.xEnd)) / 2\n        ),\n        height: this.markHeight,\n      };\n    }\n\n    itemToIndicatorReducer(mapFn) {\n      if (this.getGene && this.focusGene) {\n        return (filteredItems, item) => {\n          const gene = this.getGene(item);\n          if (gene === this.focusGene) filteredItems.push(mapFn(item));\n          return filteredItems;\n        };\n      }\n      return (filteredItems, item) => {\n        filteredItems.push(mapFn(item));\n        return filteredItems;\n      };\n    }\n\n    renderIndicatorPoints() {\n      this.drawnAtScale = scaleLinear()\n        .domain([...this.xScale().domain()])\n        .range([...this.xScale().range()]);\n\n      const dataToPoint = this.itemToIndicatorReducer(\n        this.itemToIndicatorCategory.bind(this)\n      );\n\n      const points = Object.values(this.fetchedTiles).flatMap((tile) =>\n        tile.tileData.reduce(dataToPoint, [])\n      );\n\n      const positions = new Float32Array(points.flatMap(pointToPosition));\n      const indices = new Uint16Array(points.flatMap(pointToIndex));\n      const opacities = new Float32Array(points.flatMap(pointToOpacity));\n      const focused = new Float32Array(points.flatMap(pointToFocused));\n\n      const uniforms = new PIXI.UniformGroup({\n        uColor: [...this.markColorRgbNorm, this.markOpacity],\n        uColorFocused: [...this.markColorFocusRgbNorm, this.markOpacity],\n      });\n\n      const shader = PIXI.Shader.from(VS, FS, uniforms);\n\n      const geometry = new PIXI.Geometry();\n      geometry.addAttribute('aPosition', positions, 2);\n      geometry.addAttribute('aOpacity', opacities, 1);\n      geometry.addAttribute('aFocused', focused, 1);\n      geometry.addIndex(indices);\n\n      const mesh = new PIXI.Mesh(geometry, shader);\n\n      const newGraphics = new PIXI.Graphics();\n      newGraphics.addChild(mesh);\n\n      // eslint-disable-next-line\n      this.pMain.x = this.position[0];\n\n      if (this.indicatorPointGraphics) {\n        this.pMain.removeChild(this.indicatorPointGraphics);\n      }\n\n      this.pMain.addChild(newGraphics);\n      this.indicatorPointGraphics = newGraphics;\n\n      scaleScalableGraphics(\n        this.indicatorPointGraphics,\n        this._xScale,\n        this.drawnAtScale\n      );\n\n      this.draw();\n      this.animate();\n    }\n\n    renderIndicatorDistanceAxis(valueScale) {\n      this.drawAxis(valueScale);\n    }\n\n    renderIndicatorCategoryAxis() {\n      const [width] = this.dimensions;\n      const [left, top] = this.position;\n\n      this.pAxis.position.x = this.axisAlign === 'right' ? left + width : left;\n      this.pAxis.position.y = top;\n\n      this.pAxis.clear();\n      let yStart = 0;\n      let yEnd = 0;\n\n      const xTickOffset = this.axisAlign === 'right' ? -5 : 5;\n      const xTickEnd = this.axisAlign === 'right' ? -width : width;\n      const xLabelOffset = this.axisAlign === 'right' ? -3 : 3;\n      const numAxisLabels = this.pAxis.children.length;\n\n      this.pAxis.lineStyle(1, 0x000000, 1.0, 0.0);\n\n      this.groupLabelsPixiText.forEach((labelPixiText, i) => {\n        const height = this.categoryHeightScale(this.groupSizes[i]);\n        yEnd += height;\n        labelPixiText.x = xLabelOffset;\n        labelPixiText.y = yStart + height / 2;\n        labelPixiText.anchor.x = this.axisAlign === 'right' ? 1 : 0;\n        labelPixiText.anchor.y = 0.5;\n\n        if (numAxisLabels < i + 1) {\n          this.pAxis.addChild(labelPixiText);\n        }\n\n        this.pAxis.moveTo(0, yStart);\n        this.pAxis.lineTo(xTickOffset, yStart);\n        if (this.options.stratification.axisShowGroupSeparator) {\n          dashedXLineTo(this.pAxis, 0, xTickEnd, yStart, 5);\n        }\n\n        yStart = yEnd;\n      });\n\n      this.pAxis.moveTo(0, 0);\n      this.pAxis.lineTo(0, yEnd);\n      this.pAxis.lineTo(xTickOffset, yEnd);\n      if (this.options.stratification.axisShowGroupSeparator) {\n        dashedXLineTo(this.pAxis, 0, xTickEnd, yEnd, 5);\n      }\n    }\n\n    updateIndicators() {\n      this.renderIndicatorCategoryAxis(this.valueScaleInverted);\n      this.renderIndicatorPoints();\n    }\n\n    // Called whenever a new tile comes in\n    updateExistingGraphics() {\n      if (!this.hasFetchedTiles()) return;\n      this.updateScales();\n      this.updateIndicators();\n    }\n\n    // Gets called on every draw call\n    drawTile(tile, storePolyStr) {\n      tile.graphics.clear();\n\n      if (!this.options.stratification.axisNoGroupColor) {\n        let yStart = 0;\n        let yEnd = 0;\n        this.groupSizes.forEach((size, i) => {\n          yEnd += this.categoryHeightScale(size);\n\n          tile.graphics.beginFill(this.groupToColor.get(i)[1]);\n          tile.graphics.drawRect(\n            0,\n            yStart,\n            this.dimensions[0],\n            Math.abs(yEnd - yStart)\n          );\n\n          yStart = yEnd;\n        });\n        tile.graphics.endFill();\n      }\n    }\n\n    /**\n     * Shows value and type for each bar\n     *\n     * @param trackX relative x-coordinate of mouse\n     * @param trackY relative y-coordinate of mouse\n     * @returns string with embedded values and svg square for color\n     */\n    getMouseOverHtml(trackX, trackY) {\n      if (!this.tilesetInfo) return '';\n\n      const zoomLevel = this.calculateZoomLevel();\n      const tileWidth = tileProxy.calculateTileWidth(\n        this.tilesetInfo,\n        zoomLevel,\n        this.tilesetInfo.tile_size\n      );\n\n      // the position of the tile containing the query position\n      const tileId = this.tileToLocalId([\n        zoomLevel,\n        Math.floor(this._xScale.invert(trackX) / tileWidth),\n      ]);\n      const fetchedTile = this.fetchedTiles[tileId];\n\n      if (!fetchedTile) return '';\n\n      const category = this.yToCategory.get(\n        Math.floor(this.categoryHeightScale.invert(trackY))\n      );\n\n      const xAbsLo = this._xScale.invert(trackX - 1);\n      const xAbsHi = this._xScale.invert(trackX + 1);\n\n      let foundItem;\n      fetchedTile.intervalTree.queryInterval(xAbsLo, xAbsHi, (interval) => {\n        const item = fetchedTile.tileData[interval[2]];\n        if (this.getCategory(item) === category) {\n          foundItem = item;\n          return true;\n        }\n        return false;\n      });\n\n      if (foundItem) {\n        const [color, bg] = this.groupToColor.get(\n          this.categoryToGroup.get(category)\n        );\n        const colorHex = `#${color.toString(16)}`;\n        const bgHex = `#${bg.toString(16)}`;\n        const value = this.getImportance(foundItem).toFixed(2);\n        return `<div style=\"margin: -0.25rem; padding: 0 0.25rem; background: ${bgHex}\"><strong style=\"color: ${colorHex};\">${category}:</strong> ${value}</div>`;\n      }\n\n      return '';\n    }\n\n    setPosition(newPosition) {\n      super.setPosition(newPosition);\n\n      [this.pMain.position.x, this.pMain.position.y] = this.position;\n    }\n\n    zoomed(newXScale, newYScale) {\n      this.xScale(newXScale);\n      this.yScale(newYScale);\n\n      if (this.indicatorPointGraphics) {\n        scaleScalableGraphics(\n          this.indicatorPointGraphics,\n          newXScale,\n          this.drawnAtScale\n        );\n      }\n\n      this.refreshTiles();\n      this.draw();\n    }\n\n    /**\n     * Export an SVG representation of this track\n     *\n     * @returns {Array} The two returned DOM nodes are both SVG\n     * elements [base,track]. Base is a parent which contains track as a\n     * child. Track is clipped with a clipping rectangle contained in base.\n     *\n     */\n    exportSVG() {\n      let track = null;\n      let base = null;\n\n      [base, track] = super.superSVG();\n\n      base.setAttribute('class', 'exported-arcs-track');\n      const output = document.createElement('g');\n\n      track.appendChild(output);\n      output.setAttribute(\n        'transform',\n        `translate(${this.position[0]},${this.position[1]})`\n      );\n\n      this.visibleAndFetchedTiles().forEach((tile) => {\n        this.polys = [];\n\n        // call drawTile with storePolyStr = true so that\n        // we record path strings to use in the SVG\n        this.drawTile(tile, true);\n\n        for (const { polyStr, opacity } of this.polys) {\n          const g = document.createElement('path');\n          g.setAttribute('fill', 'transparent');\n          g.setAttribute('opacity', opacity);\n\n          g.setAttribute('d', polyStr);\n          output.appendChild(g);\n        }\n      });\n      return [base, track];\n    }\n  }\n\n  return new StratifiedBedTrack(...args);\n};\n\nconst icon =\n  '<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\" fill-rule=\"evenodd\" clip-rule=\"evenodd\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"1.5\"><path d=\"M4 2.1L.5 3.5v12l5-2 5 2 5-2v-12l-5 2-3.17-1.268\" fill=\"none\" stroke=\"currentColor\"/><path d=\"M10.5 3.5v12\" fill=\"none\" stroke=\"currentColor\" stroke-opacity=\".33\" stroke-dasharray=\"1,2,0,0\"/><path d=\"M5.5 13.5V6\" fill=\"none\" stroke=\"currentColor\" stroke-opacity=\".33\" stroke-width=\".9969299999999999\" stroke-dasharray=\"1.71,3.43,0,0\"/><path d=\"M9.03 5l.053.003.054.006.054.008.054.012.052.015.052.017.05.02.05.024 4 2 .048.026.048.03.046.03.044.034.042.037.04.04.037.04.036.042.032.045.03.047.028.048.025.05.022.05.02.053.016.053.014.055.01.055.007.055.005.055v.056l-.002.056-.005.055-.008.055-.01.055-.015.054-.017.054-.02.052-.023.05-.026.05-.028.048-.03.046-.035.044-.035.043-.038.04-4 4-.04.037-.04.036-.044.032-.045.03-.046.03-.048.024-.05.023-.05.02-.052.016-.052.015-.053.012-.054.01-.054.005-.055.003H8.97l-.053-.003-.054-.006-.054-.008-.054-.012-.052-.015-.052-.017-.05-.02-.05-.024-4-2-.048-.026-.048-.03-.046-.03-.044-.034-.042-.037-.04-.04-.037-.04-.036-.042-.032-.045-.03-.047-.028-.048-.025-.05-.022-.05-.02-.053-.016-.053-.014-.055-.01-.055-.007-.055L4 10.05v-.056l.002-.056.005-.055.008-.055.01-.055.015-.054.017-.054.02-.052.023-.05.026-.05.028-.048.03-.046.035-.044.035-.043.038-.04 4-4 .04-.037.04-.036.044-.032.045-.03.046-.03.048-.024.05-.023.05-.02.052-.016.052-.015.053-.012.054-.01.054-.005L8.976 5h.054zM5 10l4 2 4-4-4-2-4 4z\" fill=\"currentColor\"/><path d=\"M7.124 0C7.884 0 8.5.616 8.5 1.376v3.748c0 .76-.616 1.376-1.376 1.376H3.876c-.76 0-1.376-.616-1.376-1.376V1.376C2.5.616 3.116 0 3.876 0h3.248zm.56 5.295L5.965 1H5.05L3.375 5.295h.92l.354-.976h1.716l.375.975h.945zm-1.596-1.7l-.592-1.593-.58 1.594h1.172z\" fill=\"currentColor\"/></svg>';\n\ncreateStratifiedBedTrack.config = {\n  type: 'stratified-bed',\n  datatype: ['arcs', 'bedlike'],\n  orientation: '1d',\n  name: 'Arcs1D',\n  thumbnail: new DOMParser().parseFromString(icon, 'text/xml').documentElement,\n  availableOptions: [\n    'arcStyle',\n    'flip1D',\n    'labelPosition',\n    'labelColor',\n    'labelTextOpacity',\n    'labelBackgroundOpacity',\n    'trackBorderWidth',\n    'trackBorderColor',\n  ],\n  defaultOptions: {\n    arcStyle: 'ellipse',\n    flip1D: 'no',\n    labelColor: 'black',\n    labelPosition: 'hidden',\n    trackBorderWidth: 0,\n    trackBorderColor: 'black',\n  },\n  optionsInfo: {\n    arcStyle: {\n      name: 'Arc Style',\n      inlineOptions: {\n        circle: {\n          name: 'Circle',\n          value: 'circle',\n        },\n        ellipse: {\n          name: 'Ellipse',\n          value: 'ellipse',\n        },\n      },\n    },\n  },\n};\n\nexport default createStratifiedBedTrack;\n","import { dashedXLineTo } from './utils';\n\nconst VS = `\n  precision mediump float;\n  attribute vec2 aPosition;\n  attribute float aOpacity;\n  attribute float aFocused;\n\n  uniform mat3 projectionMatrix;\n  uniform mat3 translationMatrix;\n  uniform float uPointSize;\n  uniform vec4 uColor;\n  uniform vec4 uColorFocused;\n\n  varying vec4 vColor;\n  varying vec4 vColorFocused;\n  varying float vOpacity;\n  varying float vFocused;\n\n  void main(void)\n  {\n    vColor = uColor;\n    vColorFocused = uColorFocused;\n    vOpacity = aOpacity;\n    vFocused = aFocused;\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aPosition, 1.0)).xy, 0.0, 1.0);\n    gl_PointSize = uPointSize;\n  }\n`;\n\nconst FS_ROUND = `\n  #ifdef GL_OES_standard_derivatives\n  #extension GL_OES_standard_derivatives : enable\n  #endif\n\n  precision mediump float;\n\n  varying vec4 vColor;\n  varying vec4 vColorFocused;\n  varying float vOpacity;\n  varying float vFocused;\n\n  void main() {\n    float r = 0.0, delta = 0.0, alpha = 1.0;\n    vec2 cxy = 2.0 * gl_PointCoord - 1.0;\n    r = dot(cxy, cxy);\n\n    #ifdef GL_OES_standard_derivatives\n      delta = fwidth(r);\n      alpha = 1.0 - smoothstep(1.0 - delta, 1.0 + delta, r);\n    #endif\n\n    gl_FragColor = vec4(vColor.rgb, alpha * vColor.a);\n  }\n`;\n\nconst FS_SQUARE = `\n  precision mediump float;\n  varying vec4 vColor;\n  varying vec4 vColorFocused;\n  varying float vOpacity;\n  varying float vFocused;\n\n  void main() {\n    float isNotFocused = 1.0 - vFocused;\n\n    float r = vColor.r * isNotFocused + vColorFocused.r * vFocused;\n    float g = vColor.g * isNotFocused + vColorFocused.g * vFocused;\n    float b = vColor.b * isNotFocused + vColorFocused.b * vFocused;\n\n    gl_FragColor = vec4(r, g, b, 1.0) * vOpacity;\n  }\n`;\n\nconst DEFAULT_GROUP_COLORS = [\n  // '#c17da5',\n  '#c76526',\n  '#dca237',\n  '#eee462',\n  '#469b76',\n  '#3170ad',\n  '#6fb2e4',\n  '#000000',\n  '#999999',\n];\n\nconst DEFAULT_GROUP_COLORS_DARK = [\n  // '#a1688a',\n  '#a65420',\n  '#b7872e',\n  '#9f9841',\n  '#3a8162',\n  '#295d90',\n  '#4a7798',\n  '#000000',\n  '#666666',\n];\n\nconst DEFAULT_GROUP_COLORS_LIGHT = [\n  // '#f5e9f0',\n  '#f6e5db',\n  '#f9f0de',\n  '#fcfbe5',\n  '#e0eee8',\n  '#dde7f1',\n  '#e7f2fb',\n  '#d5d5d5',\n  '#ffffff',\n];\n\nconst getIs2d = (tile) =>\n  tile.tileData.length && tile.tileData[0].yStart !== undefined;\n\nconst get1dItemWidth = (item) => item.xEnd - item.xStart;\n\nconst get2dItemWidth = (item) =>\n  Math.abs(\n    item.xStart +\n      (item.xEnd - item.xStart) / 2 -\n      (item.yStart + (item.yEnd - item.yStart) / 2)\n  );\n\nconst get1dStart = (item) => item.xStart;\n\nconst get2dStart = (item) => item.xStart + (item.xEnd - item.xStart) / 2;\n\nconst get1dEnd = (item) => item.xEnd;\n\nconst get2dEnd = (item) => item.yStart + (item.yEnd - item.yStart) / 2;\n\nconst getMaxWidth = (fetchedTiles) =>\n  Object.values(fetchedTiles).reduce(\n    (maxWidth, tile) =>\n      Math.max(\n        maxWidth,\n        tile.tileData.reduce(\n          (maxWidthItem, item) => Math.max(maxWidthItem, item.width),\n          0\n        )\n      ),\n    0\n  );\n\nconst scaleScalableGraphics = (graphics, xScale, drawnAtScale) => {\n  const tileK =\n    (drawnAtScale.domain()[1] - drawnAtScale.domain()[0]) /\n    (xScale.domain()[1] - xScale.domain()[0]);\n  const newRange = xScale.domain().map(drawnAtScale);\n\n  const posOffset = newRange[0];\n  graphics.scale.x = tileK;\n  graphics.position.x = -posOffset * tileK;\n};\n\nconst createScalableArcs1dTrack = function createScalableArcs1dTrack(\n  HGC,\n  ...args\n) {\n  if (!new.target) {\n    throw new Error(\n      'Uncaught TypeError: Class constructor cannot be invoked without \"new\"'\n    );\n  }\n\n  const { PIXI } = HGC.libraries;\n  const { scaleLinear, scaleLog } = HGC.libraries.d3Scale;\n\n  const opacityLogScale = scaleLog()\n    .domain([1, 10])\n    .range([0.1, 1])\n    .clamp(true);\n\n  class ScalableArcs1dTrack extends HGC.tracks.HorizontalLine1DPixiTrack {\n    constructor(context, options) {\n      super(context, options);\n\n      this.updateOptions();\n    }\n\n    initTile(tile) {\n      const is2d = getIs2d(tile);\n      const getItemWidth = is2d ? get2dItemWidth : get1dItemWidth;\n      const getStart = is2d ? get2dStart : get1dStart;\n      const getEnd = is2d ? get2dEnd : get1dEnd;\n\n      tile.tileData.forEach((item) => {\n        item.width = getItemWidth(item);\n        item.start = getStart(item);\n        item.end = getEnd(item);\n        item.isLeftToRight = item.start < item.end;\n      });\n    }\n\n    updateTileWidthHistogram(tile) {\n      const numBins = Math.max(this.dimensions[1] / this.pointSize);\n      const binSize = this.maxWidth / numBins;\n\n      let max = 0;\n\n      tile.widthHistogramLeft = new Uint32Array(numBins);\n      tile.widthHistogramRight = new Uint32Array(numBins);\n\n      tile.tileData.forEach((item) => {\n        const bin = Math.round(item.width / binSize);\n        // We will use this for vertical offsettings similar to a beeswarm plot\n        item.histPos = item.isLeftToRight\n          ? tile.widthHistogramRight[bin]++\n          : tile.widthHistogramLeft[bin]++;\n        max = max > item.histPos ? max : item.histPos;\n      });\n\n      tile.widthHistogramMax = max;\n    }\n\n    updateWidthHistograms() {\n      Object.values(this.fetchedTiles).forEach(\n        this.updateTileWidthHistogram.bind(this)\n      );\n    }\n\n    updateStratificationOption() {\n      if (!this.options.stratification) {\n        this.categoryField = undefined;\n        this.categoryToGroup = undefined;\n        this.groupToColor = undefined;\n        this.numGroups = 0;\n        this.numCategories = 0;\n        this.groupLabels = [];\n        return;\n      }\n\n      this.categoryField = this.options.stratification.categoryField;\n      this.categoryToGroup = new Map();\n      this.categoryToY = new Map();\n      this.groupToColor = new Map();\n      this.numGroups = this.options.stratification.groups.length;\n      this.groupSizes = this.options.stratification.groups.map(\n        (group) => group.categories.length\n      );\n      this.numCategories = this.groupSizes.reduce(\n        (numCategories, groupSize) => numCategories + groupSize,\n        0\n      );\n      this.groupLabels = this.options.stratification.groups.map(\n        (group, i) => group.label || `Group ${i}`\n      );\n\n      let k = 0;\n      this.options.stratification.groups.forEach((group, i) => {\n        this.groupToColor.set(i, [\n          HGC.utils.colorToHex(\n            group.color || DEFAULT_GROUP_COLORS[i % DEFAULT_GROUP_COLORS.length]\n          ),\n          HGC.utils.colorToHex(\n            group.backgroundColor ||\n              DEFAULT_GROUP_COLORS_LIGHT[i % DEFAULT_GROUP_COLORS.length]\n          ),\n        ]);\n        group.categories.forEach((category, j) => {\n          this.categoryToGroup.set(category.toLowerCase(), i);\n          this.categoryToY.set(category.toLowerCase(), k + j);\n        });\n        k += group.categories.length;\n      });\n\n      this.groupLabelsPixiText = this.groupLabels.map(\n        (label, i) =>\n          new PIXI.Text(label, {\n            fontSize: this.labelSize,\n            // fill: this.labelColor,\n            align: this.axisAlign === 'right' ? 'right' : 'left',\n            fill: HGC.utils.colorToHex(\n              this.options.stratification.groups[i].axisLabelColor ||\n                DEFAULT_GROUP_COLORS_DARK[i % DEFAULT_GROUP_COLORS_DARK.length]\n            ),\n          })\n      );\n    }\n\n    updateOptions() {\n      this.axisAlign = this.options.axisAlign || 'left';\n\n      this.labelColor = HGC.utils.colorToHex(\n        this.options.labelColor || 'black'\n      );\n\n      this.labelSize = this.options.labelSize || 12;\n\n      this.markColor = HGC.utils.colorToHex(this.options.markColor || 'black');\n\n      this.markColorRgbNorm = this.options.markColor\n        ? HGC.utils\n            .colorToRgba(this.options.markColor)\n            .slice(0, 3)\n            .map((x) => Math.min(1, Math.max(0, x / 255)))\n        : [0, 0, 0];\n\n      this.markOpacity = Number.isNaN(+this.options.markOpacity)\n        ? 1\n        : Math.min(1, Math.max(0, +this.options.markOpacity));\n\n      this.markSize = this.options.markSize || 2;\n\n      this.markColorFocus = HGC.utils.colorToHex(\n        this.options.markColorFocus || 'red'\n      );\n\n      this.markColorFocusRgbNorm = this.options.markColorFocus\n        ? HGC.utils\n            .colorToRgba(this.options.markColorFocus)\n            .slice(0, 3)\n            .map((x) => Math.min(1, Math.max(0, x / 255)))\n        : [1, 0, 0];\n\n      this.markOpacityFocus = Number.isNaN(+this.options.markOpacityFocus)\n        ? this.markOpacity\n        : Math.min(1, Math.max(0, +this.options.markOpacityFocus));\n\n      this.markSizeFocus = this.options.markSizeFocus || this.markSize;\n\n      this.strokeColor =\n        this.markColor ||\n        HGC.utils.colorToHex(this.options.strokeColor || 'black');\n\n      this.strokeWidth = this.options.strokeWidth || this.markSize;\n\n      this.getImportance = this.options.importanceField\n        ? (item) => +item.fields[this.options.importanceField]\n        : (item) => item.width;\n\n      const importanceDomain = this.options.importanceDomain || [1000, 1];\n\n      const opacityLinearScale = scaleLinear()\n        .domain(importanceDomain)\n        .range([1, 10]);\n\n      this.opacityScale = (x) => opacityLogScale(opacityLinearScale(x));\n\n      this.focusRegion = this.options.focusRegion\n        ? this.options.focusRegion\n        : [Infinity, Infinity];\n\n      this.focusGene = this.options.focusGene\n        ? this.options.focusGene.toLowerCase()\n        : undefined;\n\n      this.getGene = this.options.geneField\n        ? (item) => item.fields[this.options.geneField].toLowerCase()\n        : undefined;\n\n      this.minImportance = this.options.minImportance || 0;\n\n      this.updateStratificationOption();\n\n      this.updateWidthHistograms();\n    }\n\n    rerender(newOptions) {\n      this.options = newOptions;\n      this.updateOptions();\n      this.updateExistingGraphics();\n    }\n\n    updateScales() {\n      const fetchedTiles = Object.values(this.fetchedTiles);\n\n      if (!fetchedTiles.length) return;\n\n      const [, height] = this.dimensions;\n      const markSizeHalf = this.markSize / 2;\n\n      this.maxWidth = getMaxWidth(this.fetchedTiles);\n\n      this.heightScale = scaleLinear()\n        .domain([0, this.maxWidth])\n        .range([Math.min(12, height / 10), height]);\n\n      this.fullHeightScale = scaleLinear()\n        .domain([this.maxWidth, 0])\n        .range([\n          Math.min(markSizeHalf, height / 10),\n          Math.max(height - markSizeHalf, (9 * height) / 10),\n        ]);\n\n      this.fullHeightScaleInverted = scaleLinear()\n        .domain([0, this.maxWidth])\n        .range([\n          Math.min(markSizeHalf, height / 10),\n          Math.max(height - markSizeHalf, (9 * height) / 10),\n        ]);\n\n      this.incomingHeightScale = scaleLinear()\n        .domain([0, this.maxWidth])\n        .range([height / 2, height]);\n\n      this.outgoingHeightScale = scaleLinear()\n        .domain([0, this.maxWidth])\n        .range([height / 2, 0]);\n\n      this.categoryHeightScale = scaleLinear()\n        .domain([0, this.numCategories])\n        .range([0, this.numCategories * this.markSize]);\n\n      this.valueScale = scaleLinear()\n        .domain([0, this.maxWidth])\n        .range([height, 0]);\n\n      this.valueScaleInverted = scaleLinear()\n        .domain([0, this.maxWidth])\n        .range([0, height]);\n    }\n\n    itemToIndicatorDiverging(item) {\n      return {\n        startX: this._xScale(item.start),\n        endX: this._xScale(item.end),\n        startY: this.outgoingHeightScale(item.width),\n        endY: this.incomingHeightScale(item.width),\n        opacity: this.opacityScale(this.getImportance(item)),\n        size: this.markSize,\n      };\n    }\n\n    itemToIndicatorStart(item) {\n      return {\n        x: this._xScale(item.start),\n        y: this.fullHeightScale(item.width),\n        opacity: this.opacityScale(this.getImportance(item)),\n        size: this.markSize,\n      };\n    }\n\n    itemToIndicatorEnd(item) {\n      return {\n        x: this._xScale(item.end),\n        y: this.fullHeightScaleInverted(item.width),\n        opacity: this.opacityScale(this.getImportance(item)),\n        size: this.markSize,\n      };\n    }\n\n    itemToIndicatorCategory(item) {\n      return {\n        cX: this._xScale(item.start),\n        cY: this.categoryHeightScale(\n          this.categoryToY.get(item.fields[this.categoryField].toLowerCase())\n        ),\n        wHalf: Math.max(\n          this.markSize / 2,\n          Math.abs(this._xScale(item.xStart) - this._xScale(item.xEnd)) / 2\n        ),\n        opacity: this.opacityScale(this.getImportance(item)),\n        focused:\n          item.xStart <= this.focusRegion[1] &&\n          item.xEnd >= this.focusRegion[0],\n        size: this.markSize,\n        sizeHalf: this.markSize / 2,\n      };\n    }\n\n    itemToIndicatorReducer(mapFn) {\n      if (this.getGene && this.focusGene) {\n        return (filteredItems, item) => {\n          const gene = this.getGene(item);\n          if (gene === this.focusGene) filteredItems.push(mapFn(item));\n          return filteredItems;\n        };\n      }\n      return (filteredItems, item) => {\n        filteredItems.push(mapFn(item));\n        return filteredItems;\n      };\n    }\n\n    renderIndicatorPoints(\n      dataToPoint,\n      pointToPosition,\n      pointToOpacity,\n      pointToFocused,\n      {\n        vertexShader = VS,\n        fragmentShader = FS_ROUND,\n        drawTriangles = false,\n      } = {}\n    ) {\n      this.drawnAtScale = scaleLinear()\n        .domain([...this.xScale().domain()])\n        .range([...this.xScale().range()]);\n\n      const points = Object.values(this.fetchedTiles).flatMap((tile) =>\n        tile.tileData.reduce(dataToPoint, [])\n      );\n\n      const positions = new Float32Array(points.flatMap(pointToPosition));\n      const opacities = new Float32Array(points.flatMap(pointToOpacity));\n      const focused = new Float32Array(points.flatMap(pointToFocused));\n\n      const uniforms = new PIXI.UniformGroup({\n        uPointSize: this.markSize,\n        uColor: [...this.markColorRgbNorm, this.markOpacity],\n        uColorFocused: [...this.markColorFocusRgbNorm, this.markOpacity],\n      });\n\n      const shader = PIXI.Shader.from(vertexShader, fragmentShader, uniforms);\n\n      const geometry = new PIXI.Geometry();\n      geometry.addAttribute('aPosition', positions, 2);\n      geometry.addAttribute('aOpacity', opacities, 1);\n      geometry.addAttribute('aFocused', focused, 1);\n\n      const mesh = new PIXI.Mesh(\n        geometry,\n        shader,\n        new PIXI.State(),\n        drawTriangles ? PIXI.DRAW_MODES.TRIANGLES : PIXI.DRAW_MODES.POINTS\n      );\n      // mesh.blendMode = PIXI.BLEND_MODES.MULTIPLY;\n\n      const newGraphics = new PIXI.Graphics();\n      newGraphics.addChild(mesh);\n\n      // eslint-disable-next-line\n      this.pMain.x = this.position[0];\n\n      if (this.indicatorPointGraphics) {\n        this.pMain.removeChild(this.indicatorPointGraphics);\n      }\n\n      this.pMain.addChild(newGraphics);\n      this.indicatorPointGraphics = newGraphics;\n\n      scaleScalableGraphics(\n        this.indicatorPointGraphics,\n        this._xScale,\n        this.drawnAtScale\n      );\n\n      this.draw();\n      this.animate();\n    }\n\n    renderIndicatorDistanceAxis(valueScale) {\n      this.drawAxis(valueScale);\n    }\n\n    renderIndicatorCategoryAxis() {\n      const [width] = this.dimensions;\n      const [left, top] = this.position;\n\n      this.pAxis.position.x = this.axisAlign === 'right' ? left + width : left;\n      this.pAxis.position.y = top;\n\n      this.pAxis.clear();\n      let yStart = 0;\n      let yEnd = 0;\n\n      const xTickOffset = this.axisAlign === 'right' ? -5 : 5;\n      const xTickEnd = this.axisAlign === 'right' ? -width : width;\n      const xLabelOffset = this.axisAlign === 'right' ? -3 : 3;\n      const numAxisLabels = this.pAxis.children.length;\n\n      this.pAxis.lineStyle(1, 0x000000, 1.0, 0.0);\n\n      this.groupLabelsPixiText.forEach((labelPixiText, i) => {\n        const height = this.categoryHeightScale(this.groupSizes[i]);\n        yEnd += height;\n        labelPixiText.x = xLabelOffset;\n        labelPixiText.y = yStart + height / 2;\n        labelPixiText.anchor.x = this.axisAlign === 'right' ? 1 : 0;\n        labelPixiText.anchor.y = 0.5;\n\n        if (numAxisLabels < i + 1) {\n          this.pAxis.addChild(labelPixiText);\n        }\n\n        this.pAxis.moveTo(0, yStart);\n        this.pAxis.lineTo(xTickOffset, yStart);\n        if (this.options.stratification.axisShowGroupSeparator) {\n          dashedXLineTo(this.pAxis, 0, xTickEnd, yStart, 5);\n        }\n\n        yStart = yEnd;\n      });\n\n      this.pAxis.moveTo(0, 0);\n      this.pAxis.lineTo(0, yEnd);\n      this.pAxis.lineTo(xTickOffset, yEnd);\n      if (this.options.stratification.axisShowGroupSeparator) {\n        dashedXLineTo(this.pAxis, 0, xTickEnd, yEnd, 5);\n      }\n    }\n\n    updateIndicators() {\n      let dataToPoint = this.itemToIndicatorDiverging.bind(this);\n      let pointToPosition = (pt) => [pt.startX, pt.startY, pt.endX, pt.endY];\n      let pointToOpacity = (pt) => pt.opacity;\n      let pointToFocused = (pt) => pt.focused;\n      let fragmentShader = FS_ROUND;\n      let drawTriangles = false;\n\n      if (this.options.indicatorStyle === 'category') {\n        dataToPoint = this.itemToIndicatorCategory.bind(this);\n        pointToPosition = (pt) => [pt.cX, pt.cY];\n        fragmentShader = FS_SQUARE;\n        this.renderIndicatorCategoryAxis(this.valueScaleInverted);\n      } else if (this.options.indicatorStyle === 'category-rect') {\n        dataToPoint = this.itemToIndicatorCategory.bind(this);\n        // prettier-ignore\n        pointToPosition = (pt) => [\n          pt.cX - pt.wHalf, pt.cY,\n          pt.cX + pt.wHalf, pt.cY,\n          pt.cX + pt.wHalf, pt.cY + pt.size,\n          pt.cX + pt.wHalf, pt.cY + pt.size,\n          pt.cX - pt.wHalf, pt.cY + pt.size,\n          pt.cX - pt.wHalf, pt.cY,\n        ];\n        pointToOpacity = (pt) => [\n          pt.opacity,\n          pt.opacity,\n          pt.opacity,\n          pt.opacity,\n          pt.opacity,\n          pt.opacity,\n        ];\n        pointToFocused = (pt) => [\n          pt.focused,\n          pt.focused,\n          pt.focused,\n          pt.focused,\n          pt.focused,\n          pt.focused,\n        ];\n        fragmentShader = FS_SQUARE;\n        drawTriangles = true;\n        this.renderIndicatorCategoryAxis(this.valueScaleInverted);\n      } else if (this.options.indicatorStyle === 'start-only') {\n        dataToPoint = this.itemToIndicatorStart.bind(this);\n        pointToPosition = (pt) => [pt.x, pt.y];\n        this.renderIndicatorDistanceAxis(this.valueScale);\n      } else if (this.options.indicatorStyle === 'end-only') {\n        dataToPoint = this.itemToIndicatorEnd.bind(this);\n        pointToPosition = (pt) => [pt.x, pt.y];\n        this.renderIndicatorDistanceAxis(this.valueScaleInverted);\n      }\n\n      // dataToPoint must be a reducer.\n      dataToPoint = this.itemToIndicatorReducer(dataToPoint);\n\n      this.renderIndicatorPoints(\n        dataToPoint,\n        pointToPosition,\n        pointToOpacity,\n        pointToFocused,\n        {\n          fragmentShader,\n          drawTriangles,\n        }\n      );\n    }\n\n    // Called whenever a new tile comes in\n    updateExistingGraphics() {\n      this.updateScales();\n      this.updateWidthHistograms();\n      if (this.options.arcStyle === 'indicator') this.updateIndicators();\n    }\n\n    // Gets called on every draw call\n    drawTile(tile, storePolyStr) {\n      tile.graphics.clear();\n\n      if (!tile.tileData.length) return;\n\n      if (this.options.arcStyle === 'indicator') {\n        const [width, height] = this.dimensions;\n\n        if (this.options.indicatorStyle.startsWith('category')) {\n          if (!this.options.stratification.axisNoGroupColor) {\n            let yStart = 0;\n            let yEnd = 0;\n            this.groupSizes.forEach((size, i) => {\n              yEnd += this.categoryHeightScale(size);\n\n              tile.graphics.beginFill(this.groupToColor.get(i)[1]);\n              tile.graphics.drawRect(0, yStart, width, Math.abs(yEnd - yStart));\n\n              yStart = yEnd;\n            });\n            tile.graphics.endFill();\n          }\n        } else {\n          let y = Math.round(height / 2) - 0.5;\n\n          if (this.options.indicatorStyle === 'start-only') {\n            y = height - 0.5;\n          } else if (this.options.indicatorStyle === 'end-only') {\n            y = 0.5;\n          }\n          tile.graphics.lineStyle(1, 0, 0.2);\n          tile.graphics.moveTo(0, y);\n          tile.graphics.lineTo(width, y);\n        }\n      }\n\n      for (let i = 0; i < tile.tileData.length; i++) {\n        const item = tile.tileData[i];\n\n        if (this.options.arcStyle === 'circle') {\n          this.drawCircle(tile.graphics, item, storePolyStr);\n        } else if (this.options.arcStyle === 'indicator') {\n          // this.drawIndicator(tile.graphics, this.itemToIndicator(item));\n        } else {\n          this.drawEllipse(tile.graphics, item, storePolyStr);\n        }\n      }\n    }\n\n    drawIndicator(graphics, item) {\n      const startX = this._xScale(item.start);\n      const endX = this._xScale(item.end);\n      const startY = this.outgoingHeightScale(item.width);\n      const endY = this.incomingHeightScale(item.width);\n\n      const opacity = this.opacityScale(this.getImportance(item));\n\n      graphics.lineStyle(0, 0, 0);\n\n      graphics.beginFill(0x3d8cd9, opacity);\n      graphics.drawCircle(startX, startY, this.pointSize);\n      graphics.endFill();\n\n      graphics.beginFill(0xc17da5, opacity);\n      graphics.drawCircle(endX, endY, this.pointSize);\n      graphics.endFill();\n\n      if (\n        item.start <= this.focusRegion[1] &&\n        item.end >= this.focusRegion[0] &&\n        (item.start >= this.focusRegion[0] || item.end <= this.focusRegion[1])\n      ) {\n        graphics.lineStyle(this.pointSize, 0xc17da5, opacity);\n        graphics.moveTo(startX, endY);\n        graphics.lineTo(endX, endY);\n        graphics.endFill();\n      }\n    }\n\n    drawCircle(graphics, item, opacityScale, storePolyStr) {\n      const x1 = this._xScale(item.start);\n      const x2 = this._xScale(item.end);\n      const [trackWidth, trackHeight] = this.dimensions;\n      const [, trackY] = this.position;\n\n      const h = (x2 - x1) / 2;\n      const d = (x2 - x1) / 2;\n      const r = (d * d + h * h) / (2 * h);\n      const cx = (x1 + x2) / 2;\n      let cy = trackHeight - h + r;\n\n      let polyStr = '';\n\n      if (storePolyStr) {\n        polyStr += `M${x1},${trackY + trackHeight}`;\n      }\n\n      graphics.moveTo(x1, trackY + trackHeight);\n\n      const limitX1 = Math.max(0, x1);\n      const limitX2 = Math.min(trackWidth, x2);\n\n      let color = this.markColor;\n      let size = this.markSize;\n      let opacity = this.markOpacity;\n\n      if (\n        item.start <= this.focusRegion[1] &&\n        item.end >= this.focusRegion[0] &&\n        (item.start >= this.focusRegion[0] || item.end <= this.focusRegion[1])\n      ) {\n        color = this.markColorFocus;\n        size = this.markSizeFocus;\n        opacity = this.markOpacityFocus;\n      }\n\n      graphics.lineStyle(size, color, opacity);\n\n      const startAngle = Math.acos(\n        Math.min(Math.max(-(limitX1 - cx) / r, -1), 1)\n      );\n      let endAngle = Math.acos(Math.min(Math.max(-(limitX2 - cx) / r, -1), 1));\n\n      if (this.options.flip) {\n        cy = 0;\n        endAngle = -Math.PI;\n        graphics.moveTo(x1, 0);\n        if (storePolyStr) polyStr += `M${x1},0`;\n      }\n\n      const resolution = 10;\n      const angleScale = scaleLinear()\n        .domain([0, resolution - 1])\n        .range([startAngle, endAngle]);\n\n      for (let k = 0; k < resolution; k++) {\n        const ax = r * Math.cos(angleScale(k));\n        const ay = r * Math.sin(angleScale(k));\n\n        const rx = cx - ax;\n        const ry = cy - ay;\n\n        graphics.lineTo(rx, ry);\n        if (storePolyStr) polyStr += `L${rx},${ry}`;\n      }\n\n      if (storePolyStr) {\n        this.polys.push({\n          polyStr,\n          opacity,\n        });\n      }\n    }\n\n    drawEllipse(graphics, item, heightScale, opacityScale, storePolyStr) {\n      const x1 = this._xScale(item.start);\n      const x2 = this._xScale(item.end);\n      const [, trackHeight] = this.dimensions;\n\n      const h = this.heightScale(item.width);\n      const w = x2 - x1;\n      const r = w / 2;\n\n      const cx = (x1 + x2) / 2;\n      let cy = trackHeight;\n      const startAngle = 0;\n      let endAngle = Math.PI;\n\n      let polyStr = '';\n      if (storePolyStr) polyStr += `M${x1},${trackHeight}`;\n      graphics.moveTo(x1, trackHeight);\n\n      if (this.options.flip) {\n        cy = 0;\n        endAngle = -Math.PI;\n        graphics.moveTo(x1, 0);\n        if (storePolyStr) polyStr += `M${x1},0`;\n      }\n\n      let color = this.markColor;\n      let size = this.markSize;\n      let opacity = this.markOpacity;\n\n      if (\n        item.start <= this.focusRegion[1] &&\n        item.end >= this.focusRegion[0] &&\n        (item.start >= this.focusRegion[0] || item.end <= this.focusRegion[1])\n      ) {\n        color = this.markColorFocus;\n        size = this.markSizeFocus;\n        opacity = this.markOpacityFocus;\n      }\n\n      graphics.lineStyle(size, color, opacity);\n\n      const resolution = Math.round(Math.abs(w) / 200) * 10;\n\n      const angleScale = scaleLinear()\n        .domain([0, resolution - 1])\n        .range([startAngle, endAngle]);\n\n      for (let k = 0; k < resolution; k++) {\n        const ax = r * Math.cos(angleScale(k));\n        const ay = h * Math.sin(angleScale(k));\n\n        const rx = cx - ax;\n        const ry = cy - ay;\n\n        graphics.lineTo(rx, ry);\n        if (storePolyStr) polyStr += `L${rx},${ry}`;\n      }\n\n      if (storePolyStr) {\n        this.polys.push({\n          polyStr,\n          opacity,\n        });\n      }\n    }\n\n    getMouseOverHtml() {}\n\n    setPosition(newPosition) {\n      super.setPosition(newPosition);\n\n      [this.pMain.position.x, this.pMain.position.y] = this.position;\n    }\n\n    zoomed(newXScale, newYScale) {\n      this.xScale(newXScale);\n      this.yScale(newYScale);\n\n      if (this.indicatorPointGraphics) {\n        scaleScalableGraphics(\n          this.indicatorPointGraphics,\n          newXScale,\n          this.drawnAtScale\n        );\n      }\n\n      this.refreshTiles();\n      this.draw();\n    }\n\n    /**\n     * Export an SVG representation of this track\n     *\n     * @returns {Array} The two returned DOM nodes are both SVG\n     * elements [base,track]. Base is a parent which contains track as a\n     * child. Track is clipped with a clipping rectangle contained in base.\n     *\n     */\n    exportSVG() {\n      let track = null;\n      let base = null;\n\n      [base, track] = super.superSVG();\n\n      base.setAttribute('class', 'exported-arcs-track');\n      const output = document.createElement('g');\n\n      track.appendChild(output);\n      output.setAttribute(\n        'transform',\n        `translate(${this.position[0]},${this.position[1]})`\n      );\n\n      const strokeColor = this.options.strokeColor\n        ? this.options.strokeColor\n        : 'blue';\n      const strokeWidth = this.options.strokeWidth\n        ? this.options.strokeWidth\n        : 2;\n\n      this.visibleAndFetchedTiles().forEach((tile) => {\n        this.polys = [];\n\n        // call drawTile with storePolyStr = true so that\n        // we record path strings to use in the SVG\n        this.drawTile(tile, true);\n\n        for (const { polyStr, opacity } of this.polys) {\n          const g = document.createElement('path');\n          g.setAttribute('fill', 'transparent');\n          g.setAttribute('stroke', strokeColor);\n          g.setAttribute('stroke-width', strokeWidth);\n          g.setAttribute('opacity', opacity);\n\n          g.setAttribute('d', polyStr);\n          output.appendChild(g);\n        }\n      });\n      return [base, track];\n    }\n  }\n\n  return new ScalableArcs1dTrack(...args);\n};\n\nconst icon =\n  '<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\" fill-rule=\"evenodd\" clip-rule=\"evenodd\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"1.5\"><path d=\"M4 2.1L.5 3.5v12l5-2 5 2 5-2v-12l-5 2-3.17-1.268\" fill=\"none\" stroke=\"currentColor\"/><path d=\"M10.5 3.5v12\" fill=\"none\" stroke=\"currentColor\" stroke-opacity=\".33\" stroke-dasharray=\"1,2,0,0\"/><path d=\"M5.5 13.5V6\" fill=\"none\" stroke=\"currentColor\" stroke-opacity=\".33\" stroke-width=\".9969299999999999\" stroke-dasharray=\"1.71,3.43,0,0\"/><path d=\"M9.03 5l.053.003.054.006.054.008.054.012.052.015.052.017.05.02.05.024 4 2 .048.026.048.03.046.03.044.034.042.037.04.04.037.04.036.042.032.045.03.047.028.048.025.05.022.05.02.053.016.053.014.055.01.055.007.055.005.055v.056l-.002.056-.005.055-.008.055-.01.055-.015.054-.017.054-.02.052-.023.05-.026.05-.028.048-.03.046-.035.044-.035.043-.038.04-4 4-.04.037-.04.036-.044.032-.045.03-.046.03-.048.024-.05.023-.05.02-.052.016-.052.015-.053.012-.054.01-.054.005-.055.003H8.97l-.053-.003-.054-.006-.054-.008-.054-.012-.052-.015-.052-.017-.05-.02-.05-.024-4-2-.048-.026-.048-.03-.046-.03-.044-.034-.042-.037-.04-.04-.037-.04-.036-.042-.032-.045-.03-.047-.028-.048-.025-.05-.022-.05-.02-.053-.016-.053-.014-.055-.01-.055-.007-.055L4 10.05v-.056l.002-.056.005-.055.008-.055.01-.055.015-.054.017-.054.02-.052.023-.05.026-.05.028-.048.03-.046.035-.044.035-.043.038-.04 4-4 .04-.037.04-.036.044-.032.045-.03.046-.03.048-.024.05-.023.05-.02.052-.016.052-.015.053-.012.054-.01.054-.005L8.976 5h.054zM5 10l4 2 4-4-4-2-4 4z\" fill=\"currentColor\"/><path d=\"M7.124 0C7.884 0 8.5.616 8.5 1.376v3.748c0 .76-.616 1.376-1.376 1.376H3.876c-.76 0-1.376-.616-1.376-1.376V1.376C2.5.616 3.116 0 3.876 0h3.248zm.56 5.295L5.965 1H5.05L3.375 5.295h.92l.354-.976h1.716l.375.975h.945zm-1.596-1.7l-.592-1.593-.58 1.594h1.172z\" fill=\"currentColor\"/></svg>';\n\ncreateScalableArcs1dTrack.config = {\n  type: '1d-arcs',\n  datatype: ['arcs', 'bedlike'],\n  orientation: '1d',\n  name: 'Arcs1D',\n  thumbnail: new DOMParser().parseFromString(icon, 'text/xml').documentElement,\n  availableOptions: [\n    'arcStyle',\n    'flip1D',\n    'labelPosition',\n    'labelColor',\n    'labelTextOpacity',\n    'labelBackgroundOpacity',\n    'strokeColor',\n    'strokeWidth',\n    'trackBorderWidth',\n    'trackBorderColor',\n  ],\n  defaultOptions: {\n    arcStyle: 'ellipse',\n    flip1D: 'no',\n    labelColor: 'black',\n    labelPosition: 'hidden',\n    strokeColor: 'black',\n    strokeWidth: 1,\n    trackBorderWidth: 0,\n    trackBorderColor: 'black',\n  },\n  optionsInfo: {\n    arcStyle: {\n      name: 'Arc Style',\n      inlineOptions: {\n        circle: {\n          name: 'Circle',\n          value: 'circle',\n        },\n        ellipse: {\n          name: 'Ellipse',\n          value: 'ellipse',\n        },\n      },\n    },\n  },\n};\n\nexport default createScalableArcs1dTrack;\n","const MAX_RADIUS = 2;\nconst MAX_RADIUS_EXTENSION = 2;\n\n// const VS = `\n//   attribute vec2 aPosition;\n\n//   uniform mat3 projectionMatrix;\n//   uniform mat3 translationMatrix;\n//   uniform float uPointSize;\n//   uniform vec4 uColor;\n\n//   varying vec4 vColor;\n\n//   void main(void)\n//   {\n//     vColor = uColor;\n//     gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aPosition, 1.0)).xy, 0.0, 1.0);\n//     gl_PointSize = uPointSize;\n//   }\n// `;\n\n// const FS_ROUND = `\n//   #ifdef GL_OES_standard_derivatives\n//   #extension GL_OES_standard_derivatives : enable\n//   #endif\n\n//   precision mediump float;\n\n//   varying vec4 vColor;\n\n//   void main() {\n//     float r = 0.0, delta = 0.0, alpha = 1.0;\n//     vec2 cxy = 2.0 * gl_PointCoord - 1.0;\n//     r = dot(cxy, cxy);\n\n//     #ifdef GL_OES_standard_derivatives\n//       delta = fwidth(r);\n//       alpha = 1.0 - smoothstep(1.0 - delta, 1.0 + delta, r);\n//     #endif\n\n//     gl_FragColor = vec4(vColor.rgb, alpha * vColor.a);\n//   }\n// `;\n\n// const FS_SQUARE = `\n//   precision mediump float;\n//   varying vec4 vColor;\n\n//   void main() {\n//     gl_FragColor = vec4(vColor.rgb, vColor.a);\n//   }\n// `;\n\n// const DEFAULT_GROUP_COLORS = [\n//   '#c17da5',\n//   '#c76526',\n//   '#dca237',\n//   '#eee462',\n//   '#469b76',\n//   '#3170ad',\n//   '#6fb2e4',\n//   '#000000',\n//   '#999999',\n// ];\n\n// const DEFAULT_GROUP_COLORS_DARK = [\n//   '#a1688a',\n//   '#a65420',\n//   '#b7872e',\n//   '#9f9841',\n//   '#3a8162',\n//   '#295d90',\n//   '#4a7798',\n//   '#000000',\n//   '#666666',\n// ];\n\n// const DEFAULT_GROUP_COLORS_LIGHT = [\n//   '#f5e9f0',\n//   '#f6e5db',\n//   '#f9f0de',\n//   '#fcfbe5',\n//   '#e0eee8',\n//   '#dde7f1',\n//   '#e7f2fb',\n//   '#d5d5d5',\n//   '#ffffff',\n// ];\n\n// const scaleScalableGraphics = (graphics, xScale, drawnAtScale) => {\n//   const tileK =\n//     (drawnAtScale.domain()[1] - drawnAtScale.domain()[0]) /\n//     (xScale.domain()[1] - xScale.domain()[0]);\n//   const newRange = xScale.domain().map(drawnAtScale);\n\n//   const posOffset = newRange[0];\n//   graphics.scale.x = tileK;\n//   graphics.position.x = -posOffset * tileK;\n// };\n\nconst createSnpTrack = function createSnpTrack(HGC, ...args) {\n  if (!new.target) {\n    throw new Error(\n      'Uncaught TypeError: Class constructor cannot be invoked without \"new\"'\n    );\n  }\n\n  const { range } = HGC.libraries.d3Array;\n  const { scaleBand } = HGC.libraries.d3Scale;\n  const { tileProxy } = HGC.services;\n  const { colorToHex } = HGC.utils;\n\n  class SnpTrack extends HGC.tracks.BedLikeTrack {\n    setValueScale() {\n      this.valueScale = null;\n      if (this.options && this.options.valueColumn) {\n        const min = this.options.colorEncodingRange\n          ? +this.options.colorEncodingRange[0]\n          : this.minVisibleValueInTiles(+this.options.valueColumn);\n        const max = this.options.colorEncodingRange\n          ? +this.options.colorEncodingRange[1]\n          : this.maxVisibleValueInTiles(+this.options.valueColumn);\n\n        if (this.options.valueColumn) {\n          [this.valueScale] = this.makeValueScale(\n            min,\n            this.calculateMedianVisibleValue(+this.options.valueColumn),\n            max,\n            2\n          );\n        }\n      }\n    }\n\n    finalDotYPos(y, r) {\n      return Math.max(r, Math.min(this.dimensions[1] - r, y));\n    }\n\n    drawPoly(tile, xStartPos, xEndPos, rectY, doubleRadius = false) {\n      // prettier-ignore\n      const drawnPoly = [\n        // left top\n        xStartPos, rectY,\n        // right top\n        xEndPos, rectY,\n        // right bottom\n        xEndPos, this.dimensions[1],\n         // left bottom\n        xStartPos, this.dimensions[1]\n      ];\n\n      const anchorRadius = Math.max(MAX_RADIUS, xEndPos - xStartPos);\n      const radius = anchorRadius * (1 + MAX_RADIUS_EXTENSION * doubleRadius);\n\n      tile.rectGraphics.drawCircle(\n        xStartPos,\n        this.finalDotYPos(rectY, anchorRadius),\n        radius\n      );\n\n      return drawnPoly;\n    }\n\n    renderRows(tile, rows, maxRows, startY, endY, fill) {\n      const zoomLevel = +tile.tileId.split('.')[0];\n\n      this.initialize();\n\n      const rowScale = scaleBand()\n        .domain(range(maxRows))\n        .range([startY, endY])\n        .paddingInner(0);\n\n      const focusRegion = this.options.focusRegion || [Infinity, Infinity];\n\n      const circleDraws = [];\n      const circleFocusDraws = [];\n\n      for (let j = 0; j < rows.length; j++) {\n        for (let i = 0; i < rows[j].length; i++) {\n          const td = rows[j][i].value;\n          const geneInfo = td.fields;\n\n          // the returned positions are chromosome-based and they need to\n          // be converted to genome-based\n          const chrOffset = +td.chrOffset;\n          const txStart = +geneInfo[1] + chrOffset;\n          const txEnd = +geneInfo[2] + chrOffset;\n          let yMiddle = rowScale(j) + rowScale.step() / 2;\n\n          if (this.valueScale) {\n            yMiddle = this.valueScale(+geneInfo[+this.options.valueColumn - 1]);\n          }\n\n          const rectY = yMiddle;\n          const xStartPos = this._xScale(txStart);\n          const xEndPos = this._xScale(txEnd);\n\n          // don't draw anything that has already been drawn\n          if (\n            !(\n              zoomLevel in this.drawnRects &&\n              td.uid in this.drawnRects[zoomLevel]\n            )\n          ) {\n            if (!this.drawnRects[zoomLevel]) this.drawnRects[zoomLevel] = {};\n\n            const circleDraw = [xStartPos, xEndPos, rectY, td, txStart, txEnd];\n\n            if (txStart <= focusRegion[1] && txEnd >= focusRegion[0]) {\n              circleFocusDraws.push(circleDraw);\n            } else {\n              circleDraws.push(circleDraw);\n            }\n          }\n        }\n\n        // 1. draw white background to make clicking easier\n        tile.rectGraphics.lineStyle(0);\n        tile.rectGraphics.beginFill(0xffffff);\n        circleDraws.forEach((circleDraw) => {\n          this.drawPoly(\n            tile,\n            circleDraw[0],\n            circleDraw[1],\n            circleDraw[2],\n            true\n          );\n        });\n\n        // 2. Now draw the normal circles\n        let color = this.options.markColor || 'black';\n        let opacity = this.options.fillOpacity || 0.3;\n        tile.rectGraphics.lineStyle(1, colorToHex(color), opacity);\n        tile.rectGraphics.beginFill(colorToHex(color), opacity);\n        circleDraws.forEach((circleDraw) => {\n          const drawnPoly = this.drawPoly(\n            tile,\n            circleDraw[0],\n            circleDraw[1],\n            circleDraw[2]\n          );\n          this.drawnRects[zoomLevel][circleDraw[4].uid] = [\n            drawnPoly,\n            {\n              start: circleDraw[4],\n              end: circleDraw[5],\n              value: circleDraw[3],\n              tile,\n              fill,\n            },\n            tile.tileId,\n          ];\n        });\n\n        // 2. Now draw the focused circles\n        color = this.options.markColorFocus || 'red';\n        opacity = this.options.markOpacityFocus || 0.6;\n        tile.rectGraphics.lineStyle(1, colorToHex(color), opacity);\n        tile.rectGraphics.beginFill(colorToHex(color), opacity);\n        circleFocusDraws.forEach((circleDraw) => {\n          const drawnPoly = this.drawPoly(\n            tile,\n            circleDraw[0],\n            circleDraw[1],\n            circleDraw[2]\n          );\n          this.drawnRects[zoomLevel][circleDraw[4].uid] = [\n            drawnPoly,\n            {\n              start: circleDraw[4],\n              end: circleDraw[5],\n              value: circleDraw[3],\n              tile,\n              fill,\n            },\n            tile.tileId,\n          ];\n        });\n        tile.rectGraphics.endFill();\n      }\n\n      tile.rectGraphics.interactive = true;\n      tile.rectGraphics.buttonMode = true;\n      tile.rectGraphics.mouseup = (event) => {\n        if (this.hoveringSnp) {\n          this.pubSub.publish('app.click', {\n            type: 'snp',\n            event,\n            payload: this.hoveringSnp,\n          });\n        }\n      };\n    }\n\n    /**\n     * Shows value and type for each bar\n     *\n     * @param trackX relative x-coordinate of mouse\n     * @param trackY relative y-coordinate of mouse\n     * @returns string with embedded values and svg square for color\n     */\n    getMouseOverHtml(trackX, trackY) {\n      this.hoveringSnp = undefined;\n\n      if (!this.tilesetInfo && !this.options.toolTip) return '';\n\n      const zoomLevel = this.calculateZoomLevel();\n      const tileWidth = tileProxy.calculateTileWidth(\n        this.tilesetInfo,\n        zoomLevel,\n        this.tilesetInfo.tile_size\n      );\n\n      // the position of the tile containing the query position\n      const genomePos = this._xScale.invert(trackX);\n      const relTilePos = genomePos / tileWidth;\n      const tilePos = Math.floor(relTilePos);\n      const tileId = this.tileToLocalId([zoomLevel, tilePos]);\n      const fetchedTile = this.fetchedTiles[tileId];\n\n      if (!fetchedTile) return '';\n\n      let minDist = 3;\n      fetchedTile.tileData.forEach((item) => {\n        const dist = Math.abs(this._xScale(item.xStart) - trackX);\n        if (dist < minDist) {\n          this.hoveringSnp = item;\n          minDist = dist;\n        }\n      });\n\n      if (!this.hoveringSnp) return '';\n\n      const itemY = this.finalDotYPos(\n        this.valueScale(this.hoveringSnp.importance),\n        2\n      );\n\n      if (\n        Math.abs(itemY - (trackY - 1)) >\n        MAX_RADIUS * (MAX_RADIUS_EXTENSION + 1)\n      )\n        return '';\n\n      const name = this.hoveringSnp.fields[this.options.toolTip.name.field];\n      const value = (+this.hoveringSnp.fields[\n        this.options.toolTip.value.field\n      ]).toFixed(this.options.toolTip.value.numDecimals || 2);\n      let otherStr = '';\n\n      if (this.options.toolTip.other) {\n        this.options.toolTip.other.forEach((other) => {\n          const label = other.label || '';\n          const v = (+this.hoveringSnp.fields[other.field]).toFixed(\n            other.numDecimals || 2\n          );\n          otherStr += `${label}: ${v};`;\n        });\n        otherStr = ` (${otherStr.substr(0, otherStr.length - 1)})`;\n      }\n\n      return `<div><strong>${name}:</strong> ${value}${otherStr}</div>`;\n    }\n\n    /**\n     * Export an SVG representation of this track\n     *\n     * @returns {Array} The two returned DOM nodes are both SVG\n     * elements [base,track]. Base is a parent which contains track as a\n     * child. Track is clipped with a clipping rectangle contained in base.\n     *\n     */\n    exportSVG() {\n      let track = null;\n      let base = null;\n\n      [base, track] = super.superSVG();\n\n      base.setAttribute('class', 'exported-arcs-track');\n      const output = document.createElement('g');\n\n      track.appendChild(output);\n      output.setAttribute(\n        'transform',\n        `translate(${this.position[0]},${this.position[1]})`\n      );\n\n      const strokeColor = this.options.strokeColor\n        ? this.options.strokeColor\n        : 'blue';\n      const strokeWidth = this.options.strokeWidth\n        ? this.options.strokeWidth\n        : 2;\n\n      this.visibleAndFetchedTiles().forEach((tile) => {\n        this.polys = [];\n\n        // call drawTile with storePolyStr = true so that\n        // we record path strings to use in the SVG\n        this.drawTile(tile, true);\n\n        for (const { polyStr, opacity } of this.polys) {\n          const g = document.createElement('path');\n          g.setAttribute('fill', 'transparent');\n          g.setAttribute('stroke', strokeColor);\n          g.setAttribute('stroke-width', strokeWidth);\n          g.setAttribute('opacity', opacity);\n\n          g.setAttribute('d', polyStr);\n          output.appendChild(g);\n        }\n      });\n      return [base, track];\n    }\n  }\n\n  return new SnpTrack(...args);\n};\n\nconst icon =\n  '<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\" fill-rule=\"evenodd\" clip-rule=\"evenodd\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"1.5\"><path d=\"M4 2.1L.5 3.5v12l5-2 5 2 5-2v-12l-5 2-3.17-1.268\" fill=\"none\" stroke=\"currentColor\"/><path d=\"M10.5 3.5v12\" fill=\"none\" stroke=\"currentColor\" stroke-opacity=\".33\" stroke-dasharray=\"1,2,0,0\"/><path d=\"M5.5 13.5V6\" fill=\"none\" stroke=\"currentColor\" stroke-opacity=\".33\" stroke-width=\".9969299999999999\" stroke-dasharray=\"1.71,3.43,0,0\"/><path d=\"M9.03 5l.053.003.054.006.054.008.054.012.052.015.052.017.05.02.05.024 4 2 .048.026.048.03.046.03.044.034.042.037.04.04.037.04.036.042.032.045.03.047.028.048.025.05.022.05.02.053.016.053.014.055.01.055.007.055.005.055v.056l-.002.056-.005.055-.008.055-.01.055-.015.054-.017.054-.02.052-.023.05-.026.05-.028.048-.03.046-.035.044-.035.043-.038.04-4 4-.04.037-.04.036-.044.032-.045.03-.046.03-.048.024-.05.023-.05.02-.052.016-.052.015-.053.012-.054.01-.054.005-.055.003H8.97l-.053-.003-.054-.006-.054-.008-.054-.012-.052-.015-.052-.017-.05-.02-.05-.024-4-2-.048-.026-.048-.03-.046-.03-.044-.034-.042-.037-.04-.04-.037-.04-.036-.042-.032-.045-.03-.047-.028-.048-.025-.05-.022-.05-.02-.053-.016-.053-.014-.055-.01-.055-.007-.055L4 10.05v-.056l.002-.056.005-.055.008-.055.01-.055.015-.054.017-.054.02-.052.023-.05.026-.05.028-.048.03-.046.035-.044.035-.043.038-.04 4-4 .04-.037.04-.036.044-.032.045-.03.046-.03.048-.024.05-.023.05-.02.052-.016.052-.015.053-.012.054-.01.054-.005L8.976 5h.054zM5 10l4 2 4-4-4-2-4 4z\" fill=\"currentColor\"/><path d=\"M7.124 0C7.884 0 8.5.616 8.5 1.376v3.748c0 .76-.616 1.376-1.376 1.376H3.876c-.76 0-1.376-.616-1.376-1.376V1.376C2.5.616 3.116 0 3.876 0h3.248zm.56 5.295L5.965 1H5.05L3.375 5.295h.92l.354-.976h1.716l.375.975h.945zm-1.596-1.7l-.592-1.593-.58 1.594h1.172z\" fill=\"currentColor\"/></svg>';\n\ncreateSnpTrack.config = {\n  type: 'point-annotation',\n  datatype: ['arcs', 'bedlike'],\n  orientation: '1d',\n  name: 'Arcs1D',\n  thumbnail: new DOMParser().parseFromString(icon, 'text/xml').documentElement,\n  availableOptions: [\n    'arcStyle',\n    'flip1D',\n    'labelPosition',\n    'labelColor',\n    'labelTextOpacity',\n    'labelBackgroundOpacity',\n    'strokeColor',\n    'strokeWidth',\n    'trackBorderWidth',\n    'trackBorderColor',\n  ],\n  defaultOptions: {\n    arcStyle: 'ellipse',\n    flip1D: 'no',\n    labelColor: 'black',\n    labelPosition: 'hidden',\n    strokeColor: 'black',\n    strokeWidth: 1,\n    trackBorderWidth: 0,\n    trackBorderColor: 'black',\n  },\n  optionsInfo: {\n    arcStyle: {\n      name: 'Arc Style',\n      inlineOptions: {\n        circle: {\n          name: 'Circle',\n          value: 'circle',\n        },\n        ellipse: {\n          name: 'Ellipse',\n          value: 'ellipse',\n        },\n      },\n    },\n  },\n};\n\nexport default createSnpTrack;\n","import { createColorTexture } from './utils';\n\nconst DEFAULT_TILE_SIZE = 1024;\n\nconst DEFAULT_BIN_SIZE = 8; // 8 \"tile-pixels\" make up one bin by default\n\nconst VS = `\nprecision mediump float;\nattribute vec2 aPosition;\nattribute float aColorIdx;\nattribute float aFocused;\n\nuniform mat3 projectionMatrix;\nuniform mat3 translationMatrix;\nuniform sampler2D uColorMapTex;\nuniform float uColorMapTexRes;\nuniform sampler2D uColorMapFocusTex;\nuniform float uColorMapFocusTexRes;\n\nvarying vec4 vColor;\nvarying vec4 vColorFocused;\nvarying float vFocused;\n\nvoid main(void)\n{\n  // Half a texel (i.e., pixel in texture coordinates)\n  float eps = 0.5 / uColorMapTexRes;\n  float colorRowIndex = floor((aColorIdx + eps) / uColorMapTexRes);\n  vec2 colorTexIndex = vec2(\n    (aColorIdx / uColorMapTexRes) - colorRowIndex + eps,\n    (colorRowIndex / uColorMapTexRes) + eps\n  );\n  vColor = texture2D(uColorMapTex, colorTexIndex);\n\n  float eps2 = 0.5 / uColorMapFocusTexRes;\n  float colorRowIndex2 = floor((aColorIdx + eps2) / uColorMapFocusTexRes);\n  vec2 colorTexIndex2 = vec2(\n    (aColorIdx / uColorMapFocusTexRes) - colorRowIndex2 + eps2,\n    (colorRowIndex2 / uColorMapFocusTexRes) + eps2\n  );\n  vColorFocused = texture2D(uColorMapFocusTex, colorTexIndex2);\n\n  vFocused = aFocused;\n\n  gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aPosition, 1.0)).xy, 0.0, 1.0);\n}\n`;\n\nconst FS = `\n  precision mediump float;\n\n  varying vec4 vColor;\n  varying vec4 vColorFocused;\n  varying float vFocused;\n\n  void main() {\n    float isNotFocused = 1.0 - vFocused;\n\n    float r = vColor.r * isNotFocused + vColorFocused.r * vFocused;\n    float g = vColor.g * isNotFocused + vColorFocused.g * vFocused;\n    float b = vColor.b * isNotFocused + vColorFocused.b * vFocused;\n\n    gl_FragColor = vec4(r, g, b, 1.0);\n  }\n`;\n\nconst DEFAULT_COLOR_MAP = [\n  // '#c17da5',\n  '#c76526',\n  '#dca237',\n  '#eee462',\n  '#469b76',\n  '#3170ad',\n  '#6fb2e4',\n  '#000000',\n  '#999999',\n];\n\nconst DEFAULT_COLOR_MAP_DARK = [\n  // '#a1688a',\n  '#a65420',\n  '#b7872e',\n  '#9f9841',\n  '#3a8162',\n  '#295d90',\n  '#4a7798',\n  '#000000',\n  '#666666',\n];\n\nconst DEFAULT_COLOR_MAP_LIGHT = [\n  // '#f5e9f0',\n  '#f6e5db',\n  '#f9f0de',\n  '#fcfbe5',\n  '#e0eee8',\n  '#dde7f1',\n  '#e7f2fb',\n  '#d5d5d5',\n  '#ffffff',\n];\n\nconst getIs2d = (tile) =>\n  tile.tileData.length && tile.tileData[0].yStart !== undefined;\n\nconst get1dStart = (item) => item.xStart;\n\nconst get2dStart = (item) => item.xStart + (item.xEnd - item.xStart) / 2;\n\nconst get1dEnd = (item) => item.xEnd;\n\nconst get2dEnd = (item) => item.yStart + (item.yEnd - item.yStart) / 2;\n\nconst getHistMax = (fetchedTiles) =>\n  fetchedTiles.reduce(\n    (histMax, tile) => Math.max(histMax, tile.histogramMax),\n    0\n  );\n\nconst scaleScalableGraphics = (graphics, xScale, drawnAtScale) => {\n  const tileK =\n    (drawnAtScale.domain()[1] - drawnAtScale.domain()[0]) /\n    (xScale.domain()[1] - xScale.domain()[0]);\n  const newRange = xScale.domain().map(drawnAtScale);\n\n  const posOffset = newRange[0];\n  graphics.scale.x = tileK;\n  graphics.position.x = -posOffset * tileK;\n};\n\n// prettier-ignore\nconst segmentToPosition = (segment) => [\n  segment.xStart, segment.yStart,\n  segment.xEnd, segment.yStart,\n  segment.xEnd, segment.yEnd,\n  segment.xStart, segment.yStart,\n  segment.xStart, segment.yEnd,\n  segment.xEnd, segment.yEnd,\n];\n\nconst segmentToColorIdx = (segment) => [\n  segment.colorIdx,\n  segment.colorIdx,\n  segment.colorIdx,\n  segment.colorIdx,\n  segment.colorIdx,\n  segment.colorIdx,\n];\n\nconst segmentToFocused = (segment) => [\n  segment.focused,\n  segment.focused,\n  segment.focused,\n  segment.focused,\n  segment.focused,\n  segment.focused,\n];\n\nconst createStackedBarTrack = function createStackedBarTrack(HGC, ...args) {\n  if (!new.target) {\n    throw new Error(\n      'Uncaught TypeError: Class constructor cannot be invoked without \"new\"'\n    );\n  }\n\n  const { PIXI } = HGC.libraries;\n  const { scaleLinear, scaleLog } = HGC.libraries.d3Scale;\n  const { tileProxy } = HGC.services;\n  const { colorToHex } = HGC.utils;\n\n  const opacityLogScale = scaleLog()\n    .domain([1, 10])\n    .range([0.1, 1])\n    .clamp(true);\n\n  const toRgbNorm = (color) =>\n    HGC.utils\n      .colorToRgba(color)\n      .slice(0, 3)\n      .map((x) => Math.min(1, Math.max(0, x / 255)));\n\n  class StackedBarTrack extends HGC.tracks.HorizontalLine1DPixiTrack {\n    constructor(context, options) {\n      super(context, options);\n\n      this.updateOptions();\n    }\n\n    initTile(tile) {\n      const is2d = getIs2d(tile);\n      const getStart = is2d ? get2dStart : get1dStart;\n      const getEnd = is2d ? get2dEnd : get1dEnd;\n\n      tile.tileData.forEach((item) => {\n        item.start = getStart(item);\n        item.end = getEnd(item);\n        item.isLeftToRight = item.start < item.end;\n      });\n\n      tile.histogramMax = 0;\n\n      this.updateTileFocusMap(tile);\n    }\n\n    updateTileHistogram(tile) {\n      const { tileX, tileWidth } = this.getTilePosAndDimensions(\n        tile.tileData.zoomLevel,\n        tile.tileData.tilePos\n      );\n      const binSize = tileWidth / this.numBins;\n\n      tile.binXPos = new Float32Array(this.numBins + 1);\n      tile.histogram1d = new Float32Array(this.numBins);\n      tile.histogram2d = new Float32Array(this.numBins * this.numGroups);\n      tile.histogram2dNumPred = new Uint8Array(this.numBins * this.numGroups);\n\n      let max = 0;\n\n      // Determine bin boundaries\n      for (let i = 0; i <= this.numBins; i++) {\n        tile.binXPos[i] = tileX + binSize * i;\n      }\n\n      const categoryBinHash = new Map();\n\n      tile.tileData.forEach((item) => {\n        const group = this.categoryToGroup.get(\n          item.fields[this.categoryField].toLowerCase()\n        );\n        const maxBinId = this.numBins - 1;\n        const binStart = Math.max(\n          0,\n          Math.min(maxBinId, Math.round((item.xStart - tileX) / binSize))\n        );\n        const binEnd = Math.max(\n          0,\n          Math.min(maxBinId, Math.round((item.xEnd - tileX) / binSize))\n        );\n        const numBins = Math.abs(binEnd - binStart);\n        const score = this.getImportance(item);\n        const category = this.getCategory(item);\n        const base = group * this.numBins;\n\n        for (let i = 0; i <= numBins; i++) {\n          const bin = binStart + i;\n          const histIdx = base + bin;\n\n          const binHash = categoryBinHash.get(category) || {};\n\n          // Make sure we count multiple enhancer predictions of the same biosample and bin only once (i.e., summing up)\n          if (!binHash[bin]) {\n            binHash[bin] = binHash[bin] || score > 0;\n            tile.histogram2dNumPred[histIdx] += binHash[bin];\n            categoryBinHash.set(category, binHash);\n          }\n\n          tile.histogram2d[histIdx] += score;\n          tile.histogram1d[bin] += score;\n\n          max = Math.max(max, tile.histogram1d[bin]);\n        }\n      });\n\n      tile.histogramMax = max;\n    }\n\n    updateHistograms() {\n      Object.values(this.fetchedTiles).forEach(\n        this.updateTileHistogram.bind(this)\n      );\n    }\n\n    updateTileFocusMap(tile) {\n      tile.focusMap = new Float32Array(this.numBins);\n\n      const { tileX, tileWidth } = this.getTilePosAndDimensions(\n        tile.tileData.zoomLevel,\n        tile.tileData.tilePos\n      );\n\n      if (\n        tileX <= this.focusRegion[1] &&\n        tileX + tileWidth >= this.focusRegion[0]\n      ) {\n        const binSize = tileWidth / this.numBins;\n\n        const binStart = Math.max(\n          0,\n          Math.round((this.focusRegion[0] - tileX) / binSize)\n        );\n        const binEnd = Math.min(\n          this.numBins - 1,\n          Math.round((this.focusRegion[1] - tileX) / binSize)\n        );\n        const numBins = Math.abs(binEnd - binStart);\n\n        for (let i = 0; i <= numBins; i++) {\n          tile.focusMap[i] = 1;\n        }\n      }\n    }\n\n    updateFocusMap() {\n      Object.values(this.fetchedTiles).forEach(\n        this.updateTileFocusMap.bind(this)\n      );\n    }\n\n    updateStratificationOption() {\n      if (!this.options.stratification) {\n        this.categoryField = undefined;\n        this.categoryToGroup = undefined;\n        this.groupToColor = undefined;\n        this.numGroups = 0;\n        this.numCategories = 0;\n        this.groupLabels = [];\n        return;\n      }\n\n      this.categoryField = this.options.stratification.categoryField;\n      this.getCategory = (item) =>\n        item.fields[this.categoryField].toLowerCase();\n      this.categoryToGroup = new Map();\n      this.categoryToY = new Map();\n      this.groupToColor = new Map();\n      this.numGroups = this.options.stratification.groups.length;\n      this.groupSizes = this.options.stratification.groups.map(\n        (group) => group.categories.length\n      );\n      this.numCategories = this.groupSizes.reduce(\n        (numCategories, groupSize) => numCategories + groupSize,\n        0\n      );\n      this.groupLabels = this.options.stratification.groups.map(\n        (group, i) => group.label || `Group ${i}`\n      );\n\n      let k = 0;\n      this.options.stratification.groups.forEach((group, i) => {\n        this.groupToColor.set(i, [\n          colorToHex(\n            group.color || DEFAULT_COLOR_MAP[i % DEFAULT_COLOR_MAP.length]\n          ),\n          colorToHex(\n            group.backgroundColor ||\n              DEFAULT_COLOR_MAP_LIGHT[i % DEFAULT_COLOR_MAP_LIGHT.length]\n          ),\n        ]);\n        group.categories.forEach((category, j) => {\n          this.categoryToGroup.set(category.toLowerCase(), i);\n          this.categoryToY.set(category.toLowerCase(), k + j);\n        });\n        k += group.categories.length;\n      });\n\n      this.groupLabelsPixiText = this.groupLabels.map(\n        (label, i) =>\n          new PIXI.Text(label, {\n            fontSize: this.labelSize,\n            // fill: this.labelColor,\n            align: this.axisAlign === 'right' ? 'right' : 'left',\n            fill: colorToHex(\n              this.options.stratification.groups[i].axisLabelColor ||\n                DEFAULT_COLOR_MAP_DARK[i % DEFAULT_COLOR_MAP_DARK.length]\n            ),\n          })\n      );\n    }\n\n    updateOptions() {\n      this.axisAlign = this.options.axisAlign || 'left';\n\n      this.labelColor = colorToHex(this.options.labelColor || 'black');\n\n      this.labelSize = this.options.labelSize || 12;\n\n      this.colorMap = this.options.colorMap || [...DEFAULT_COLOR_MAP];\n\n      this.colorMapRgbNorm = this.colorMap.map(toRgbNorm);\n\n      [this.colorMapTex, this.colorMapTexRes] = createColorTexture(\n        PIXI,\n        this.colorMapRgbNorm\n      );\n\n      this.colorMapFocus = this.options.colorMapFocus || [\n        ...DEFAULT_COLOR_MAP_DARK,\n      ];\n\n      this.colorMapFocusRgbNorm = this.colorMapFocus.map(toRgbNorm);\n\n      [this.colorMapFocusTex, this.colorMapFocusTexRes] = createColorTexture(\n        PIXI,\n        this.colorMapFocusRgbNorm\n      );\n\n      this.markColor = colorToHex(this.options.markColor || 'black');\n\n      this.markColorRgbNorm = this.options.markColor\n        ? toRgbNorm(this.options.markColor)\n        : [0, 0, 0];\n\n      this.markOpacity = Number.isNaN(+this.options.markOpacity)\n        ? 1\n        : Math.min(1, Math.max(0, +this.options.markOpacity));\n\n      this.markSize = this.options.markSize || 2;\n\n      this.markColorFocus = colorToHex(this.options.markColorFocus || 'red');\n\n      this.markColorFocusRgbNorm = this.options.markColorFocus\n        ? toRgbNorm(this.options.markColorFocus)\n        : [1, 0, 0];\n\n      this.markOpacityFocus = Number.isNaN(+this.options.markOpacityFocus)\n        ? this.markOpacity\n        : Math.min(1, Math.max(0, +this.options.markOpacityFocus));\n\n      this.markSizeFocus = this.options.markSizeFocus || this.markSize;\n\n      this.binSize = this.options.binSize || DEFAULT_BIN_SIZE;\n\n      this.numBins = this.tilesetInfo\n        ? Math.round(this.tilesetInfo.tile_size / this.binSize)\n        : DEFAULT_TILE_SIZE / this.binSize;\n\n      this.getImportance = this.options.importanceField\n        ? (item) => +item.fields[this.options.importanceField]\n        : () => 1;\n\n      const importanceDomain = this.options.importanceDomain || [1000, 1];\n\n      const opacityLinearScale = scaleLinear()\n        .domain(importanceDomain)\n        .range([1, 10]);\n\n      this.opacityScale = (x) => opacityLogScale(opacityLinearScale(x));\n\n      this.focusRegion = this.options.focusRegion\n        ? this.options.focusRegion\n        : [Infinity, Infinity];\n\n      this.focusGene = this.options.focusGene\n        ? this.options.focusGene.toLowerCase()\n        : undefined;\n\n      this.getGene = this.options.geneField\n        ? (item) => item.fields[this.options.geneField].toLowerCase()\n        : undefined;\n\n      this.minImportance = this.options.minImportance || 0;\n\n      this.updateStratificationOption();\n\n      this.updateFocusMap();\n      this.updateHistograms();\n      this.updateScales();\n    }\n\n    refreshTiles(...brgs) {\n      super.refreshTiles(...brgs);\n      if (this.tilesetInfo) {\n        const oldNumBins = this.numBins;\n        this.numBins = Math.round(this.tilesetInfo.tile_size / this.binSize);\n        if (oldNumBins !== this.numBins) {\n          this.updateHistograms();\n          this.updateScales();\n        }\n      }\n    }\n\n    rerender(newOptions) {\n      this.options = newOptions;\n      this.updateOptions();\n      this.updateExistingGraphics();\n    }\n\n    updateScales() {\n      const fetchedTiles = Object.values(this.fetchedTiles);\n\n      if (!fetchedTiles.length) return;\n\n      const [, height] = this.dimensions;\n\n      this.histMax = getHistMax(fetchedTiles);\n\n      this.heightScale = scaleLinear()\n        .domain([0, this.histMax])\n        .range([height, 0]);\n\n      this.valueScale = this.heightScale;\n\n      this.valueScaleInverted = scaleLinear()\n        .domain([0, this.histMax])\n        .range([0, height]);\n    }\n\n    itemToPoint(item) {\n      return {\n        xStart: this._xScale(item.start),\n        xEnd: this._xScale(item.start),\n        yStart: this.heightScale(\n          this.categoryToY.get(item.fields[this.categoryField].toLowerCase())\n        ),\n        yEnd: () => {},\n        opacity: this.opacityScale(this.getImportance(item)),\n        focused:\n          item.xStart <= this.focusRegion[1] &&\n          item.xEnd >= this.focusRegion[0],\n      };\n    }\n\n    histToSegments(tile) {\n      const segments = [];\n\n      for (let i = 0; i < this.numBins; i++) {\n        let cumHeight = 0;\n        if (tile.histogram1d[i] > 0) {\n          for (let j = 0; j < this.numGroups; j++) {\n            const height = tile.histogram2d[j * this.numBins + i];\n\n            if (height) {\n              segments.push({\n                xStart: this._xScale(tile.binXPos[i]),\n                xEnd: this._xScale(tile.binXPos[i + 1]),\n                yStart: this.heightScale(cumHeight),\n                yEnd: this.heightScale(cumHeight + height),\n                colorIdx: j % this.colorMap.length,\n                focused: tile.focusMap[i],\n              });\n\n              cumHeight += height;\n            }\n          }\n        }\n      }\n\n      return segments;\n    }\n\n    renderStackedBars() {\n      this.drawnAtScale = scaleLinear()\n        .domain([...this.xScale().domain()])\n        .range([...this.xScale().range()]);\n\n      const segments = Object.values(this.fetchedTiles).flatMap(\n        this.histToSegments.bind(this)\n      );\n\n      const positions = new Float32Array(segments.flatMap(segmentToPosition));\n      const colorIdxs = new Float32Array(segments.flatMap(segmentToColorIdx));\n      const focused = new Float32Array(segments.flatMap(segmentToFocused));\n\n      const uniforms = new PIXI.UniformGroup({\n        uColorMapTex: this.colorMapTex,\n        uColorMapTexRes: this.colorMapTexRes,\n        uColorMapFocus: this.colorMapFocusTex,\n        uColorMapFocusTexRes: this.colorMapFocusTexRes,\n      });\n\n      const shader = PIXI.Shader.from(VS, FS, uniforms);\n\n      const geometry = new PIXI.Geometry();\n      geometry.addAttribute('aPosition', positions, 2);\n      geometry.addAttribute('aColorIdx', colorIdxs, 1);\n      geometry.addAttribute('aFocused', focused, 1);\n\n      const mesh = new PIXI.Mesh(\n        geometry,\n        shader,\n        new PIXI.State(),\n        PIXI.DRAW_MODES.TRIANGLES\n      );\n\n      const newGraphics = new PIXI.Graphics();\n      newGraphics.addChild(mesh);\n\n      // eslint-disable-next-line\n      this.pMain.x = this.position[0];\n\n      if (this.indicatorPointGraphics) {\n        this.pMain.removeChild(this.indicatorPointGraphics);\n      }\n\n      this.pMain.addChild(newGraphics);\n      this.indicatorPointGraphics = newGraphics;\n\n      scaleScalableGraphics(\n        this.indicatorPointGraphics,\n        this._xScale,\n        this.drawnAtScale\n      );\n\n      this.draw();\n      this.animate();\n    }\n\n    renderTrack() {\n      this.drawAxis(this.valueScaleInverted);\n      this.renderStackedBars();\n    }\n\n    hasFetchedTiles() {\n      return Object.values(this.fetchedTiles).length;\n    }\n\n    // Called whenever a new tile comes in\n    updateExistingGraphics() {\n      if (!this.hasFetchedTiles()) return;\n      this.updateHistograms();\n      this.updateScales();\n      this.renderTrack();\n    }\n\n    /**\n     * Shows value and type for each bar\n     *\n     * @param trackX relative x-coordinate of mouse\n     * @param trackY relative y-coordinate of mouse\n     * @returns string with embedded values and svg square for color\n     */\n    getMouseOverHtml(trackX, trackY) {\n      if (!this.tilesetInfo) return '';\n\n      const zoomLevel = this.calculateZoomLevel();\n      const tileWidth = tileProxy.calculateTileWidth(\n        this.tilesetInfo,\n        zoomLevel,\n        this.tilesetInfo.tile_size\n      );\n\n      // the position of the tile containing the query position\n      const relTilePos = this._xScale.invert(trackX) / tileWidth;\n      const tilePos = Math.floor(relTilePos);\n      const tileId = this.tileToLocalId([zoomLevel, tilePos]);\n      const fetchedTile = this.fetchedTiles[tileId];\n\n      if (!fetchedTile) return '';\n\n      const relPos = relTilePos - tilePos;\n      const binXPos = Math.floor(this.numBins * relPos);\n\n      const rowCumSum = [];\n      const rowNumPred = [];\n      let totalPred = 0;\n      let sum = 0;\n      for (let i = 0; i < this.numGroups; i++) {\n        sum += fetchedTile.histogram2d[i * this.numBins + binXPos];\n        const numPred =\n          fetchedTile.histogram2dNumPred[i * this.numBins + binXPos];\n        rowNumPred.push(numPred);\n        totalPred += numPred;\n        rowCumSum.push(sum);\n      }\n\n      const relYPos = this.heightScale.invert(trackY);\n      const group = rowCumSum.findIndex((cumHeight) => cumHeight > relYPos);\n\n      if (group >= 0) {\n        const [color, bg] = this.groupToColor.get(group);\n        const colorHex = `#${color.toString(16)}`;\n        const bgHex = `#${bg.toString(16)}`;\n        const value =\n          fetchedTile.histogram2dNumPred[group * this.numBins + binXPos];\n        return `<div style=\"margin: 0 -0.25rem; padding: 0 0.25rem; background: ${bgHex}\"><strong style=\"color: ${colorHex};\">${this.groupLabels[group]}:</strong> ${value} of ${totalPred} samples</div>`;\n      }\n\n      return '';\n    }\n\n    setPosition(newPosition) {\n      super.setPosition(newPosition);\n\n      [this.pMain.position.x, this.pMain.position.y] = this.position;\n    }\n\n    zoomed(newXScale, newYScale) {\n      this.xScale(newXScale);\n      this.yScale(newYScale);\n\n      if (this.indicatorPointGraphics) {\n        scaleScalableGraphics(\n          this.indicatorPointGraphics,\n          newXScale,\n          this.drawnAtScale\n        );\n      }\n\n      this.refreshTiles();\n      this.draw();\n    }\n\n    /**\n     * Export an SVG representation of this track\n     *\n     * @returns {Array} The two returned DOM nodes are both SVG\n     * elements [base,track]. Base is a parent which contains track as a\n     * child. Track is clipped with a clipping rectangle contained in base.\n     *\n     */\n    exportSVG() {\n      let track = null;\n      let base = null;\n\n      [base, track] = super.superSVG();\n\n      base.setAttribute('class', 'exported-arcs-track');\n      const output = document.createElement('g');\n\n      track.appendChild(output);\n      output.setAttribute(\n        'transform',\n        `translate(${this.position[0]},${this.position[1]})`\n      );\n\n      const strokeColor = this.options.strokeColor\n        ? this.options.strokeColor\n        : 'blue';\n      const strokeWidth = this.options.strokeWidth\n        ? this.options.strokeWidth\n        : 2;\n\n      this.visibleAndFetchedTiles().forEach((tile) => {\n        this.polys = [];\n\n        // call drawTile with storePolyStr = true so that\n        // we record path strings to use in the SVG\n        this.drawTile(tile, true);\n\n        for (const { polyStr, opacity } of this.polys) {\n          const g = document.createElement('path');\n          g.setAttribute('fill', 'transparent');\n          g.setAttribute('stroke', strokeColor);\n          g.setAttribute('stroke-width', strokeWidth);\n          g.setAttribute('opacity', opacity);\n\n          g.setAttribute('d', polyStr);\n          output.appendChild(g);\n        }\n      });\n      return [base, track];\n    }\n  }\n\n  return new StackedBarTrack(...args);\n};\n\nconst icon =\n  '<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\" fill-rule=\"evenodd\" clip-rule=\"evenodd\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"1.5\"><path d=\"M4 2.1L.5 3.5v12l5-2 5 2 5-2v-12l-5 2-3.17-1.268\" fill=\"none\" stroke=\"currentColor\"/><path d=\"M10.5 3.5v12\" fill=\"none\" stroke=\"currentColor\" stroke-opacity=\".33\" stroke-dasharray=\"1,2,0,0\"/><path d=\"M5.5 13.5V6\" fill=\"none\" stroke=\"currentColor\" stroke-opacity=\".33\" stroke-width=\".9969299999999999\" stroke-dasharray=\"1.71,3.43,0,0\"/><path d=\"M9.03 5l.053.003.054.006.054.008.054.012.052.015.052.017.05.02.05.024 4 2 .048.026.048.03.046.03.044.034.042.037.04.04.037.04.036.042.032.045.03.047.028.048.025.05.022.05.02.053.016.053.014.055.01.055.007.055.005.055v.056l-.002.056-.005.055-.008.055-.01.055-.015.054-.017.054-.02.052-.023.05-.026.05-.028.048-.03.046-.035.044-.035.043-.038.04-4 4-.04.037-.04.036-.044.032-.045.03-.046.03-.048.024-.05.023-.05.02-.052.016-.052.015-.053.012-.054.01-.054.005-.055.003H8.97l-.053-.003-.054-.006-.054-.008-.054-.012-.052-.015-.052-.017-.05-.02-.05-.024-4-2-.048-.026-.048-.03-.046-.03-.044-.034-.042-.037-.04-.04-.037-.04-.036-.042-.032-.045-.03-.047-.028-.048-.025-.05-.022-.05-.02-.053-.016-.053-.014-.055-.01-.055-.007-.055L4 10.05v-.056l.002-.056.005-.055.008-.055.01-.055.015-.054.017-.054.02-.052.023-.05.026-.05.028-.048.03-.046.035-.044.035-.043.038-.04 4-4 .04-.037.04-.036.044-.032.045-.03.046-.03.048-.024.05-.023.05-.02.052-.016.052-.015.053-.012.054-.01.054-.005L8.976 5h.054zM5 10l4 2 4-4-4-2-4 4z\" fill=\"currentColor\"/><path d=\"M7.124 0C7.884 0 8.5.616 8.5 1.376v3.748c0 .76-.616 1.376-1.376 1.376H3.876c-.76 0-1.376-.616-1.376-1.376V1.376C2.5.616 3.116 0 3.876 0h3.248zm.56 5.295L5.965 1H5.05L3.375 5.295h.92l.354-.976h1.716l.375.975h.945zm-1.596-1.7l-.592-1.593-.58 1.594h1.172z\" fill=\"currentColor\"/></svg>';\n\ncreateStackedBarTrack.config = {\n  type: 'stacked-bar',\n  datatype: ['bedlike'],\n  orientation: '1d',\n  name: 'Arcs1D',\n  thumbnail: new DOMParser().parseFromString(icon, 'text/xml').documentElement,\n  availableOptions: [\n    'arcStyle',\n    'flip1D',\n    'labelPosition',\n    'labelColor',\n    'labelTextOpacity',\n    'labelBackgroundOpacity',\n    'strokeColor',\n    'strokeWidth',\n    'trackBorderWidth',\n    'trackBorderColor',\n  ],\n  defaultOptions: {\n    arcStyle: 'ellipse',\n    flip1D: 'no',\n    labelColor: 'black',\n    labelPosition: 'hidden',\n    strokeColor: 'black',\n    strokeWidth: 1,\n    trackBorderWidth: 0,\n    trackBorderColor: 'black',\n  },\n  optionsInfo: {\n    arcStyle: {\n      name: 'Arc Style',\n      inlineOptions: {\n        circle: {\n          name: 'Circle',\n          value: 'circle',\n        },\n        ellipse: {\n          name: 'Ellipse',\n          value: 'ellipse',\n        },\n      },\n    },\n  },\n};\n\nexport default createStackedBarTrack;\n","import createPubSub from 'pub-sub-es';\n\nfunction createTssTrack(HGC, ...args) {\n  if (!new.target) {\n    throw new Error(\n      'Uncaught TypeError: Class constructor cannot be invoked without \"new\"'\n    );\n  }\n\n  class TssTrack extends HGC.tracks.BedLikeTrack {\n    constructor(context, options) {\n      super(context, options);\n\n      const { publish, subscribe, unsubscribe } = createPubSub();\n      this.publish = publish;\n      this.subscribe = subscribe;\n      this.unsubscribe = unsubscribe;\n    }\n\n    drawPoly(tile, xStartPos, xEndPos, rectY, doubleRadius = false) {\n      // prettier-ignore\n      const drawnPoly = [\n        // left top\n        xStartPos, rectY,\n        // right top\n        xEndPos, rectY,\n        // right bottom\n        xEndPos, this.dimensions[1],\n         // left bottom\n        xStartPos, this.dimensions[1]\n      ];\n\n      const anchorRadius = 1;\n      const radius = 2;\n\n      tile.rectGraphics.drawCircle(\n        xStartPos,\n        this.finalDotYPos(rectY, anchorRadius),\n        radius\n      );\n\n      return drawnPoly;\n    }\n\n    renderRows(tile, rows, maxRows, startY, endY, fill) {\n      const zoomLevel = +tile.tileId.split('.')[0];\n\n      this.initialize();\n\n      const focusRegion = this.options.focusRegion || [Infinity, Infinity];\n\n      const circleDraws = [];\n      const circleFocusDraws = [];\n\n      for (let j = 0; j < rows.length; j++) {\n        for (let i = 0; i < rows[j].length; i++) {\n          const td = rows[j][i].value;\n          const geneInfo = td.fields;\n\n          // the returned positions are chromosome-based and they need to\n          // be converted to genome-based\n          const chrOffset = +td.chrOffset;\n          const txStart = +geneInfo[1] + chrOffset;\n          const txEnd = +geneInfo[2] + chrOffset;\n\n          const xStartPos = this._xScale(txStart);\n          const xEndPos = this._xScale(txEnd);\n\n          // don't draw anything that has already been drawn\n          if (\n            !(\n              zoomLevel in this.drawnRects &&\n              td.uid in this.drawnRects[zoomLevel]\n            )\n          ) {\n            if (!this.drawnRects[zoomLevel]) this.drawnRects[zoomLevel] = {};\n\n            const circleDraw = {\n              xStartScreen: xStartPos,\n              xEndScreen: xEndPos,\n              xStartAbs: txStart,\n              xEndAbs: txEnd,\n              data: td,\n            };\n\n            if (txStart <= focusRegion[1] && txEnd >= focusRegion[0]) {\n              circleFocusDraws.push(circleDraw);\n            } else {\n              circleDraws.push(circleDraw);\n            }\n          }\n        }\n\n        circleDraws.forEach((circleDraw) => {\n          this.publish('annotationDrawn', circleDraw);\n        });\n      }\n    }\n\n    rerender() {\n      // Monkey patch because TiledPixiTrack doesn't always fire correctly\n      this.draw();\n      this.pubSub.publish('TiledPixiTrack.tilesDrawnEnd', { uuid: this.uuid });\n    }\n  }\n\n  return new TssTrack(...args);\n}\n\ncreateTssTrack.config = {\n  type: 'tss',\n  datatype: ['bedlike'],\n};\n\nexport default createTssTrack;\n","import register from 'higlass-register';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  StackedBarTrack,\n  ScaledStackedBarTrack,\n  BasicMultipleLineChart,\n  BasicMultipleBarChart,\n} from 'higlass-multivec';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport createAnnotationOverlayMetaTrack from './annotation-overlay-meta-track';\nimport createStratifiedBedTrack from './stratified-bed-track';\nimport createScalableArcs1dTrack from './scalable-arcs-track';\nimport createSnpTrack from './snp-track';\nimport createStackedBarTrack from './stacked-bar-track';\nimport createTssTrack from './tss-track';\n\nimport './index.css';\n\nregister({\n  name: 'ScalableArcs1dTrack',\n  track: createScalableArcs1dTrack,\n  config: createScalableArcs1dTrack.config,\n});\n\nregister({\n  name: 'StratifiedBedTrack',\n  track: createStratifiedBedTrack,\n  config: createStratifiedBedTrack.config,\n});\n\nregister({\n  name: 'SnpTrack',\n  track: createSnpTrack,\n  config: createSnpTrack.config,\n});\n\nregister({\n  name: 'StackedBarTrack',\n  track: createStackedBarTrack,\n  config: createStackedBarTrack.config,\n});\n\nregister({\n  name: 'TssTrack',\n  track: createTssTrack,\n  config: createTssTrack.config,\n});\n\nregister({\n  name: 'AnnotationsToInsetsMetaTrack',\n  track: createAnnotationOverlayMetaTrack,\n  isMetaTrack: true,\n  config: createAnnotationOverlayMetaTrack.config,\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["AppInitializing.js","AppError.js","SearchField.js","use-debounce.js","utils.js","use-query-string.js","constants.js","Viewer.js","with-either.js","App.js","serviceWorker.js","annotation-overlay-meta-track.js","ridge-plot-track.js","stratified-bed-track.js","scalable-arcs-track.js","snp-track.js","stacked-bar-track.js","tss-track.js","index.js"],"names":["useStyles","makeStyles","theme","backdrop","zIndex","drawer","color","backgroundColor","AppInitializing","classes","className","Backdrop","open","CircularProgress","SearchField","props","useState","setOpen","options","setOptions","inputValue","searchQuery","setSearchQuery","debouncedSearchQuery","value","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","loading","length","active","a","fetch","searchUrl","response","json","geneList","Autocomplete","onChange","event","newValue","onInputChange","newInputValue","fullWidth","style","width","onOpen","onClose","getOptionSelected","option","_value","geneName","getOptionLabel","renderInput","params","TextField","id","label","variant","size","InputProps","endAdornment","Fragment","defaultProps","identity","contains","b","createColorTexture","PIXI","colors","colorTexRes","Math","max","ceil","sqrt","rgba","Float32Array","forEach","i","Texture","fromBuffer","dashedXLineTo","graphics","xStart","xEnd","y","dashSize","diff","direction","sign","abs","stepSize","numSteps","moveTo","lineTo","getQueryStringValue","key","decoder","queryString","parse","window","location","search","setQueryStringValue","encoder","values","newQsValue","stringify","strict","url","origin","pathname","history","pushState","path","toAbsPosition","position","chromInfo","absPosition","indexOf","split","chrom","pos","chrPositions","useQueryString","initialValue","undefined","setValue","onSetValue","useCallback","GENE_SEARCH_URL","VARIANT_SEARCH_URL","DEFAULT_STRATIFICATION","categoryField","axisShowGroupSeparator","axisNoGroupColor","groups","categories","DEFAULT_VIEW_CONFIG_ENHANCER","editable","trackSourceServers","views","uid","genomePositionSearchBox","autocompleteServer","autocompleteId","chromInfoServer","chromInfoId","visible","chromInfoPath","tracks","top","type","height","contents","stroke","fontSize","fontIsLeftAligned","showMousePosition","mousePositionColor","tilesetUid","server","fromViewUid","projectionFillColor","projectionStrokeColor","projectionFillOpacity","projectionStrokeOpacity","strokeWidth","plusStrandColor","minusStrandColor","geneAnnotationHeight","geneLabelPosition","geneStrandSpacing","axisPositionHorizontal","markColor","markColorFocus","markSize","markOpacity","markOpacityFocus","valueColumn","focusRegion","name","toolTip","field","numDecimals","other","binSize","axisAlign","labelPosition","arcStyle","indicatorStyle","labelColor","trackBorderWidth","trackBorderColor","geneField","importanceField","importanceDomain","stratification","markColorHighlight","markColorDehighlight","markMinWidth","markHeight","rowHeight","overlays","includes","extent","minWidth","fill","fillOpacity","outline","outlineOpacity","outlineWidth","outlinePos","metaTracks","overlaysTrack","annotationTracks","layout","w","h","x","initialXDomain","initialYDomain","DEFAULT_VIEW_CONFIG_DNA_ACCESSIBILITY","zoomFixed","labelShowResolution","labelShowAssembly","markArea","markResolution","valueScaling","colorRange","rowPadding","rowNormalization","rowSelections","root","display","right","bottom","left","appBar","marginLeft","palette","common","black","white","boxShadow","grey","flexShrink","drawerPaper","textInput","toolbar","mixins","content","flexDirection","flexGrow","padding","spacing","higlass","higlassPrimary","higlassSecondary","chrPosUrlEncoder","chrPos","replace","chrPosUrlDecoder","updateViewConfigXDomain","newXDomainStart","newXDomainEnd","force","viewConfig","xDomain","focusGeneRegion","getFocusGeneRegion","focusVariantRegion","getFocusVariantRegion","Number","isNaN","min","updateViewConfigFocusVariant","trackIdxs","trackIdx","Viewer","focusGene","setFocusGene","focusVariant","setFocusVariant","hideUnfocused","setHideUnfocused","matrixColoring","setMatrixColoring","variantYScale","setVariantYScale","absToChr","slice","join","xDomainStart","setXDomainStart","xDomainEnd","setXDomainEnd","focusGeneOption","setFocusGeneOption","focusVariantOption","setFocusVariantOption","higlassEnhancerApi","useRef","higlassDnaAccessApi","focusGeneStartPosition","useMemo","chr","txStart","focusGeneEndPosition","txEnd","focusVariantPosition","xDomainStartAbs","xDomainEndAbs","viewConfigEnhancer","pipe","gene","start","end","n","focusStyle","updateViewConfigFocusStyle","coloring","opacityEncoding","yScale","deepClone","viewConfigDnaAccessibility","numericalXDomainStart","isString","chrToAbs","numericalXDomainEnd","focusGeneChangeHandler","focusVariantChangeHandler","higlassClickHandler","payload","fields","score","importance","higlassLocationChangeHandlerDb","debounce","map","absPos","r","results","higlassEnhancerInitHandler","higlassInstance","current","api","on","higlassDnaAccessibilityInitHandler","CssBaseline","AppBar","Toolbar","Typography","noWrap","Drawer","paper","anchor","Divider","Box","m","FormControl","margin","InputLabel","htmlFor","OutlinedInput","target","Button","onClick","newViewConfig","zoomTo","disableElevation","FormControlLabel","control","Switch","checked","toString","component","FormLabel","RadioGroup","aria-label","Radio","ref","sizeMode","pixelPreciseMarginPadding","containerPaddingX","containerPaddingY","viewMarginTop","viewMarginBottom","viewMarginLeft","viewMarginRight","viewPaddingTop","viewPaddingBottom","viewPaddingLeft","viewPaddingRight","withEither","ifEitherFn","EitherComponent","Component","createMuiTheme","primary","main","secondary","App","setChromInfo","ChromosomeInfo","then","_chromInfo","totalLength","catch","AppViewer","AppError","ThemeProvider","Boolean","hostname","match","createAnnotationOverlayMetaTrack","HGC","Error","pubSub","services","AnnotationOverlayMetaTrack","context","definition","getTrackObject","animate","onNewTilesLoaded","this","annotationTrackIds","Set","track","add","uuid","console","warn","filter","annotationDrawnHandlerBound","annotationDrawnHandler","bind","drawnAnnotations","Map","tracksDrawingTiles","pubSubs","subscribe","push","tilesDrawnEndHandler","xStartAbs","xEndAbs","data","set","unsubscribe","has","updateOverlays","Array","from","draw","clear","args","config","availableOptions","defaultOptions","FLOAT_BYTES","BYTES_PER_ELEMENT","VS","FS","COLORMAP_GRAYS","gray","getMax","fetchedTiles","Object","reduce","maxValue","tile","tileData","maxNonZero","Infinity","getNumRows","coarseShape","getRowMaxs","maxVector","maxValueByRow","scaleGraphics","xScale","drawnAtScale","tileK","domain","posOffset","scale","getNumPointsPerRow","numRows","positions","createRidgePlotTrack","libraries","format","d3Format","scaleLinear","d3Scale","tileProxy","RidgePlotTrack","updateOptions","coarsifyTileValues","tilesetInfo","bins_per_dimension","zoomLevel","tilePos","binsPerTileIn","binsPerTile","resolutions","chosenResolution","sort","tileWidth","tileHeight","tileX","tileY","xTilePos","yTilePos","minX","min_pos","minY","reverseYAxis","max_pos","max_width","selectRowsAggregationMode","selectRowsAggregationFn","maxNan","minNan","sumNan","meanNan","markAreaColor","utils","colorToHex","markColorRgbNorm","colorToRgba","markColorTex","markColorTexRes","markNumColors","oldMarkResolution","TILE_SIZE","oldRowHeight","oldRowPadding","oldRowNormalization","oldRowSelections","updateTiles","updateScales","newOptions","updateExistingGraphics","getTilePosAndDimensions","shape","binSizePx","floor","binSizeBp","binSizeBpHalf","binXPos","valuesByRow","j","meanValue","dense","subarray","rowIdx","visibleTrackHeight","dimensions","actualTrackHeight","globalMax","valueScale","range","colorIndexScale","clamp","rowMaxs","rowValueScales","rowColorIndexScales","valueScaleByRow","row","colorIndexScaleByRow","rowScale","tiles","maxRows","positionsByRow","colorIndicesByRow","offsetSignsByRow","_xScale","yStart","size2d","size1d","unshift","flatMap","numPointsPerRow","verticesPerLine","verticesPerPoint","indices","Uint32Array","k","p1a","p1b","p1c","p1d","p2a","p2b","p2c","p2d","indexOffset","tilesToData","colorIndices","offsetSigns","toLineIndices","uniforms","UniformGroup","uLineColor","uNaNColor","uAreaColorTex","uAreaColorTexRes","uWidth","uMiter","shader","Shader","geometry","Geometry","numVerticesPoint","addAttribute","TYPES","FLOAT","addIndex","mesh","Mesh","newGraphics","Graphics","addChild","pMain","lineGraphics","removeChild","destroy","renderLines","hasFetchedTiles","updateIndicators","newPosition","newXScale","newYScale","refreshTiles","trackX","trackY","calculateZoomLevel","calculateTileWidth","tile_size","invert","posInTileX","posInTileY","rowIndex","rowSelection","tileId","tileToLocalId","fetchedTile","index","isArray","selectRowsAggregationMethod","rowI","row_infos","rowInfo","selectRows","getVisibleData","HorizontalLine1DPixiTrack","datatype","orientation","DEFAULT_GROUP_COLORS","DEFAULT_GROUP_COLORS_DARK","DEFAULT_GROUP_COLORS_LIGHT","pointToPosition","pt","cX","widthHalf","pointToIndex","base","pointToOpacity","opacity","pointToHighlight","highlight","getIs2d","get1dItemWidth","item","get2dItemWidth","yEnd","get1dStart","get2dStart","get1dEnd","get2dEnd","getMaxWidth","maxWidth","maxWidthItem","scaleScalableGraphics","getRegionId","createStratifiedBedTrack","scaleLog","opacityLogScale","StratifiedBedTrack","is2d","getItemWidth","getStart","getEnd","intervals","regionId","isLeftToRight","intervalTree","createIntervalTree","categoryToGroup","groupToColor","numGroups","numCategories","groupLabels","getCategory","toLowerCase","categoryToY","yToCategory","groupSizes","group","groupSize","category","cat","groupLabelsPixiText","Text","labelSize","align","axisLabelColor","markColorHighlightRgbNorm","markColorDehighlightRgbNorm","getImportance","opacityScale","opacityLinearScale","getRegion","getGene","minImportance","updateStratificationOption","heightScale","categoryHeightScale","valueScaleInverted","isHighlighting","get","__focus","__item","filterFn","addFn","filteredItems","reducerVar","accumulator","itemToIndicatorCategory","i1","isItemInFocus","dataToPoint","itemToIndicatorReducer","points","Uint16Array","opacities","highlights","uColor","uColorHighlight","uHighlighting","indicatorPointGraphics","pAxis","xTickOffset","xTickEnd","xLabelOffset","numAxisLabels","children","lineStyle","labelPixiText","beginFill","drawRect","endFill","renderIndicatorCategoryAxis","renderIndicatorPoints","storePolyStr","foundItem","xAbsLo","xAbsHi","queryInterval","interval","bg","colorHex","bgHex","toFixed","setAttribute","output","document","createElement","appendChild","visibleAndFetchedTiles","polys","drawTile","polyStr","g","thumbnail","DOMParser","parseFromString","documentElement","flip1D","optionsInfo","inlineOptions","circle","ellipse","FS_ROUND","FS_SQUARE","createScalableArcs1dTrack","ScalableArcs1dTrack","numBins","pointSize","widthHistogramLeft","widthHistogramRight","bin","round","histPos","widthHistogramMax","updateTileWidthHistogram","markColorFocusRgbNorm","markSizeFocus","strokeColor","updateWidthHistograms","markSizeHalf","fullHeightScale","fullHeightScaleInverted","incomingHeightScale","outgoingHeightScale","startX","endX","startY","endY","cY","wHalf","focused","sizeHalf","mapFn","pointToFocused","vertexShader","fragmentShader","drawTriangles","uPointSize","uColorFocused","State","DRAW_MODES","TRIANGLES","POINTS","drawAxis","itemToIndicatorDiverging","itemToIndicatorStart","renderIndicatorDistanceAxis","itemToIndicatorEnd","startsWith","drawCircle","drawEllipse","x1","x2","trackWidth","trackHeight","d","cx","cy","limitX1","limitX2","startAngle","acos","endAngle","flip","PI","angleScale","resolution","rx","cos","ry","sin","createSnpTrack","d3Array","scaleBand","SnpTrack","colorEncodingRange","minVisibleValueInTiles","maxVisibleValueInTiles","makeValueScale","calculateMedianVisibleValue","xStartPos","xEndPos","rectY","doubleRadius","drawnPoly","anchorRadius","radius","rectGraphics","finalDotYPos","rows","initialize","paddingInner","circleDraws","circleFocusDraws","td","geneInfo","chrOffset","yMiddle","step","drawnRects","circleDraw","drawPoly","interactive","buttonMode","mouseup","hoveringSnp","publish","relTilePos","minDist","dist","itemY","MAX_RADIUS","otherStr","v","substr","BedLikeTrack","DEFAULT_COLOR_MAP","DEFAULT_COLOR_MAP_DARK","DEFAULT_COLOR_MAP_LIGHT","getHistMax","histMax","histogramMax","segmentToPosition","segment","segmentToColorIdx","colorIdx","segmentToFocused","createStackedBarTrack","toRgbNorm","StackedBarTrack","updateTileFocusMap","histogram1d","histogram2d","histogram2dNumPred","Uint8Array","categoryBinHash","maxBinId","binStart","binEnd","histIdx","binHash","updateTileHistogram","focusMap","colorMap","colorMapRgbNorm","colorMapTex","colorMapTexRes","colorMapFocus","colorMapFocusRgbNorm","colorMapFocusTex","colorMapFocusTexRes","updateFocusMap","updateHistograms","brgs","oldNumBins","segments","cumHeight","histToSegments","colorIdxs","uColorMapTex","uColorMapTexRes","uColorMapFocus","uColorMapFocusTexRes","renderStackedBars","renderTrack","relPos","rowCumSum","rowNumPred","totalPred","sum","numPred","relYPos","findIndex","createTssTrack","TssTrack","createPubSub","xStartScreen","xEndScreen","register","isMetaTrack","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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,2DACA,0DACA,4DACA,gBACA,sBACA,0DACA,sBACA,+BACA,2DACA,gCACA,qBACA,+EACA,4DACA,wBACA,uCACA,iFACA,0DACA,qBACA,OACA,iCACA,iFACA,gBACA,4DACA,4DACA,2DACA,2DACA,sBACA,qBACA,iFACA,0DACA,oFACA,uBACA,iFACA,sBACA,kCACA,wBAGJ,CACEhF,MAAO,UACPgF,WAAY,CACV,oBACA,gBACA,uCACA,gBACA,iBACA,kBACA,eACA,+BACA,0CAGJ,CACEhF,MAAO,UACPgF,WAAY,CACV,mCACA,kBACA,8BACA,oCACA,4CACA,uBACA,wCACA,kBAGJ,CACEhF,MAAO,6BACPgF,WAAY,CACV,gBACA,eACA,6CACA,0BACA,kCACA,gDACA,iCACA,kBAGJ,CACEhF,MAAO,cACPgF,WAAY,CACV,8BACA,+BACA,2BACA,mBACA,+BAGJ,CACEhF,MAAO,aACPgF,WAAY,CACV,gCACA,qCACA,gBACA,eACA,6BACA,KACA,uBACA,gBACA,mBACA,kCACA,kBACA,OACA,4DACA,cACA,kBACA,uBACA,OACA,aACA,iCACA,gCACA,eACA,uBACA,qCACA,0BACA,qDACA,gBACA,0BACA,wBACA,aACA,0BACA,qDACA,2BACA,uCACA,QACA,4CACA,gBACA,uBACA,mCACA,kCACA,gDACA,iBACA,kCAGJ,CACEhF,MAAO,QACPgF,WAAY,CACV,wBACA,kBACA,oBACA,yBACA,2BACA,yBACA,gBACA,8BACA,gCACA,yBACA,mBACA,eACA,cACA,yBACA,6BACA,oBACA,wDACA,6CACA,QACA,2DACA,uBACA,iEACA,sEASKC,GAA+B,CAC1CC,UAAU,EACVC,mBAAoB,CAAC,uBACrBC,MAAO,CACL,CACEC,IAAK,UACLC,wBAAyB,CACvBC,mBAAoB,sBACpBC,eAAgB,yBAChBC,gBAAiB,sBACjBC,YAAa,OACbC,SAAS,GAEXC,cAAe,oDACfC,OAAQ,CACNC,IAAK,CACH,CACEC,KAAM,WACNV,IAAK,kBACLW,OAAQ,GACRC,SAAU,CACR,CACEF,KAAM,+BACN3I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","file":"static/js/main.07d9cbcf.chunk.js","sourcesContent":["import React from 'react';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#bbb',\n    backgroundColor: '#fff',\n  },\n}));\n\nconst AppInitializing = () => {\n  const classes = useStyles();\n\n  return (\n    <div className=\"full-wh\">\n      <Backdrop className={classes.backdrop} open={true}>\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n    </div>\n  );\n};\n\nexport default AppInitializing;\n","import React from 'react';\nimport './AppError.css';\n\nconst AppInitializing = () => (\n  <div className=\"full-wh app-error\">\n    <span>Failed to initialize!</span>\n  </div>\n);\n\nexport default AppInitializing;\n","import PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { identity } from '@flekschas/utils';\n\nimport useDebounce from './use-debounce';\n\nexport default function SearchField(props) {\n  const [open, setOpen] = useState(false);\n  const [options, setOptions] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(props.inputValue);\n  const debouncedSearchQuery = useDebounce(searchQuery, 250);\n  const loading = open && options.length === 0;\n\n  useEffect(() => {\n    let active = true;\n\n    if (!open) return undefined;\n\n    setOptions([]);\n\n    (async () => {\n      const response = await fetch(\n        `${props.searchUrl}&ac=${debouncedSearchQuery || ''}`\n      );\n      const geneList = await response.json();\n\n      if (active) {\n        setOptions(geneList);\n      }\n    })();\n\n    return () => {\n      active = false;\n    };\n  }, [props.searchUrl, open, debouncedSearchQuery]);\n\n  useEffect(() => {\n    if (!open) {\n      setOptions([]);\n    }\n  }, [open]);\n\n  return (\n    <Autocomplete\n      onChange={(event, newValue) => {\n        props.onChange(newValue);\n      }}\n      value={props.value}\n      onInputChange={(event, newInputValue) => {\n        if (event) setSearchQuery(newInputValue);\n      }}\n      fullWidth={props.fullWidth}\n      style={{ width: props.fullWidth ? 'auto' : props.width }}\n      open={open}\n      onOpen={() => {\n        setOpen(true);\n      }}\n      onClose={() => {\n        setOpen(false);\n      }}\n      getOptionSelected={(option, _value) =>\n        option.geneName === _value.geneName\n      }\n      getOptionLabel={(option) => option.geneName}\n      options={props.value && options.length === 0 ? [props.value] : options}\n      loading={loading}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          id={props.id}\n          label={props.label}\n          variant={props.variant}\n          size={props.size}\n          InputProps={{\n            ...params.InputProps,\n            endAdornment: (\n              <React.Fragment>\n                {loading ? (\n                  <CircularProgress color=\"inherit\" size={20} />\n                ) : null}\n                {params.InputProps.endAdornment}\n              </React.Fragment>\n            ),\n          }}\n        />\n      )}\n    />\n  );\n}\n\nSearchField.defaultProps = {\n  onChange: identity,\n  label: '',\n  id: '',\n  fullWidth: true,\n  size: 'small',\n  value: null,\n  variant: 'outlined',\n  width: '10rem',\n};\n\nSearchField.propTypes = {\n  onChange: PropTypes.func,\n  label: PropTypes.string,\n  id: PropTypes.string,\n  fullWidth: PropTypes.bool,\n  searchUrl: PropTypes.string.isRequired,\n  size: PropTypes.string,\n  value: PropTypes.object,\n  variant: PropTypes.string,\n  width: PropTypes.string,\n};\n","import { useState, useEffect } from 'react';\n\nexport default function useDebounce(value, delay) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n","import { identity } from '@flekschas/utils';\nimport queryString from 'query-string';\n\nexport const contains = (a, b) => a[0] <= b[0] && a[1] >= b[1];\n\nexport const createColorTexture = (PIXI, colors) => {\n  const colorTexRes = Math.max(2, Math.ceil(Math.sqrt(colors.length)));\n  const rgba = new Float32Array(colorTexRes ** 2 * 4);\n  colors.forEach((color, i) => {\n    // eslint-disable-next-line prefer-destructuring\n    rgba[i * 4] = color[0]; // r\n    // eslint-disable-next-line prefer-destructuring\n    rgba[i * 4 + 1] = color[1]; // g\n    // eslint-disable-next-line prefer-destructuring\n    rgba[i * 4 + 2] = color[2]; // b\n    // eslint-disable-next-line prefer-destructuring\n    rgba[i * 4 + 3] = color[3]; // a\n  });\n\n  return [PIXI.Texture.fromBuffer(rgba, colorTexRes, colorTexRes), colorTexRes];\n};\n\nexport const dashedXLineTo = (graphics, xStart, xEnd, y, dashSize) => {\n  const diff = xEnd - xStart;\n  const direction = Math.sign(diff);\n  const width = Math.abs(diff);\n  const stepSize = dashSize * 2;\n  const numSteps = Math.ceil(width / stepSize);\n  for (let i = 0; i < numSteps; i++) {\n    graphics.moveTo(xStart + i * stepSize * direction, y);\n    graphics.lineTo(xStart + (i * stepSize + dashSize) * direction, y);\n  }\n};\n\nexport const getQueryStringValue = (key, decoder = identity) =>\n  decoder(queryString.parse(window.location.search)[key]);\n\nexport const setQueryStringValue = (key, value, encoder = identity) => {\n  const values = queryString.parse(window.location.search);\n  const newQsValue = queryString.stringify(\n    {\n      ...values,\n      [key]: encoder(value),\n    },\n    { strict: false }\n  );\n  const url = `${window.location.origin}${window.location.pathname}?${newQsValue}`;\n  window.history.pushState({ path: url }, '', url);\n};\n\nexport const toAbsPosition = (position, chromInfo) => {\n  let absPosition;\n  if (position.indexOf && position.indexOf(':') >= 0) {\n    const [chrom, pos] = position.split(':');\n    absPosition = chromInfo.chrPositions[chrom].pos + +pos;\n  } else {\n    absPosition = +position;\n  }\n  return absPosition;\n};\n","import { useState, useCallback } from 'react';\nimport { getQueryStringValue, setQueryStringValue } from './utils';\n\nfunction useQueryString(key, initialValue, { encoder, decoder } = {}) {\n  const [value, setValue] = useState(\n    getQueryStringValue(key, decoder) === undefined\n      ? initialValue\n      : getQueryStringValue(key, decoder)\n  );\n  const onSetValue = useCallback(\n    (newValue) => {\n      setValue(newValue);\n      setQueryStringValue(key, newValue, encoder);\n    },\n    [key, encoder]\n  );\n\n  // Set initial value\n  setQueryStringValue(key, value, encoder);\n\n  return [value, onSetValue];\n}\n\nexport default useQueryString;\n","export const GENE_SEARCH_URL =\n  'https://higlass.io/api/v1/suggest/?d=OHJakQICQD6gTD7skx4EWA';\n\nexport const VARIANT_SEARCH_URL =\n  'https://resgen.io/api/v1/suggest/?d=VF5-RDXWTxidGMJU7FeaxA';\n\nexport const DEFAULT_STRATIFICATION = {\n  categoryField: 10,\n  axisShowGroupSeparator: true,\n  axisNoGroupColor: false,\n  groups: [\n    {\n      label: 'Mononuclear Phagocytes',\n      categories: [\n        'THP1_LPS_4hr-Engreitz',\n        'THP_pmaLPS_ATAC_6h',\n        'CD14-positive_monocyte_treated_with_LPS_4h-Novakovic2016',\n        'CD14-positive_monocyte_treated_with_BG_1h-Novakovic2016',\n        'CD14-positive_monocyte_treated_with_RPMI_d6-Novakovic2016',\n        'THP1-Engreitz',\n        'THP_pmaLPS_ATAC_96h',\n        'CD14-positive_monocyte_treated_with_BG_d1-Novakovic2016',\n        'THP_pmaLPS_ATAC_72h',\n        'THP-1_monocyte-VanBortle2017',\n        'CD14-positive_monocyte_treated_with_LPS_d1-Novakovic2016',\n        'CD14-positive_monocyte-ENCODE',\n        'THP_pmaLPS_ATAC_2h',\n        'dendritic_cell_treated_with_Lipopolysaccharide_0_ng-mL_for_0_hour-Garber2017',\n        'CD14-positive_monocyte_treated_with_RPMI_1h-Novakovic2016',\n        'U937_LPS_4hr-Engreitz',\n        'CD14-positive_monocyte-Novakovic2016',\n        'dendritic_cell_treated_with_Lipopolysaccharide_100_ng-mL_for_6_hour-Garber2017',\n        'CD14-positive_monocyte_treated_with_BG_4h-Novakovic2016',\n        'THP_pmaLPS_ATAC_0h',\n        'HAP1',\n        'THP-1_macrophage-VanBortle2017',\n        'dendritic_cell_treated_with_Lipopolysaccharide_100_ng-mL_for_1_hour-Garber2017',\n        'U937-Engreitz',\n        'CD14-positive_monocyte_treated_with_RPMI_d1-Novakovic2016',\n        'CD14-positive_monocyte_treated_with_RPMI_4h-Novakovic2016',\n        'CD14-positive_monocyte_treated_with_LPS_d6-Novakovic2016',\n        'CD14-positive_monocyte_treated_with_LPS_1h-Novakovic2016',\n        'THP_pmaLPS_ATAC_24h',\n        'THP_pmaLPS_ATAC_1h',\n        'dendritic_cell_treated_with_Lipopolysaccharide_100_ng-mL_for_2_hour-Garber2017',\n        'CD14-positive_monocyte_treated_with_BG_d6-Novakovic2016',\n        'dendritic_cell_treated_with_Lipopolysaccharide_100_ng-mL_for_30_minute-Garber2017',\n        'THP_pmaLPS_ATAC_120h',\n        'dendritic_cell_treated_with_Lipopolysaccharide_100_ng-mL_for_4_hour-Garber2017',\n        'THP_pmaLPS_ATAC_48h',\n        'CD14-positive_monocytes-Roadmap',\n        'THP_pmaLPS_ATAC_12h', // monoctye\n      ],\n    },\n    {\n      label: 'B Cells',\n      categories: [\n        'Karpas-422-ENCODE', // b-cell cell line\n        'BJAB-Engreitz',\n        'BJAB_anti-IgM_anti-CD40_4hr-Engreitz',\n        'B_cell-ENCODE',\n        'OCI-LY7-ENCODE',\n        'GM12878-Roadmap',\n        'MM.1S-ENCODE',\n        'CD19-positive_B_cell-Roadmap',\n        'CD8-positive_alpha-beta_T_cell-ENCODE',\n      ],\n    },\n    {\n      label: 'T Cells',\n      categories: [\n        'Jurkat_anti-CD3_PMA_4hr-Engreitz', // t-cell\n        'Jurkat-Engreitz',\n        'CD3-positive_T_cell-Roadmap',\n        'CD4-positive_helper_T_cell-ENCODE',\n        'CD8-positive_alpha-beta_T_cell-Corces2016',\n        'thymus_fetal-Roadmap',\n        'CD4-positive_helper_T_cell-Corces2016',\n        'T-cell-ENCODE',\n      ],\n    },\n    {\n      label: 'Other haematopoietic cells',\n      categories: [\n        'spleen-ENCODE',\n        'K562-Roadmap',\n        'CD56-positive_natural_killer_cells-Roadmap',\n        'erythroblast-Corces2016',\n        'CD34-positive_mobilized-Roadmap',\n        'megakaryocyte-erythroid_progenitor-Corces2016',\n        'natural_killer_cell-Corces2016',\n        'IMR90-Roadmap',\n      ],\n    },\n    {\n      label: 'Fibroblasts',\n      categories: [\n        'foreskin_fibroblast-Roadmap',\n        'fibroblast_of_dermis-Roadmap',\n        'fibroblast_of_arm-ENCODE',\n        'astrocyte-ENCODE',\n        'fibroblast_of_lung-Roadmap',\n      ],\n    },\n    {\n      label: 'Epithelial',\n      categories: [\n        'small_intestine_fetal-Roadmap',\n        'epithelial_cell_of_prostate-ENCODE',\n        'HCT116-ENCODE',\n        'MCF-7-ENCODE',\n        'adrenal_gland_fetal-ENCODE',\n        'H7',\n        'keratinocyte-Roadmap',\n        'MCF10A-Ji2017',\n        'pancreas-Roadmap',\n        'mammary_epithelial_cell-Roadmap',\n        'stomach-Roadmap',\n        'LoVo',\n        'A549_treated_with_ethanol_0.02_percent_for_1_hour-Roadmap',\n        'PC-9-ENCODE',\n        'H1-hESC-Roadmap',\n        'thyroid_gland-ENCODE',\n        'HT29',\n        'MDA-MB-231',\n        'iPS_DF_19.11_Cell_Line-Roadmap',\n        'large_intestine_fetal-Roadmap',\n        'Panc1-ENCODE',\n        'adrenal_gland-ENCODE',\n        'MCF10A_treated_with_TAM24hr-Ji2017',\n        'trophoblast_cell-ENCODE',\n        'H1_BMP4_Derived_Trophoblast_Cultured_Cells-Roadmap',\n        'uterus-ENCODE',\n        'body_of_pancreas-ENCODE',\n        'stomach_fetal-Roadmap',\n        'H9-Roadmap',\n        'transverse_colon-ENCODE',\n        'H1_BMP4_Derived_Mesendoderm_Cultured_Cells-Roadmap',\n        'breast_epithelium-ENCODE',\n        'induced_pluripotent_stem_cell-ENCODE',\n        'LNCAP',\n        'H1_Derived_Mesenchymal_Stem_Cells-Roadmap',\n        'ovary-Roadmap',\n        'sigmoid_colon-ENCODE',\n        'skeletal_muscle_myoblast-Roadmap',\n        'bipolar_neuron_from_iPSC-ENCODE',\n        'coronary_artery_smooth_muscle_cell-Miller2016',\n        'SK-N-SH-ENCODE',\n        'muscle_of_trunk_fetal-Roadmap',\n      ],\n    },\n    {\n      label: 'Other',\n      categories: [\n        'adipose_tissue-ENCODE',\n        'HeLa-S3-Roadmap',\n        'hepatocyte-ENCODE',\n        'heart_ventricle-ENCODE',\n        'spinal_cord_fetal-ENCODE',\n        'coronary_artery-ENCODE',\n        'HepG2-Roadmap',\n        'muscle_of_leg_fetal-Roadmap',\n        'gastrocnemius_medialis-ENCODE',\n        'brite_adipose-Loft2014',\n        'placenta-Roadmap',\n        'liver-ENCODE',\n        'A673-ENCODE',\n        'white_adipose-Loft2014',\n        'cardiac_muscle_cell-ENCODE',\n        'osteoblast-ENCODE',\n        'H1_Derived_Neuronal_Progenitor_Cultured_Cells-Roadmap',\n        'endothelial_cell_of_umbilical_vein-Roadmap',\n        'NCCIT',\n        'myotube_originated_from_skeletal_muscle_myoblast-Roadmap',\n        'psoas_muscle-Roadmap',\n        'endothelial_cell_of_umbilical_vein_vegf_stim_4_hours-zhang2013',\n        'endothelial_cell_of_umbilical_vein_vegf_stim_12_hours-zhang2013',\n      ],\n    },\n  ],\n};\n\nexport const DEFAULT_X_DOMAIN_START = 1761366260;\nexport const DEFAULT_X_DOMAIN_END = 1761603836;\n\nexport const DEFAULT_VIEW_CONFIG_ENHANCER = {\n  editable: false,\n  trackSourceServers: ['//higlass.io/api/v1'],\n  views: [\n    {\n      uid: 'context',\n      genomePositionSearchBox: {\n        autocompleteServer: '//higlass.io/api/v1',\n        autocompleteId: 'OHJakQICQD6gTD7skx4EWA',\n        chromInfoServer: '//higlass.io/api/v1',\n        chromInfoId: 'hg19',\n        visible: true,\n      },\n      chromInfoPath: '//s3.amazonaws.com/pkerp/data/hg19/chromSizes.tsv',\n      tracks: {\n        top: [\n          {\n            type: 'combined',\n            uid: 'chroms-viewport',\n            height: 12,\n            contents: [\n              {\n                type: 'horizontal-chromosome-labels',\n                options: {\n                  // tickPositions: 'ends',\n                  color: '#999999',\n                  stroke: 'white',\n                  fontSize: 10,\n                  fontIsLeftAligned: true,\n                  showMousePosition: false,\n                  mousePositionColor: '#000000',\n                },\n                tilesetUid: 'ADfY_RtsQR6oKOMyrq6qhw',\n                height: 12,\n                server: 'https://resgen.io/api/v1',\n                uid: 'chroms',\n              },\n              {\n                uid: 'viewport-details-chroms',\n                type: 'viewport-projection-horizontal',\n                fromViewUid: 'details',\n                height: 12,\n                options: {\n                  projectionFillColor: '#cc0078',\n                  projectionStrokeColor: '#cc0078',\n                  projectionFillOpacity: 0.3,\n                  projectionStrokeOpacity: 0.3,\n                  strokeWidth: 1,\n                },\n              },\n            ],\n          },\n          {\n            type: 'combined',\n            uid: 'genes-tss-viewport',\n            height: 50,\n            contents: [\n              {\n                type: 'horizontal-gene-annotations',\n                uid: 'genes',\n                height: 50,\n                server: 'https://resgen.io/api/v1',\n                tilesetUid: 'NCifnbrKQu6j-ohVWJLoJw',\n                options: {\n                  fontSize: 9,\n                  plusStrandColor: 'black',\n                  minusStrandColor: 'black',\n                  geneAnnotationHeight: 12,\n                  geneLabelPosition: 'outside',\n                  geneStrandSpacing: 2,\n                },\n              },\n              {\n                type: 'tss',\n                uid: 'tss',\n                height: 50,\n                // server: 'http://localhost:9876/api/v1',\n                // tilesetUid: 'RefSeqCurated170308bedCollapsedGeneBoundsTSS500bp',\n                server: 'https://resgen.io/api/v1',\n                tilesetUid: 'VMZDLKrtQDmJMSjg7Ds4yA',\n                options: {\n                  fontSize: 9,\n                  plusStrandColor: 'black',\n                  minusStrandColor: 'black',\n                  geneAnnotationHeight: 12,\n                  geneLabelPosition: 'outside',\n                  geneStrandSpacing: 2,\n                },\n              },\n              {\n                uid: 'viewport-details-genes',\n                type: 'viewport-projection-horizontal',\n                fromViewUid: 'details',\n                height: 50,\n                options: {\n                  projectionFillColor: '#cc0078',\n                  projectionStrokeColor: '#cc0078',\n                  projectionFillOpacity: 0.3,\n                  projectionStrokeOpacity: 0.3,\n                  strokeWidth: 1,\n                },\n              },\n            ],\n          },\n          {\n            type: 'point-annotation',\n            uid: 'ibd-snps',\n            // server: 'http://localhost:9876/api/v1',\n            // tilesetUid: 'IBDCombinedset1-2variantonly-pval',\n            server: 'https://resgen.io/api/v1',\n            tilesetUid: 'VF5-RDXWTxidGMJU7FeaxA',\n            height: 36,\n            options: {\n              axisPositionHorizontal: 'right',\n              markColor: 'black',\n              markColorFocus: '#cc0078',\n              markSize: 2,\n              markOpacity: 0.33,\n              markOpacityFocus: 0.66,\n              // axisPositionHorizontal: 'right',\n              valueColumn: 7,\n              focusRegion: [\n                1680373143 + 81046453 - 25,\n                1680373143 + 81046453 + 25,\n              ],\n              name: 'IBD SNPs',\n              toolTip: {\n                name: {\n                  field: 3,\n                },\n                value: {\n                  field: 6,\n                  numDecimals: 2,\n                },\n                other: [\n                  {\n                    label: 'Post. Prob.',\n                    field: 7,\n                    numDecimals: 2,\n                  },\n                ],\n              },\n            },\n          },\n          {\n            type: 'stacked-bar',\n            // server: 'http://localhost:9876/api/v1',\n            // tilesetUid: 'AllPredictionsAvgHiCABC0015minus150ForABCPaperV2hg19beddb',\n            server: 'https://resgen.io/api/v1',\n            // tilesetUid: 'P0Ng5fhvQWeO7dlpx0FknA', // all chroms\n            // tilesetUid: 'PGXLE50tQyOayNXKUnX4fQ', // just chr10\n            // tilesetUid: 'AaJojHeORzKyiag1pSlAag', // bed\n            tilesetUid: 'GOxTKzoLSsuw0BaG6eBrXw', // improved bed\n            height: 96,\n            uid: 'stacked-bars',\n            options: {\n              binSize: 4,\n              axisAlign: 'right',\n              axisPositionHorizontal: 'right',\n              labelPosition: 'hidden',\n              markColor: 'black',\n              markColorFocus: '#cc0078',\n              markSize: 4,\n              markOpacity: 0.33,\n              arcStyle: 'indicator',\n              indicatorStyle: 'category-rect',\n              labelColor: 'black',\n              trackBorderWidth: 0,\n              trackBorderColor: 'black',\n              geneField: 6,\n              importanceField: 7,\n              importanceDomain: [0, 1],\n              focusRegion: [\n                1680373143 + 81046453 - 25,\n                1680373143 + 81046453 + 25,\n              ],\n              name: 'By Celltype',\n              stratification: DEFAULT_STRATIFICATION,\n            },\n          },\n          {\n            type: 'stratified-bed',\n            // server: 'http://localhost:9876/api/v1',\n            // tilesetUid: 'AllPredictionsAvgHiCABC0015minus150ForABCPaperV2hg19beddb',\n            server: 'https://resgen.io/api/v1',\n            // tilesetUid: 'P0Ng5fhvQWeO7dlpx0FknA', // all chroms\n            // tilesetUid: 'PGXLE50tQyOayNXKUnX4fQ', // just chr10\n            // tilesetUid: 'AaJojHeORzKyiag1pSlAag', // bed\n            tilesetUid: 'GOxTKzoLSsuw0BaG6eBrXw', // improved bed\n            height: 403,\n            uid: 'indicatorByCellTypes',\n            options: {\n              axisAlign: 'right',\n              labelPosition: 'hidden',\n              markColor: 'black',\n              markColorHighlight: '#bf0071',\n              markColorDehighlight: '#bbbbbb',\n              markSize: 4,\n              markMinWidth: 4,\n              markHeight: 3,\n              rowHeight: 3,\n              markOpacity: 0.33,\n              arcStyle: 'indicator',\n              indicatorStyle: 'category-rect',\n              labelColor: 'black',\n              geneField: 6,\n              importanceField: 7,\n              importanceDomain: [0, 1],\n              // focusRegion: [\n              //   1680373143 + 81046453 - 25,\n              //   1680373143 + 81046453 + 25,\n              // ],\n              name: 'By Celltype',\n              axisPositionHorizontal: 'right',\n              stratification: DEFAULT_STRATIFICATION,\n            },\n          },\n        ],\n      },\n      overlays: [\n        {\n          uid: 'region-focus',\n          includes: [\n            'chroms',\n            'genes-tss-viewport',\n            'ibd-snps',\n            'stacked-bars',\n            'indicatorByCellTypes',\n          ],\n          options: {\n            extent: [[1680373143 + 81046453, 1680373143 + 81046454]],\n            minWidth: 3,\n            fill: '#cc0078',\n            fillOpacity: 0.05,\n            strokeWidth: 0,\n            outline: '#cc0078',\n            outlineOpacity: 0.33,\n            outlineWidth: 1,\n            outlinePos: ['left', 'right'],\n          },\n        },\n        {\n          uid: 'gene-focus',\n          includes: ['genes-tss-viewport'],\n          options: {\n            extent: [],\n            minWidth: 3,\n            fill: '#cc0078',\n            fillOpacity: 0.25,\n            stroke: '#cc0078',\n            strokeWidth: 0,\n            outlineWidth: 0,\n          },\n        },\n        {\n          uid: 'tss-overlays',\n          includes: [\n            'chroms',\n            'genes-tss-viewport',\n            'ibd-snps',\n            'stacked-bars',\n            'indicatorByCellTypes',\n          ],\n          options: {\n            extent: [],\n            minWidth: 1,\n            fill: 'black',\n            fillOpacity: 0.05,\n            strokeWidth: 0,\n            outline: 'black',\n            outlineOpacity: 0.1,\n            outlineWidth: 1,\n            outlinePos: ['left'],\n          },\n        },\n      ],\n      metaTracks: [\n        {\n          uid: 'tss-overlays-meta',\n          type: 'annotation-overlay',\n          overlaysTrack: 'tss-overlays',\n          options: {\n            annotationTracks: ['tss'],\n          },\n        },\n      ],\n      layout: {\n        w: 12,\n        h: 12,\n        x: 0,\n        y: 0,\n      },\n      initialXDomain: [DEFAULT_X_DOMAIN_START, DEFAULT_X_DOMAIN_END],\n      initialYDomain: [DEFAULT_X_DOMAIN_START, DEFAULT_X_DOMAIN_END],\n    },\n  ],\n};\n\nexport const DEFAULT_VIEW_CONFIG_DNA_ACCESSIBILITY = {\n  zoomFixed: false,\n  editable: false,\n  trackSourceServers: ['//higlass.io/api/v1'],\n  views: [\n    {\n      uid: 'details',\n      chromInfoPath: '//s3.amazonaws.com/pkerp/data/hg19/chromSizes.tsv',\n      tracks: {\n        top: [\n          {\n            uid: 'chroms',\n            type: 'horizontal-chromosome-labels',\n            server: 'https://resgen.io/api/v1',\n            tilesetUid: 'ADfY_RtsQR6oKOMyrq6qhw',\n            height: 12,\n            options: {\n              // tickPositions: 'ends',\n              color: '#999999',\n              stroke: 'white',\n              fontSize: 10,\n              fontIsLeftAligned: true,\n              showMousePosition: false,\n              mousePositionColor: '#000000',\n            },\n          },\n          {\n            uid: 'genes',\n            type: 'horizontal-gene-annotations',\n            server: 'https://resgen.io/api/v1',\n            tilesetUid: 'NCifnbrKQu6j-ohVWJLoJw',\n            height: 48,\n            options: {\n              fontSize: 9,\n              plusStrandColor: 'black',\n              minusStrandColor: 'black',\n              geneAnnotationHeight: 12,\n              geneLabelPosition: 'outside',\n              geneStrandSpacing: 2,\n            },\n          },\n          {\n            uid: 'ibd-snps',\n            type: 'point-annotation',\n            // server: 'http://localhost:9876/api/v1',\n            // tilesetUid: 'IBDCombinedset1-2variantonly-pval',\n            server: 'https://resgen.io/api/v1',\n            tilesetUid: 'VF5-RDXWTxidGMJU7FeaxA',\n            height: 132,\n            options: {\n              axisPositionHorizontal: 'right',\n              markColor: 'black',\n              markColorFocus: '#cc0078',\n              markSize: 2,\n              markOpacity: 0.33,\n              markOpacityFocus: 0.66,\n              // axisPositionHorizontal: 'right',\n              valueColumn: 7,\n              focusRegion: [\n                1680373143 + 81046453 - 25,\n                1680373143 + 81046453 + 25,\n              ],\n              name: 'IBD SNPs',\n              toolTip: {\n                name: {\n                  field: 3,\n                },\n                value: {\n                  field: 6,\n                  numDecimals: 2,\n                },\n                other: [\n                  {\n                    label: 'Post. Prob.',\n                    field: 7,\n                    numDecimals: 2,\n                  },\n                ],\n              },\n            },\n          },\n          {\n            uid: 'dna-accessibility',\n            type: 'ridge-plot',\n            // server: 'http://localhost:9876/api/v1',\n            // tilesetUid: 'test',\n            server: 'https://resgen.io/api/v1',\n            tilesetUid: 'Uz1_tEABQf-uzktblvBKSQ',\n            // height: 403,\n            height: 806,\n            options: {\n              name: 'DNA Accessibility',\n              labelPosition: 'outerBottom',\n              labelShowResolution: false,\n              labelShowAssembly: false,\n              markArea: true,\n              markColor: '#444444',\n              markResolution: 256,\n              valueScaling: 'exponential',\n              colorRange: ['#ffffff', '#000000'],\n              rowHeight: 24,\n              rowPadding: -6,\n              rowNormalization: true,\n              rowSelections: [\n                120,\n                36,\n                54,\n                20,\n                80,\n                35,\n                101,\n                49,\n                44,\n                23,\n                30,\n                66,\n                5,\n                26,\n                15,\n                105,\n                57,\n                56,\n                74,\n                84,\n                79,\n                93,\n                106,\n                107,\n                34,\n                28,\n                25,\n                55,\n                121,\n                94,\n                58,\n                69,\n                67,\n                63,\n                126,\n                71,\n                72,\n                47,\n                11,\n                46,\n                39,\n                113,\n                29,\n                60,\n                45,\n                76,\n                21,\n                103,\n                129,\n                13,\n                128,\n                90,\n                104,\n                32,\n                109,\n                27,\n                9,\n                130,\n                95,\n                86,\n                53,\n                73,\n                50,\n                48,\n                78,\n                14,\n                92,\n                124,\n                31,\n                114,\n                64,\n                88,\n                12,\n                10,\n                38,\n                68,\n                3,\n                111,\n                70,\n                22,\n                61,\n                98,\n                6,\n                123,\n                118,\n                43,\n                37,\n                65,\n                81,\n                62,\n                33,\n                1,\n                24,\n                122,\n                83,\n                75,\n                112,\n                40,\n                97,\n                16,\n                117,\n                87,\n                19,\n                125,\n                7,\n                102,\n                116,\n                77,\n                8,\n                17,\n                82,\n                115,\n                89,\n                119,\n                18,\n                4,\n                108,\n                59,\n                127,\n                91,\n                0,\n                100,\n                85,\n                110,\n                99,\n                2,\n                96,\n                51,\n                41,\n                52,\n                42,\n              ],\n            },\n          },\n        ],\n      },\n      overlays: [\n        {\n          uid: 'region-focus',\n          includes: ['chroms', 'genes', 'ibd-snps', 'dna-accessibility'],\n          options: {\n            extent: [],\n            minWidth: 3,\n            fill: '#cc0078',\n            fillOpacity: 0.05,\n            strokeWidth: 0,\n            outline: '#cc0078',\n            outlineOpacity: 0.33,\n            outlineWidth: 1,\n            outlinePos: ['left', 'right'],\n          },\n        },\n      ],\n      layout: {\n        w: 12,\n        h: 12,\n        x: 0,\n        y: 0,\n      },\n      initialXDomain: [\n        1680373143 + 81046453 - 500,\n        1680373143 + 81046454 + 500,\n      ],\n      initialYDomain: [\n        1680373143 + 81046453 - 500,\n        1680373143 + 81046454 + 500,\n      ],\n    },\n  ],\n};\n","import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { HiGlassComponent } from 'higlass';\nimport { debounce, deepClone, isString, pipe } from '@flekschas/utils';\nimport AppBar from '@material-ui/core/AppBar';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Switch from '@material-ui/core/Switch';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport SearchField from './SearchField';\n\nimport useQueryString from './use-query-string';\nimport { toAbsPosition } from './utils';\nimport {\n  DEFAULT_X_DOMAIN_START,\n  DEFAULT_X_DOMAIN_END,\n  DEFAULT_VIEW_CONFIG_ENHANCER,\n  DEFAULT_VIEW_CONFIG_DNA_ACCESSIBILITY,\n  GENE_SEARCH_URL,\n  VARIANT_SEARCH_URL,\n} from './constants';\n\nimport 'higlass/dist/hglib.css';\nimport './Viewer.css';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: 'absolute',\n    display: 'flex',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n  },\n  appBar: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    color: theme.palette.common.black,\n    backgroundColor: theme.palette.common.white,\n    boxShadow: `0 1px 0 0 ${theme.palette.grey['300']}`,\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  textInput: {\n    minWidth: '100%',\n  },\n  toolbar: theme.mixins.toolbar,\n  content: {\n    display: 'flex',\n    flexDirection: 'column',\n    flexGrow: 1,\n    padding: theme.spacing(1),\n    backgroundColor: 'white',\n  },\n  higlass: {\n    display: 'flex',\n    flexGrow: 1,\n  },\n  higlassPrimary: {\n    flexGrow: 1,\n  },\n  higlassSecondary: {\n    width: '20rem',\n  },\n}));\n\nconst chrPosUrlEncoder = (chrPos) =>\n  chrPos ? chrPos.replace(':', '.') : chrPos;\n\nconst chrPosUrlDecoder = (chrPos) =>\n  chrPos ? chrPos.replace('.', ':') : chrPos;\n\nconst getFocusGeneRegion = (viewConfig) => {\n  return viewConfig.views[0].overlays[1] &&\n    viewConfig.views[0].overlays[1].options.extent &&\n    viewConfig.views[0].overlays[1].options.extent.length\n    ? [...viewConfig.views[0].overlays[1].options.extent[0]]\n    : null;\n};\n\nconst getFocusVariantRegion = (viewConfig) =>\n  viewConfig.views[0].tracks.top[2].options.focusRegion\n    ? [...viewConfig.views[0].tracks.top[2].options.focusRegion]\n    : null;\n\nconst updateViewConfigXDomain = (newXDomainStart, newXDomainEnd, force) => (\n  viewConfig\n) => {\n  const xDomain = [...viewConfig.views[0].initialXDomain];\n  const focusGeneRegion = getFocusGeneRegion(viewConfig);\n  const focusVariantRegion = getFocusVariantRegion(viewConfig);\n\n  if (!Number.isNaN(+newXDomainStart)) {\n    xDomain[0] = newXDomainStart;\n  }\n  if (!Number.isNaN(+newXDomainEnd)) {\n    xDomain[1] = newXDomainEnd;\n  }\n\n  if (focusGeneRegion && !force) {\n    xDomain[0] = focusGeneRegion[0] - 100000;\n    xDomain[1] = focusGeneRegion[1] + 100000;\n  }\n\n  if (focusVariantRegion && !force) {\n    xDomain[0] = Math.min(xDomain[0], focusVariantRegion[0] - 100000);\n    xDomain[1] = Math.max(xDomain[1], focusVariantRegion[1] + 100000);\n  }\n\n  viewConfig.views[0].initialXDomain = xDomain;\n\n  return viewConfig;\n};\n\nconst updateViewConfigFocusGene = (gene, start, end) => (viewConfig) => {\n  const n = viewConfig.views[0].tracks.top.length;\n\n  if (gene) {\n    viewConfig.views[0].tracks.top[n - 1].options.focusGene = gene;\n    viewConfig.views[0].overlays[1].options.extent = [[start, end]];\n  } else {\n    delete viewConfig.views[0].tracks.top[n - 1].options.focusGene;\n    delete viewConfig.views[0].overlays[1].options.extent;\n  }\n\n  return viewConfig;\n};\n\nconst updateViewConfigFocusVariant = (position, trackIdxs = []) => (\n  viewConfig\n) => {\n  if (Number.isNaN(+position) || position === null) {\n    trackIdxs.forEach((trackIdx) => {\n      delete viewConfig.views[0].tracks.top[trackIdx].options.focusRegion;\n    });\n    viewConfig.views[0].overlays[0].options.extent = [];\n  } else {\n    const focusRegion = [position - 0.5, position + 0.5];\n    trackIdxs.forEach((trackIdx) => {\n      viewConfig.views[0].tracks.top[\n        trackIdx\n      ].options.focusRegion = focusRegion;\n    });\n\n    viewConfig.views[0].overlays[0].options.extent = [focusRegion];\n  }\n\n  return viewConfig;\n};\n\nconst updateViewConfigFocusStyle = (hideUnfocused) => (viewConfig) => {\n  viewConfig.views[0].tracks.top[4].options.focusStyle =\n    hideUnfocused === 'true' ? 'filtering' : 'highlighting';\n  viewConfig.views[0].tracks.top[4].options.stratification.axisNoGroupColor =\n    hideUnfocused !== 'true';\n\n  return viewConfig;\n};\n\nconst updateViewConfigVariantYScale = (yScale) => (viewConfig) => {\n  viewConfig.views[0].tracks.top[2].options.valueColumn =\n    yScale === 'pValue' ? 7 : 8;\n  // viewConfig.views[1].tracks.top[2].options.valueColumn =\n  //   yScale === 'pValue' ? 7 : 8;\n\n  return viewConfig;\n};\n\nconst updateViewConfigMatrixColoring = (coloring) => (viewConfig) => {\n  viewConfig.views[0].tracks.top[4].options.opacityEncoding = coloring;\n  return viewConfig;\n};\n\nconst Viewer = (props) => {\n  const [focusGene, setFocusGene] = useQueryString('gene', '');\n  const [focusVariant, setFocusVariant] = useQueryString(\n    'variant',\n    'rs1250566'\n  );\n  const [hideUnfocused, setHideUnfocused] = useQueryString('hide-unfocused');\n  const [matrixColoring, setMatrixColoring] = useQueryString(\n    'matrix-coloring',\n    'solid'\n  );\n  const [variantYScale, setVariantYScale] = useQueryString(\n    'varient-scale',\n    'pValue'\n  );\n  const [xDomainStart, setXDomainStart] = useQueryString(\n    'start',\n    props.chromInfo.absToChr(DEFAULT_X_DOMAIN_START).slice(0, 2).join(':'),\n    {\n      encoder: chrPosUrlEncoder,\n      decoder: chrPosUrlDecoder,\n    }\n  );\n  const [xDomainEnd, setXDomainEnd] = useQueryString(\n    'end',\n    props.chromInfo.absToChr(DEFAULT_X_DOMAIN_END).slice(0, 2).join(':'),\n    {\n      encoder: chrPosUrlEncoder,\n      decoder: chrPosUrlDecoder,\n    }\n  );\n\n  const [focusGeneOption, setFocusGeneOption] = useState(null);\n  const [focusVariantOption, setFocusVariantOption] = useState(null);\n  const higlassEnhancerApi = useRef(null);\n  const higlassDnaAccessApi = useRef(null);\n\n  // Derived State\n  const focusGeneStartPosition = useMemo(\n    () =>\n      focusGeneOption\n        ? toAbsPosition(\n            `${focusGeneOption.chr}:${focusGeneOption.txStart}`,\n            props.chromInfo\n          )\n        : null,\n    [focusGeneOption, props.chromInfo]\n  );\n\n  const focusGeneEndPosition = useMemo(\n    () =>\n      focusGeneOption\n        ? toAbsPosition(\n            `${focusGeneOption.chr}:${focusGeneOption.txEnd}`,\n            props.chromInfo\n          )\n        : null,\n    [focusGeneOption, props.chromInfo]\n  );\n\n  const focusVariantPosition = useMemo(\n    () =>\n      focusVariantOption\n        ? toAbsPosition(\n            `${focusVariantOption.chr}:${focusVariantOption.txStart}`,\n            props.chromInfo\n          )\n        : null,\n    [focusVariantOption, props.chromInfo]\n  );\n\n  const xDomainStartAbs = useMemo(\n    () => toAbsPosition(xDomainStart, props.chromInfo),\n    [xDomainStart, props.chromInfo]\n  );\n\n  const xDomainEndAbs = useMemo(\n    () => toAbsPosition(xDomainEnd, props.chromInfo),\n    [xDomainEnd, props.chromInfo]\n  );\n\n  const viewConfigEnhancer = useMemo(\n    () =>\n      pipe(\n        updateViewConfigFocusGene(\n          focusGeneOption ? focusGeneOption.geneName : null,\n          focusGeneStartPosition,\n          focusGeneEndPosition\n        ),\n        updateViewConfigFocusVariant(focusVariantPosition, [2, 4]),\n        updateViewConfigFocusStyle(hideUnfocused),\n        updateViewConfigMatrixColoring(matrixColoring),\n        updateViewConfigVariantYScale(variantYScale),\n        updateViewConfigXDomain(xDomainStartAbs, xDomainEndAbs)\n      )(deepClone(DEFAULT_VIEW_CONFIG_ENHANCER)),\n    [\n      // `xDomainStartAbs` and `xDomainEndAbs` are ommitted on purpose to avoid\n      // updating the view-config on every pan or zoom event.\n      focusGeneOption,\n      focusGeneStartPosition,\n      focusGeneEndPosition,\n      focusVariantPosition,\n      hideUnfocused,\n      matrixColoring,\n      variantYScale,\n    ]\n  );\n\n  const viewConfigDnaAccessibility = useMemo(\n    () =>\n      pipe(\n        updateViewConfigFocusVariant(focusVariantPosition, [2]),\n        updateViewConfigXDomain(\n          focusVariantPosition ? focusVariantPosition - 2500 : xDomainStartAbs,\n          focusVariantPosition ? focusVariantPosition + 2500 : xDomainEndAbs,\n          true\n        )\n      )(deepClone(DEFAULT_VIEW_CONFIG_DNA_ACCESSIBILITY)),\n    [\n      // `xDomainStartAbs` and `xDomainEndAbs` are ommitted on purpose to avoid\n      // updating the view-config on every pan or zoom event.\n      focusVariantPosition,\n      props.chromInfo,\n    ]\n  );\n\n  const numericalXDomainStart = useMemo(\n    () =>\n      isString(xDomainStart) && xDomainStart.indexOf(':') >= 0\n        ? props.chromInfo.chrToAbs([\n            xDomainStart.split(':')[0],\n            +xDomainStart.split(':')[1],\n          ])\n        : +xDomainStart,\n    [xDomainStart, props.chromInfo]\n  );\n\n  const numericalXDomainEnd = useMemo(\n    () =>\n      isString(xDomainEnd) && xDomainEnd.indexOf(':') >= 0\n        ? props.chromInfo.chrToAbs([\n            xDomainEnd.split(':')[0],\n            +xDomainEnd.split(':')[1],\n          ])\n        : +xDomainEnd,\n    [xDomainEnd, props.chromInfo]\n  );\n\n  const clearFocusGene = () => {\n    setFocusGene('');\n    setFocusGeneOption(null);\n  };\n\n  const focusGeneChangeHandler = (newValue) => {\n    if (newValue) {\n      setFocusGene(newValue.geneName);\n      setFocusGeneOption(newValue);\n    } else {\n      clearFocusGene();\n    }\n  };\n\n  const clearFocusVariant = () => {\n    setFocusVariant('');\n    setFocusVariantOption(null);\n  };\n\n  const focusVariantChangeHandler = (newValue) => {\n    if (newValue) {\n      setFocusVariant(newValue.geneName);\n      setFocusVariantOption(newValue);\n    } else {\n      clearFocusVariant();\n    }\n  };\n\n  const hideUnfocusedChangeHandler = (event) => {\n    setHideUnfocused(event.target.checked.toString());\n  };\n\n  const variantYScaleChangeHandler = (event) => {\n    setVariantYScale(event.target.value);\n  };\n\n  const matrixColoringChangeHandler = (event) => {\n    setMatrixColoring(event.target.value);\n  };\n\n  const xDomainStartChangeHandler = (event) => {\n    setXDomainStart(event.target.value);\n  };\n\n  const xDomainEndChangeHandler = (event) => {\n    setXDomainEnd(event.target.value);\n  };\n\n  // HiGlass Functions\n  const higlassClickHandler = (event) => {\n    if (event.type === 'gene-annotation') {\n      setFocusGene(event.payload.name);\n      setFocusGeneOption({\n        chr: event.payload.fields[0],\n        txStart: event.payload.fields[1],\n        txEnd: event.payload.fields[2],\n        geneName: event.payload.name,\n      });\n    } else if (event.type === 'snp') {\n      setFocusVariant(event.payload.name);\n      setFocusVariantOption({\n        chr: event.payload.fields[0],\n        txStart: event.payload.fields[1],\n        txEnd: event.payload.fields[2],\n        geneName: event.payload.name,\n        score: event.payload.importance,\n      });\n    }\n  };\n\n  const higlassLocationChangeHandler = (event) => {\n    const [newXDomainStart, newXDomainEnd] = event.xDomain.map((absPos) =>\n      props.chromInfo.absToChr(absPos).slice(0, 2).join(':')\n    );\n    setXDomainStart(newXDomainStart);\n    setXDomainEnd(newXDomainEnd);\n  };\n  const higlassLocationChangeHandlerDb = debounce(\n    higlassLocationChangeHandler,\n    250\n  );\n\n  const higlassEnhancerZoomToXDomain = (event) => {\n    if (!higlassEnhancerApi.current) return;\n\n    const newViewConfig = deepClone(viewConfigEnhancer);\n\n    const xDomain = [...newViewConfig.views[0].initialXDomain];\n\n    if (!Number.isNaN(+numericalXDomainStart)) {\n      xDomain[0] = numericalXDomainStart;\n    }\n    if (!Number.isNaN(+numericalXDomainEnd)) {\n      xDomain[1] = numericalXDomainEnd;\n    }\n\n    higlassEnhancerApi.current.zoomTo(\n      'context',\n      xDomain[0],\n      xDomain[1],\n      xDomain[0],\n      xDomain[1],\n      2000\n    );\n  };\n\n  // Initializations\n  useEffect(() => {\n    (async () => {\n      if (focusGene && !focusGeneOption) {\n        const r = await fetch(`${GENE_SEARCH_URL}&ac=${focusGene}`);\n        const results = await r.json();\n        focusGeneChangeHandler(results[0]);\n      }\n      if (focusVariant && !focusVariantOption) {\n        const r = await fetch(`${VARIANT_SEARCH_URL}&ac=${focusVariant}`);\n        const results = await r.json();\n        focusVariantChangeHandler(results[0]);\n      }\n    })();\n  }, []);\n\n  const higlassEnhancerInitHandler = useCallback((higlassInstance) => {\n    if (higlassInstance !== null) {\n      higlassEnhancerApi.current = higlassInstance.api;\n      higlassInstance.api.on('click', higlassClickHandler);\n      higlassInstance.api.on(\n        'location',\n        higlassLocationChangeHandlerDb,\n        'context'\n      );\n    }\n  }, []);\n\n  const higlassDnaAccessibilityInitHandler = useCallback((higlassInstance) => {\n    if (higlassInstance !== null) {\n      higlassDnaAccessApi.current = higlassInstance.api;\n    }\n  }, []);\n\n  // Run on every render\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <Typography variant=\"h6\" noWrap>\n            Enhancer-Promoter Vis\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"permanent\"\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n        anchor=\"left\"\n      >\n        <div className={classes.toolbar} />\n        <Divider />\n        <Box m={1}>\n          <Box m={0}>\n            <FormControl variant=\"outlined\" margin=\"dense\" fullWidth>\n              <InputLabel htmlFor=\"x-domain-start\">Region Start</InputLabel>\n              <OutlinedInput\n                id=\"x-domain-start\"\n                label=\"Region Start\"\n                onChange={xDomainStartChangeHandler}\n                value={xDomainStart}\n              />\n            </FormControl>\n          </Box>\n          <Box m={0}>\n            <FormControl variant=\"outlined\" margin=\"dense\" fullWidth>\n              <InputLabel htmlFor=\"x-domain-end\">Region End</InputLabel>\n              <OutlinedInput\n                id=\"x-domain-end\"\n                label=\"Region End\"\n                onChange={xDomainEndChangeHandler}\n                value={xDomainEnd}\n              />\n            </FormControl>\n          </Box>\n          <Box m={0}>\n            <Button\n              variant=\"contained\"\n              margin=\"dense\"\n              onClick={higlassEnhancerZoomToXDomain}\n              fullWidth\n              disableElevation\n            >\n              Go\n            </Button>\n          </Box>\n        </Box>\n        <Divider />\n        <Box m={1}>\n          <Box m={0}>\n            <FormControl variant=\"outlined\" margin=\"dense\" fullWidth>\n              <SearchField\n                label=\"Focus Gene\"\n                searchUrl={GENE_SEARCH_URL}\n                onChange={focusGeneChangeHandler}\n                value={focusGeneOption}\n                fullWidth\n              />\n            </FormControl>\n          </Box>\n          <Box m={0}>\n            <FormControl variant=\"outlined\" margin=\"dense\" fullWidth>\n              <SearchField\n                label=\"Focus Variant\"\n                searchUrl={VARIANT_SEARCH_URL}\n                onChange={focusVariantChangeHandler}\n                value={focusVariantOption}\n                fullWidth\n              />\n            </FormControl>\n          </Box>\n        </Box>\n        <Box m={1}>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={hideUnfocused === 'true'}\n                onChange={hideUnfocusedChangeHandler}\n                name=\"hideUnfocused\"\n              />\n            }\n            label=\"Hide unfocused\"\n          />\n        </Box>\n        <Box m={1}>\n          <FormControl component=\"fieldset\">\n            <FormLabel component=\"legend\">Variant y-scale</FormLabel>\n            <RadioGroup\n              aria-label=\"variantYScale\"\n              name=\"variantYScale\"\n              value={variantYScale}\n              onChange={variantYScaleChangeHandler}\n            >\n              <FormControlLabel\n                label=\"p-value\"\n                control={<Radio size=\"small\" />}\n                value=\"pValue\"\n              />\n              <FormControlLabel\n                label=\"Posterior probability\"\n                control={<Radio size=\"small\" />}\n                value=\"posteriorProbability\"\n              />\n            </RadioGroup>\n          </FormControl>\n        </Box>\n        <Box m={1}>\n          <FormControl component=\"fieldset\">\n            <FormLabel component=\"legend\">Matrix coloring</FormLabel>\n            <RadioGroup\n              aria-label=\"matrixColoring\"\n              name=\"matrixColoring\"\n              value={matrixColoring}\n              onChange={matrixColoringChangeHandler}\n            >\n              <FormControlLabel\n                label=\"Solid\"\n                control={<Radio size=\"small\" />}\n                value=\"solid\"\n              />\n              <FormControlLabel\n                label=\"Number of predictions\"\n                control={<Radio size=\"small\" />}\n                value=\"frequency\"\n              />\n              <FormControlLabel\n                label=\"Highest prediction score\"\n                control={<Radio size=\"small\" />}\n                value=\"highestImportance\"\n              />\n              <FormControlLabel\n                label=\"Prediction score of the closest TSS interaction\"\n                control={<Radio size=\"small\" />}\n                value=\"closestImportance\"\n              />\n            </RadioGroup>\n          </FormControl>\n        </Box>\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <div className={classes.higlass}>\n          <div className={classes.higlassPrimary}>\n            <HiGlassComponent\n              ref={higlassEnhancerInitHandler}\n              viewConfig={viewConfigEnhancer}\n              options={{\n                sizeMode: 'bounded',\n              }}\n            />\n          </div>\n          <div className={classes.higlassSecondary}>\n            <HiGlassComponent\n              ref={higlassDnaAccessibilityInitHandler}\n              viewConfig={viewConfigDnaAccessibility}\n              options={{\n                sizeMode: 'scroll',\n                pixelPreciseMarginPadding: true,\n                containerPaddingX: 0,\n                containerPaddingY: 0,\n                viewMarginTop: 0,\n                viewMarginBottom: 0,\n                viewMarginLeft: 0,\n                viewMarginRight: 0,\n                viewPaddingTop: 0,\n                viewPaddingBottom: 0,\n                viewPaddingLeft: 0,\n                viewPaddingRight: 16,\n              }}\n            />\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default Viewer;\n","import React from 'react';\n\nconst withEither = (ifEitherFn, EitherComponent) => (Component) => (props) =>\n  ifEitherFn(props) ? <EitherComponent {...props} /> : <Component {...props} />;\n\nexport default withEither;\n","import React, { useState, useEffect } from 'react';\nimport { ChromosomeInfo } from 'higlass';\nimport { pipe } from '@flekschas/utils';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nimport AppInitializing from './AppInitializing';\nimport AppError from './AppError';\nimport Viewer from './Viewer';\nimport withEither from './with-either';\n\nimport './App.css';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#000',\n    },\n    secondary: {\n      main: '#000',\n    },\n  },\n});\n\nconst App = () => {\n  const [chromInfo, setChromInfo] = useState(null);\n\n  useEffect(() => {\n    ChromosomeInfo('https://s3.amazonaws.com/pkerp/data/hg19/chromSizes.tsv')\n      .then((_chromInfo) => {\n        if (_chromInfo.totalLength === undefined) {\n          // Monkey patch: chrom sizes were actually unavailable...\n          // Also see https://github.com/higlass/higlass/issues/957\n          setChromInfo(false);\n        } else {\n          setChromInfo(_chromInfo);\n        }\n      })\n      .catch(() => {\n        setChromInfo(false);\n      });\n  }, []);\n\n  const AppViewer = pipe(\n    withEither(() => chromInfo === null, AppInitializing),\n    withEither(() => chromInfo === false, AppError)\n  )(Viewer);\n\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n        <AppViewer chromInfo={chromInfo} />\n      </ThemeProvider>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","function createAnnotationOverlayMetaTrack(HGC, ...args) {\n  if (!new.target) {\n    throw new Error(\n      'Uncaught TypeError: Class constructor cannot be invoked without \"new\"'\n    );\n  }\n\n  // Services\n  const { pubSub } = HGC.services;\n\n  class AnnotationOverlayMetaTrack {\n    constructor(context, options) {\n      const { definition, getTrackObject, onNewTilesLoaded: animate } = context;\n\n      this.animate = animate;\n      this.options = options;\n\n      this.overlaysTrack = getTrackObject(definition.overlaysTrack);\n\n      if (!this.overlaysTrack) {\n        console.warn(\n          `Overlays track (uid: ${definition.overlaysTrack}) not found`\n        );\n        return;\n      }\n\n      this.annotationTrackIds = new Set();\n      this.annotationTracks = definition.options.annotationTracks\n        .map((uid) => {\n          const track = getTrackObject(uid);\n\n          if (!track) {\n            console.warn(`Child track (uid: ${uid}) not found`);\n          } else {\n            this.annotationTrackIds.add(track.uuid);\n          }\n\n          return track;\n        })\n        .filter((track) => track);\n\n      this.annotationDrawnHandlerBound = this.annotationDrawnHandler.bind(this);\n\n      this.drawnAnnotations = new Map();\n      this.tracksDrawingTiles = new Set();\n\n      this.pubSubs = [];\n\n      // Augment annotation tracks\n      this.annotationTracks.forEach((track) => {\n        track.subscribe('annotationDrawn', this.annotationDrawnHandlerBound);\n      });\n\n      this.pubSubs.push(\n        pubSub.subscribe(\n          'TiledPixiTrack.tilesDrawnEnd',\n          this.tilesDrawnEndHandler.bind(this)\n        )\n      );\n    }\n\n    /**\n     * Handles annotation drawn events\n     *\n     * @param  {String}  event.uid  UID of the view that triggered the event.\n     * @param  {Array}  event.viewPos  View position (i.e., [x, y, width, height])\n     *   of the drawn annotation on the screen.\n     * @param  {Array}  event.dataPos  Data position of the drawn annotation. For\n     *   example base pairs (Hi-C), or pixels (gigapixel images), or lng-lat\n     *   (geo json).\n     */\n    annotationDrawnHandler({ xStartAbs, xEndAbs, data }) {\n      this.drawnAnnotations.set(data.uid, [xStartAbs, xEndAbs]);\n    }\n\n    /**\n     * Remove this track.\n     */\n    remove() {\n      this.pubSubs.forEach(pubSub.unsubscribe);\n      this.pubSubs = undefined;\n      this.annotationTracks.forEach((track) => {\n        track.unsubscribe('annotationDrawn', this.annotationDrawnHandlerBound);\n      });\n    }\n\n    /**\n     * Callback function passed into the annotation tracks to trigger tree\n     * building of the spatial RTree.\n     *\n     * @description\n     * Simple counter that call `this.buildTree()` once the number of annotation\n     * tracks is reached.\n     */\n    tilesDrawnEndHandler({ uuid }) {\n      if (!this.annotationTrackIds.has(uuid)) return;\n\n      this.tracksDrawingTiles.add(uuid);\n\n      if (!(this.tracksDrawingTiles.size % this.annotationTracks.length)) {\n        this.updateOverlays();\n      }\n    }\n\n    updateOverlays() {\n      this.overlaysTrack.options.extent = Array.from(\n        this.drawnAnnotations.values()\n      );\n      this.overlaysTrack.draw();\n      this.tracksDrawingTiles.clear();\n    }\n  }\n\n  return new AnnotationOverlayMetaTrack(...args);\n}\n\ncreateAnnotationOverlayMetaTrack.config = {\n  type: 'annotation-overlay',\n  availableOptions: ['annotationTracks'],\n  defaultOptions: {\n    annotationTracks: [],\n  },\n};\n\nexport default createAnnotationOverlayMetaTrack;\n","import {\n  identity,\n  maxNan,\n  maxVector,\n  meanNan,\n  minNan,\n  sumNan,\n} from '@flekschas/utils';\n\nconst FLOAT_BYTES = Float32Array.BYTES_PER_ELEMENT;\n\nconst VS = `precision mediump float;\n\n  attribute vec2 aPrevPosition;\n  attribute vec2 aCurrPosition;\n  attribute vec2 aNextPosition;\n  attribute float aOffsetSign;\n  attribute float aColorIndex;\n\n  uniform sampler2D uAreaColorTex;\n  uniform float uAreaColorTexRes;\n  uniform mat3 projectionMatrix;\n  uniform mat3 translationMatrix;\n\n  uniform vec4 uLineColor;\n  uniform vec4 uNaNColor;\n  uniform float uWidth;\n  uniform int uMiter;\n\n  varying vec4 vColor;\n\n  void main(void)\n  {\n    mat3 model = projectionMatrix * translationMatrix;\n\n    if (aColorIndex <= -0.5) {\n      // Render line\n      vColor = vec4(uLineColor.rgb, 1.0);\n\n      vec4 prevGlPos = vec4((model * vec3(aPrevPosition, 1.0)).xy, 0.0, 1.0);\n      vec4 currGlPos = vec4((model * vec3(aCurrPosition, 1.0)).xy, 0.0, 1.0);\n      vec4 nextGlPos = vec4((model * vec3(aNextPosition, 1.0)).xy, 0.0, 1.0);\n\n      // Calculate the direction\n      vec2 dir = vec2(0.0);\n\n      if (currGlPos == prevGlPos) {\n        // start point uses (next - current)\n        dir = normalize(nextGlPos.xy - currGlPos.xy);\n      }\n      else if (currGlPos == nextGlPos) {\n        // end point uses (current - previous)\n        dir = normalize(currGlPos.xy - prevGlPos.xy);\n      }\n      else {\n        // somewhere in middle, needs a join:\n        // get directions from (C - B) and (B - A)\n        vec2 dirA = normalize((currGlPos.xy - prevGlPos.xy));\n        if (uMiter == 1) {\n          vec2 dirB = normalize((nextGlPos.xy - currGlPos.xy));\n          // now compute the miter join normal and length\n          vec2 tangent = normalize(dirA + dirB);\n          vec2 perp = vec2(-dirA.y, dirA.x);\n          vec2 miter = vec2(-tangent.y, tangent.x);\n          dir = tangent;\n        } else {\n          dir = dirA;\n        }\n      }\n\n      float width = (projectionMatrix * vec3(uWidth, 0.0, 0.0)).x / 2.0;\n\n      vec2 normal = vec2(-dir.y, dir.x) * width;\n      // normal.x /= aspectRatio;\n      vec4 offset = vec4(normal * aOffsetSign, 0.0, 0.0);\n      gl_Position = currGlPos + offset;\n    } else {\n      // Render area\n      float colorRowIndex = aColorIndex / uAreaColorTexRes;\n\n      vec2 colorTexIndex = vec2(\n        (aColorIndex / uAreaColorTexRes) - colorRowIndex,\n        colorRowIndex / uAreaColorTexRes\n      );\n      vColor = texture2D(uAreaColorTex, colorTexIndex);\n\n      gl_Position = vec4((model * vec3(aCurrPosition, 1.0)).xy, 0.0, 1.0);\n    }\n  }\n`;\n\nconst FS = `precision mediump float;\n\n  varying vec4 vColor;\n\n  void main() {\n    gl_FragColor = vColor;\n  }\n`;\n\nconst TILE_SIZE = 256;\n\nconst COLORMAP_GRAYS = Array(127)\n  .fill()\n  .map((x, i) => {\n    const gray = (1 - i / 127) * 0.5 + 0.5;\n    return [gray, gray, gray, 1];\n  });\n\nconst getMax = (fetchedTiles) =>\n  Object.values(fetchedTiles).reduce(\n    (maxValue, tile) => Math.max(maxValue, tile.tileData.maxNonZero),\n    -Infinity\n  );\n\nconst getNumRows = (fetchedTiles) =>\n  Object.values(fetchedTiles)[0].tileData.coarseShape[0];\n\nconst getRowMaxs = (fetchedTiles) =>\n  maxVector(\n    Object.values(fetchedTiles).map((tile) => tile.tileData.maxValueByRow)\n  );\n\nconst scaleGraphics = (graphics, xScale, drawnAtScale) => {\n  const tileK =\n    (drawnAtScale.domain()[1] - drawnAtScale.domain()[0]) /\n    (xScale.domain()[1] - xScale.domain()[0]);\n  const newRange = xScale.domain().map(drawnAtScale);\n\n  const posOffset = newRange[0];\n  graphics.scale.x = tileK;\n  graphics.position.x = -posOffset * tileK;\n};\n\nconst getNumPointsPerRow = (numRows, positions, markArea) =>\n  positions.length / numRows / 4 / (1 + markArea) - 2;\n\nconst createRidgePlotTrack = function createRidgePlotTrack(HGC, ...args) {\n  if (!new.target) {\n    throw new Error(\n      'Uncaught TypeError: Class constructor cannot be invoked without \"new\"'\n    );\n  }\n\n  const { PIXI } = HGC.libraries;\n  const { format } = HGC.libraries.d3Format;\n  const { scaleLinear } = HGC.libraries.d3Scale;\n  const { tileProxy } = HGC.services;\n\n  const createColorTexture = (colors) => {\n    const colorTexRes = Math.max(2, Math.ceil(Math.sqrt(colors.length)));\n    const rgba = new Float32Array(colorTexRes ** 2 * 4);\n    colors.forEach((color, i) => {\n      // eslint-disable-next-line prefer-destructuring\n      rgba[i * 4] = color[0]; // r\n      // eslint-disable-next-line prefer-destructuring\n      rgba[i * 4 + 1] = color[1]; // g\n      // eslint-disable-next-line prefer-destructuring\n      rgba[i * 4 + 2] = color[2]; // b\n      // eslint-disable-next-line prefer-destructuring\n      rgba[i * 4 + 3] = color[3]; // a\n    });\n\n    return [\n      PIXI.Texture.fromBuffer(rgba, colorTexRes, colorTexRes),\n      colorTexRes,\n    ];\n  };\n\n  class RidgePlotTrack extends HGC.tracks.HorizontalLine1DPixiTrack {\n    constructor(context, options) {\n      super(context, options);\n      this.updateOptions();\n    }\n\n    initTile(tile) {\n      this.coarsifyTileValues(tile);\n    }\n\n    destroyTile() {}\n\n    binsPerTile() {\n      return this.tilesetInfo.bins_per_dimension || TILE_SIZE;\n    }\n\n    /**\n     * From HeatmapTiledPixiTrack\n     */\n    getTilePosAndDimensions(zoomLevel, tilePos, binsPerTileIn) {\n      const binsPerTile = binsPerTileIn || this.binsPerTile();\n\n      if (this.tilesetInfo.resolutions) {\n        const sortedResolutions = this.tilesetInfo.resolutions\n          .map((x) => +x)\n          .sort((a, b) => b - a);\n\n        const chosenResolution = sortedResolutions[zoomLevel];\n\n        const tileWidth = chosenResolution * binsPerTile;\n        const tileHeight = tileWidth;\n\n        const tileX = chosenResolution * binsPerTile * tilePos[0];\n        const tileY = chosenResolution * binsPerTile * tilePos[1];\n\n        return {\n          tileX,\n          tileY,\n          tileWidth,\n          tileHeight,\n        };\n      }\n\n      const xTilePos = tilePos[0];\n      const yTilePos = tilePos[1];\n\n      const minX = this.tilesetInfo.min_pos[0];\n      const minY = this.options.reverseYAxis\n        ? -this.tilesetInfo.max_pos[1]\n        : this.tilesetInfo.min_pos[1];\n\n      const tileWidth = this.tilesetInfo.max_width / 2 ** zoomLevel;\n      const tileHeight = this.tilesetInfo.max_width / 2 ** zoomLevel;\n\n      const tileX = minX + xTilePos * tileWidth;\n      const tileY = minY + yTilePos * tileHeight;\n\n      return {\n        tileX,\n        tileY,\n        tileWidth,\n        tileHeight,\n      };\n    }\n\n    updateOptions() {\n      this.selectRowsAggregationMode =\n        this.options.selectRowsAggregationMode || 'mean';\n\n      switch (this.selectRowsAggregationMode) {\n        case 'max':\n          this.selectRowsAggregationFn = maxNan;\n          break;\n\n        case 'min':\n          this.selectRowsAggregationFn = minNan;\n          break;\n\n        case 'sum':\n          this.selectRowsAggregationFn = sumNan;\n          break;\n\n        case 'mean':\n        default:\n          this.selectRowsAggregationFn = meanNan;\n          break;\n      }\n\n      this.markArea = !!this.options.markArea;\n\n      this.markAreaColor = 'grays';\n\n      this.markColor = HGC.utils.colorToHex(this.options.markColor || 'black');\n\n      this.markColorRgbNorm = this.options.markColor\n        ? HGC.utils\n            .colorToRgba(this.options.markColor)\n            .slice(0, 3)\n            .map((x) => Math.min(1, Math.max(0, x / 255)))\n        : [0, 0, 0];\n\n      [this.markColorTex, this.markColorTexRes] = createColorTexture([\n        ...COLORMAP_GRAYS,\n      ]);\n\n      this.markNumColors = COLORMAP_GRAYS.length;\n\n      this.markOpacity = Number.isNaN(+this.options.markOpacity)\n        ? 1\n        : Math.min(1, Math.max(0, +this.options.markOpacity));\n\n      this.markSize = this.options.markSize || 2;\n\n      // Number of line segments\n      const oldMarkResolution = this.markResolution;\n      this.markResolution = Math.max(\n        1,\n        Math.min(TILE_SIZE, this.options.markResolution || TILE_SIZE / 4)\n      );\n      // Given 100 (rows) x 256 (tile size). At a resolution of 1 we need:\n      // 100 x (256 / 4) x 4 = 25,600 vertices\n\n      const oldRowHeight = this.rowHeight;\n      this.rowHeight = Number.isNaN(+this.options.rowHeight)\n        ? 'auto'\n        : +this.options.rowHeight;\n\n      const oldRowPadding = this.rowPadding;\n      this.rowPadding = this.options.rowPadding || 0;\n\n      const oldRowNormalization = this.rowNormalization;\n      this.rowNormalization = this.options.rowNormalization || false;\n\n      const oldRowSelections = this.rowSelections;\n      this.rowSelections =\n        this.options.rowSelections || this.rowSelections || [];\n\n      if (\n        oldMarkResolution !== this.markResolution ||\n        oldRowSelections !== this.rowSelections\n      ) {\n        this.updateTiles();\n      }\n\n      if (\n        oldRowHeight !== this.rowHeight ||\n        oldRowPadding !== this.rowPadding ||\n        oldRowNormalization !== this.rowNormalization\n      ) {\n        this.updateScales();\n      }\n    }\n\n    rerender(newOptions) {\n      this.options = newOptions;\n      this.updateOptions();\n      this.updateExistingGraphics();\n    }\n\n    hasFetchedTiles() {\n      return Object.values(this.fetchedTiles).length;\n    }\n\n    coarsifyTileValues(tile) {\n      const { tileX, tileWidth } = this.getTilePosAndDimensions(\n        tile.tileData.zoomLevel,\n        tile.tileData.tilePos\n      );\n      const [numRows] = tile.tileData.shape;\n      const binSizePx = Math.floor(TILE_SIZE / this.markResolution);\n      const binSizeBp = tileWidth / this.markResolution;\n      const binSizeBpHalf = binSizeBp / 2;\n\n      // Determine bin boundaries\n      tile.tileData.binXPos = Array(this.markResolution).fill();\n      for (let i = 0; i <= this.markResolution; i++) {\n        tile.tileData.binXPos[i] = tileX + binSizeBp * i + binSizeBpHalf;\n      }\n\n      // 1. Coarsify the dense matrix according to `this.markResolution`\n      tile.tileData.valuesByRow = Array(numRows)\n        .fill()\n        .map(() => []);\n      tile.tileData.maxValueByRow = Array(numRows).fill(-Infinity);\n\n      for (let i = 0; i < numRows; i++) {\n        for (let j = 0; j < TILE_SIZE; j += binSizePx) {\n          const meanValue = meanNan(\n            tile.tileData.dense.subarray(\n              i * TILE_SIZE + j,\n              i * TILE_SIZE + j + binSizePx\n            )\n          );\n          tile.tileData.valuesByRow[i].push(meanValue);\n          tile.tileData.maxValueByRow[i] =\n            meanValue > tile.tileData.maxValueByRow[i]\n              ? meanValue\n              : tile.tileData.maxValueByRow[i];\n        }\n      }\n\n      // 2. Sort rows\n      if (this.rowSelections.length) {\n        tile.tileData.valuesByRow = this.rowSelections\n          .map((rowIdx) => tile.tileData.valuesByRow[rowIdx])\n          .filter(identity);\n        tile.tileData.maxValueByRow = this.rowSelections\n          .map((rowIdx) => tile.tileData.maxValueByRow[rowIdx])\n          .filter(identity);\n      }\n\n      // 3. Set out shape\n      tile.tileData.coarseShape = [\n        tile.tileData.valuesByRow.length,\n        this.markResolution,\n      ];\n    }\n\n    updateTiles() {\n      Object.values(this.fetchedTiles).forEach(\n        this.coarsifyTileValues.bind(this)\n      );\n    }\n\n    updateScales() {\n      const fetchedTiles = Object.values(this.fetchedTiles);\n\n      if (!fetchedTiles.length) return;\n\n      const [, visibleTrackHeight] = this.dimensions;\n      const numRows = getNumRows(fetchedTiles);\n\n      const rowHeight =\n        this.rowHeight === 'auto'\n          ? Math.floor(visibleTrackHeight / numRows)\n          : this.rowHeight;\n\n      const actualTrackHeight =\n        this.rowHeight === 'auto'\n          ? visibleTrackHeight\n          : rowHeight * numRows + this.rowPadding * (numRows - 1);\n\n      const globalMax = getMax(this.fetchedTiles);\n\n      this.valueScale = scaleLinear()\n        .domain([0, globalMax])\n        .range([rowHeight, 0]);\n      this.colorIndexScale = scaleLinear()\n        .domain([0, globalMax])\n        .range([0, this.markNumColors])\n        .clamp(true);\n\n      if (this.rowNormalization) {\n        const rowMaxs = getRowMaxs(this.fetchedTiles);\n        this.rowValueScales = {};\n        this.rowColorIndexScales = {};\n        for (let i = 0; i < numRows; i++) {\n          this.rowValueScales[i] = scaleLinear()\n            .domain([0, rowMaxs[i]])\n            .range([rowHeight, 0]);\n          this.rowColorIndexScales[i] = scaleLinear()\n            .domain([0, rowMaxs[i]])\n            .range([0, this.markNumColors])\n            .clamp(true);\n        }\n        this.valueScaleByRow = (value, row) =>\n          Number.isNaN(value) ? rowHeight : this.rowValueScales[row](value);\n        this.colorIndexScaleByRow = (value, row) =>\n          Number.isNaN(value) ? -2 : this.rowColorIndexScales[row](value);\n      } else {\n        this.valueScaleByRow = (value, row) =>\n          Number.isNaN(value) ? rowHeight : this.valueScale(value);\n        this.colorIndexScaleByRow = (value, row) =>\n          Number.isNaN(value) ? -2 : this.colorIndexScale(value);\n      }\n\n      this.rowScale = scaleLinear()\n        .domain([0, numRows])\n        .range([0, actualTrackHeight]);\n    }\n\n    tilesToData(tiles, { markArea, maxRows = Infinity, rowHeight } = {}) {\n      if (!tiles.length) return [];\n\n      const numRows = Math.min(maxRows, getNumRows(tiles));\n\n      const positionsByRow = Array(numRows)\n        .fill()\n        .map(() => []);\n      const colorIndicesByRow = Array(numRows)\n        .fill()\n        .map(() => []);\n      const offsetSignsByRow = Array(numRows)\n        .fill()\n        .map(() => []);\n\n      tiles.forEach((tile) => {\n        tile.tileData.valuesByRow.forEach((values, i) => {\n          if (i >= maxRows) return;\n          values.forEach((value, j) => {\n            const x = this._xScale(tile.tileData.binXPos[j]);\n            const yStart = this.rowScale(i);\n            const y = yStart + this.valueScaleByRow(value, i);\n            // We're duplicating the the point as for every point on the line we\n            // need two x,y vertices to render triangles.\n            positionsByRow[i].push(x, y, x, y);\n            colorIndicesByRow[i].push(-1, -1); // -1 refers to the line color\n            offsetSignsByRow[i].push(1, -1);\n\n            if (markArea) {\n              positionsByRow[i].push(x, y, x, yStart + rowHeight);\n              colorIndicesByRow[i].push(this.colorIndexScaleByRow(value, i), 0);\n              offsetSignsByRow[i].push(0, 0);\n            }\n          });\n        });\n      });\n\n      const size2d = markArea ? 8 : 4;\n      const size1d = markArea ? 4 : 2;\n\n      // For each row, duplicate the first and last point\n      for (let i = 0; i < numRows; i++) {\n        // Add first point pair to the beginning of the array\n        positionsByRow[i].unshift(...positionsByRow[i].slice(0, size2d));\n\n        // The very first duplicated point positions do not matter as\n        // we offset the buffer reading. Subsequent dupliations need to be\n        // taken into account though.\n        if (i > 0) {\n          colorIndicesByRow[i].unshift(\n            ...colorIndicesByRow[i].slice(0, size1d)\n          );\n          offsetSignsByRow[i].unshift(...offsetSignsByRow[i].slice(0, size1d));\n        }\n\n        // Add last point pair to the end of the array\n        positionsByRow[i].push(...positionsByRow[i].slice(-size2d));\n        colorIndicesByRow[i].push(...colorIndicesByRow[i].slice(-size1d));\n        offsetSignsByRow[i].push(...offsetSignsByRow[i].slice(-size1d));\n      }\n\n      return [\n        new Float32Array(positionsByRow.flatMap(identity)),\n        new Float32Array(colorIndicesByRow.flatMap(identity)),\n        new Float32Array(offsetSignsByRow.flatMap(identity)),\n      ];\n    }\n\n    toLineIndices(numRows, numPointsPerRow, markArea) {\n      const verticesPerLine = markArea ? 12 : 6;\n      const verticesPerPoint = markArea ? 4 : 2;\n      const indices = new Uint32Array(\n        (numPointsPerRow - 1) * numRows * verticesPerLine\n      );\n      let k = 0;\n\n      if (markArea) {\n        // Draw a line and area\n        for (let i = 0; i < numRows; i++) {\n          for (let j = 0; j < numPointsPerRow - 1; j++) {\n            // The `+2` comes from the fact that for each row of points we\n            // duplicate the first and last point.\n            const pointOffset = i * (numPointsPerRow + 2) * verticesPerPoint;\n            const p1a = pointOffset + j * verticesPerPoint;\n            const p1b = p1a + 1;\n            const p1c = p1a + 2;\n            const p1d = p1a + 3;\n            const p2a = p1a + 4;\n            const p2b = p1a + 5;\n            const p2c = p1a + 6;\n            const p2d = p1a + 7;\n\n            const indexOffset = k * verticesPerLine;\n            // Area\n            indices[indexOffset] = p1c;\n            indices[indexOffset + 1] = p1d;\n            indices[indexOffset + 2] = p2c;\n            indices[indexOffset + 3] = p2c;\n            indices[indexOffset + 4] = p1d;\n            indices[indexOffset + 5] = p2d;\n            // Line\n            indices[indexOffset + 6] = p1a;\n            indices[indexOffset + 7] = p1b;\n            indices[indexOffset + 8] = p2a;\n            indices[indexOffset + 9] = p2a;\n            indices[indexOffset + 10] = p1b;\n            indices[indexOffset + 11] = p2b;\n\n            k++;\n          }\n        }\n      } else {\n        // Just draw a line\n        for (let i = 0; i < numRows; i++) {\n          for (let j = 0; j < numPointsPerRow - 1; j++) {\n            // The `+2` comes from the fact that for each row of points we\n            // duplicate the first and last point.\n            const pointOffset = i * (numPointsPerRow + 2) * verticesPerPoint;\n            const p1a = pointOffset + j * verticesPerPoint;\n            const p1b = p1a + 1;\n            const p2a = p1a + 2;\n            const p2b = p1a + 3;\n\n            const indexOffset = k * verticesPerLine;\n            indices[indexOffset] = p1a;\n            indices[indexOffset + 1] = p1b;\n            indices[indexOffset + 2] = p2a;\n            indices[indexOffset + 3] = p2a;\n            indices[indexOffset + 4] = p1b;\n            indices[indexOffset + 5] = p2b;\n\n            k++;\n          }\n        }\n      }\n\n      return indices;\n    }\n\n    renderLines() {\n      this.drawnAtScale = scaleLinear()\n        .domain([...this.xScale().domain()])\n        .range([...this.xScale().range()]);\n\n      const tiles = Object.values(this.fetchedTiles);\n\n      const numRows = getNumRows(tiles);\n      const [, visibleTrackHeight] = this.dimensions;\n\n      const rowHeight =\n        this.rowHeight === 'auto'\n          ? Math.floor(visibleTrackHeight / numRows)\n          : this.rowHeight;\n\n      const [positions, colorIndices, offsetSigns] = this.tilesToData(tiles, {\n        maxRows: numRows,\n        markArea: this.markArea,\n        rowHeight,\n      });\n\n      const numPointsPerRow = getNumPointsPerRow(\n        numRows,\n        positions,\n        this.markArea\n      );\n\n      const indices = this.toLineIndices(\n        numRows,\n        numPointsPerRow,\n        this.markArea\n      );\n\n      const uniforms = new PIXI.UniformGroup({\n        uLineColor: [...this.markColorRgbNorm, 1.0],\n        uNaNColor: [1.0, 1.0, 1.0, 1.0],\n        uAreaColorTex: this.markColorTex,\n        uAreaColorTexRes: this.markColorTexRes,\n        uWidth: 0.25,\n        uMiter: 1,\n      });\n\n      const shader = PIXI.Shader.from(VS, FS, uniforms);\n\n      const geometry = new PIXI.Geometry();\n      const numCoords = 2;\n      const numVerticesPoint = this.markArea ? 4 : 2;\n      geometry.addAttribute(\n        'aPrevPosition',\n        positions,\n        2, // size\n        false, // normalize\n        PIXI.TYPES.FLOAT, // type\n        FLOAT_BYTES * numCoords, // stride\n        0 // offset/start\n      );\n      geometry.addAttribute(\n        'aCurrPosition',\n        positions,\n        2, // size\n        false, // normalize\n        PIXI.TYPES.FLOAT, // type\n        FLOAT_BYTES * numCoords, // stride\n        // note that each point is duplicated, hence we need to skip over the first two\n        FLOAT_BYTES * numCoords * numVerticesPoint // offset/start\n      );\n      geometry.addAttribute(\n        'aNextPosition',\n        positions,\n        2, // size\n        false, // normalize\n        PIXI.TYPES.FLOAT, // type\n        FLOAT_BYTES * 2, // stride\n        // note that each point is duplicated, hence we need to skip over the first four\n        FLOAT_BYTES * numCoords * numVerticesPoint * 2 // offset/start\n      );\n      geometry.addAttribute('aOffsetSign', offsetSigns, 1);\n      geometry.addAttribute('aColorIndex', colorIndices, 1);\n      geometry.addIndex(indices);\n\n      const mesh = new PIXI.Mesh(geometry, shader);\n\n      const newGraphics = new PIXI.Graphics();\n      newGraphics.addChild(mesh);\n\n      // eslint-disable-next-line\n      this.pMain.x = this.position[0];\n\n      if (this.lineGraphics) {\n        this.pMain.removeChild(this.lineGraphics);\n        this.lineGraphics.destroy();\n      }\n\n      this.pMain.addChild(newGraphics);\n      this.lineGraphics = newGraphics;\n\n      scaleGraphics(this.lineGraphics, this._xScale, this.drawnAtScale);\n\n      this.draw();\n      this.animate();\n    }\n\n    updateIndicators() {\n      // Needs to be implemented:\n      // this.renderIndicatorCategoryAxis(this.valueScaleInverted);\n      this.renderLines();\n    }\n\n    // Called whenever a new tile comes in\n    updateExistingGraphics() {\n      if (!this.hasFetchedTiles()) return;\n      this.updateScales();\n      this.updateIndicators();\n    }\n\n    setPosition(newPosition) {\n      super.setPosition(newPosition);\n\n      [this.pMain.position.x, this.pMain.position.y] = this.position;\n    }\n\n    zoomed(newXScale, newYScale) {\n      this.xScale(newXScale);\n      this.yScale(newYScale);\n\n      if (this.lineGraphics) {\n        scaleGraphics(this.lineGraphics, newXScale, this.drawnAtScale);\n      }\n\n      this.refreshTiles();\n      this.draw();\n    }\n\n    /**\n     * Return the data currently visible at position X and Y\n     *\n     * @param {Number} trackX: The x position relative to the track's start and end\n     * @param {Number} trakcY: The y position relative to the track's start and end\n     */\n    getVisibleData(trackX, trackY) {\n      const zoomLevel = this.calculateZoomLevel();\n\n      // the width of the tile in base pairs\n      const tileWidth = tileProxy.calculateTileWidth(\n        this.tilesetInfo,\n        zoomLevel,\n        this.tilesetInfo.tile_size\n      );\n\n      // the position of the tile containing the query position\n      const tilePos = this._xScale.invert(trackX) / tileWidth;\n      const numRows = getNumRows(this.fetchedTiles);\n\n      // the position of query within the tile\n      let posInTileX =\n        this.tilesetInfo.tile_size * (tilePos - Math.floor(tilePos));\n      const posInTileYNormalized = trackY / this.dimensions[1];\n      const posInTileY = posInTileYNormalized * numRows;\n\n      const rowIndex = Math.floor(posInTileY);\n      const rowSelection = this.rowSelections[rowIndex];\n      const tileId = this.tileToLocalId([zoomLevel, Math.floor(tilePos)]);\n      const fetchedTile = this.fetchedTiles[tileId];\n\n      let value = '';\n\n      if (fetchedTile) {\n        if (!this.tilesetInfo.shape) {\n          posInTileX =\n            fetchedTile.tileData.dense.length * (tilePos - Math.floor(tilePos));\n        }\n\n        let index = null;\n        if (this.tilesetInfo.shape) {\n          // Accomodate data from vector sources\n          if (\n            Array.isArray(rowSelection) &&\n            this.options.selectRowsAggregationMethod === 'client'\n          ) {\n            // Need to aggregate, so `index` will actually be an array.\n            index = rowSelection.map(\n              (rowI) =>\n                this.tilesetInfo.shape[0] * rowI + Math.floor(posInTileX)\n            );\n          } else if (\n            rowSelection &&\n            this.options.selectRowsAggregationMethod === 'client'\n          ) {\n            index =\n              this.tilesetInfo.shape[0] * rowSelection + Math.floor(posInTileX);\n          } else {\n            // No need to aggregate, `index` will contain a single item.\n            index =\n              this.tilesetInfo.shape[0] * rowIndex + Math.floor(posInTileX);\n          }\n        } else {\n          index =\n            fetchedTile.tileData.dense.length * rowIndex +\n            Math.floor(posInTileX);\n        }\n\n        if (Array.isArray(index)) {\n          const values = index.map((i) => fetchedTile.tileData.dense[i]);\n          value = format('.3f')(this.selectRowsAggregationFn(values));\n          value += '<br/>';\n          value += `${index.length}-item ${this.options.selectRowsAggregationMode}`;\n        } else {\n          value = format('.3f')(fetchedTile.tileData.dense[index]);\n          if (Array.isArray(rowSelection)) {\n            value += '<br/>';\n            value += `${rowSelection.length}-item ${this.options.selectRowsAggregationMode}`;\n          }\n        }\n      }\n\n      // add information about the row\n      if (this.tilesetInfo.row_infos) {\n        value += '<br/>';\n        let rowInfo = '';\n        if (this.options.selectRows && !Array.isArray(rowSelection)) {\n          rowInfo = this.tilesetInfo.row_infos[rowSelection];\n        } else if (rowIndex) {\n          rowInfo = this.tilesetInfo.row_infos[rowIndex];\n        }\n        if (typeof rowInfo === 'object') {\n          // The simplest thing to do here is conform to the tab-separated values convention.\n          value += Object.values(rowInfo).join('\\t');\n        } else {\n          // Probably a tab-separated string since not an object.\n          value += rowInfo;\n        }\n      }\n\n      return `${value}`;\n    }\n\n    /**\n     * Get some information to display when the mouse is over this\n     * track\n     *\n     * @param {Number} trackX: the x position of the mouse over the track\n     * @param {Number} trackY: the y position of the mouse over the track\n     *\n     * @return {string}: A HTML string containing the information to display\n     *\n     */\n    getMouseOverHtml(trackX, trackY) {\n      if (!this.tilesetInfo) return '';\n\n      return `Value: ${this.getVisibleData(trackX, trackY)}`;\n    }\n  }\n\n  return new RidgePlotTrack(...args);\n};\n\ncreateRidgePlotTrack.config = {\n  type: 'ridge-plot',\n  datatype: ['multivec'],\n  orientation: '1d',\n  name: 'RidgePlot',\n};\n\nexport default createRidgePlotTrack;\n","import createIntervalTree from 'interval-tree-1d';\nimport { contains, dashedXLineTo } from './utils';\n\nconst VS = `\n  precision mediump float;\n  attribute vec2 aPosition;\n  attribute float aOpacity;\n  attribute float aHighlight;\n\n  uniform mat3 projectionMatrix;\n  uniform mat3 translationMatrix;\n  uniform float uPointSize;\n\n  varying float vHighlight;\n  varying float vOpacity;\n\n  void main(void)\n  {\n    vHighlight = aHighlight;\n    vOpacity = aOpacity;\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aPosition, 1.0)).xy, 0.0, 1.0);\n    gl_PointSize = uPointSize;\n  }\n`;\n\nconst FS = `\n  precision mediump float;\n\n  uniform vec4 uColor;\n  uniform vec4 uColorHighlight;\n\n  varying float vHighlight;\n  varying float vOpacity;\n\n  void main() {\n    float isNotFocused = 1.0 - vHighlight;\n\n    float r = uColor.r * isNotFocused + uColorHighlight.r * vHighlight;\n    float g = uColor.g * isNotFocused + uColorHighlight.g * vHighlight;\n    float b = uColor.b * isNotFocused + uColorHighlight.b * vHighlight;\n\n    gl_FragColor = vec4(r, g, b, 1.0) * vOpacity;\n  }\n`;\n\nconst DEFAULT_GROUP_COLORS = [\n  // '#c17da5',\n  '#c76526',\n  '#dca237',\n  '#eee462',\n  '#469b76',\n  '#3170ad',\n  '#6fb2e4',\n  '#000000',\n  '#999999',\n];\n\nconst DEFAULT_GROUP_COLORS_DARK = [\n  // '#a1688a',\n  '#a65420',\n  '#b7872e',\n  '#9f9841',\n  '#3a8162',\n  '#295d90',\n  '#4a7798',\n  '#000000',\n  '#666666',\n];\n\nconst DEFAULT_GROUP_COLORS_LIGHT = [\n  // '#f5e9f0',\n  '#f6e5db',\n  '#f9f0de',\n  '#fcfbe5',\n  '#e0eee8',\n  '#dde7f1',\n  '#e7f2fb',\n  '#d5d5d5',\n  '#ffffff',\n];\n\n// prettier-ignore\nconst pointToPosition = (pt) => [\n  // top-left\n  pt.cX - pt.widthHalf, pt.y,\n  // top-right\n  pt.cX + pt.widthHalf, pt.y,\n  // bottom-right\n  pt.cX + pt.widthHalf, pt.y + pt.height,\n  // pt.cX + pt.widthHalf, pt.y + pt.height,\n  // bottom-left\n  pt.cX - pt.widthHalf, pt.y + pt.height,\n  // pt.cX - pt.widthHalf, pt.y,\n];\n\nconst pointToIndex = (pt, i) => {\n  const base = i * 4;\n  return [base, base + 1, base + 2, base + 2, base + 3, base];\n};\n\nconst pointToOpacity = (pt) => [pt.opacity, pt.opacity, pt.opacity, pt.opacity];\n\nconst pointToHighlight = (pt) => [\n  pt.highlight,\n  pt.highlight,\n  pt.highlight,\n  pt.highlight,\n];\n\nconst getIs2d = (tile) =>\n  tile.tileData.length && tile.tileData[0].yStart !== undefined;\n\nconst get1dItemWidth = (item) => item.xEnd - item.xStart;\n\nconst get2dItemWidth = (item) =>\n  Math.abs(\n    item.xStart +\n      (item.xEnd - item.xStart) / 2 -\n      (item.yStart + (item.yEnd - item.yStart) / 2)\n  );\n\nconst get1dStart = (item) => item.xStart;\n\nconst get2dStart = (item) => item.xStart + (item.xEnd - item.xStart) / 2;\n\nconst get1dEnd = (item) => item.xEnd;\n\nconst get2dEnd = (item) => item.yStart + (item.yEnd - item.yStart) / 2;\n\nconst getMaxWidth = (fetchedTiles) =>\n  Object.values(fetchedTiles).reduce(\n    (maxWidth, tile) =>\n      Math.max(\n        maxWidth,\n        tile.tileData.reduce(\n          (maxWidthItem, item) => Math.max(maxWidthItem, item.width),\n          0\n        )\n      ),\n    0\n  );\n\nconst scaleScalableGraphics = (graphics, xScale, drawnAtScale) => {\n  const tileK =\n    (drawnAtScale.domain()[1] - drawnAtScale.domain()[0]) /\n    (xScale.domain()[1] - xScale.domain()[0]);\n  const newRange = xScale.domain().map(drawnAtScale);\n\n  const posOffset = newRange[0];\n  graphics.scale.x = tileK;\n  graphics.position.x = -posOffset * tileK;\n};\n\nconst getRegionId = (item) =>\n  `${item.fields[0]}:${item.fields[1]}-${item.fields[2]}`;\n\nconst createStratifiedBedTrack = function createStratifiedBedTrack(\n  HGC,\n  ...args\n) {\n  if (!new.target) {\n    throw new Error(\n      'Uncaught TypeError: Class constructor cannot be invoked without \"new\"'\n    );\n  }\n\n  const { PIXI } = HGC.libraries;\n  const { scaleLinear, scaleLog } = HGC.libraries.d3Scale;\n  const { tileProxy } = HGC.services;\n\n  const opacityLogScale = scaleLog()\n    .domain([1, 10])\n    .range([0.1, 1])\n    .clamp(true);\n\n  class StratifiedBedTrack extends HGC.tracks.HorizontalLine1DPixiTrack {\n    constructor(context, options) {\n      super(context, options);\n\n      this.updateOptions();\n    }\n\n    initTile(tile) {\n      const is2d = getIs2d(tile);\n      const getItemWidth = is2d ? get2dItemWidth : get1dItemWidth;\n      const getStart = is2d ? get2dStart : get1dStart;\n      const getEnd = is2d ? get2dEnd : get1dEnd;\n\n      const intervals = [];\n\n      tile.tileData.forEach((item, i) => {\n        item.width = getItemWidth(item);\n        item.start = getStart(item);\n        item.end = getEnd(item);\n        item.regionId = getRegionId(item);\n        item.isLeftToRight = item.start < item.end;\n        intervals.push([item.xStart, item.xEnd, i]);\n      });\n\n      tile.intervalTree = createIntervalTree(intervals);\n    }\n\n    updateStratificationOption() {\n      if (!this.options.stratification) {\n        this.categoryField = undefined;\n        this.categoryToGroup = undefined;\n        this.groupToColor = undefined;\n        this.numGroups = 0;\n        this.numCategories = 0;\n        this.groupLabels = [];\n        return;\n      }\n\n      this.categoryField = this.options.stratification.categoryField;\n      this.getCategory = (item) =>\n        item.fields[this.categoryField].toLowerCase();\n      this.categoryToGroup = new Map();\n      this.categoryToY = new Map();\n      this.yToCategory = new Map();\n      this.groupToColor = new Map();\n      this.numGroups = this.options.stratification.groups.length;\n      this.groupSizes = this.options.stratification.groups.map(\n        (group) => group.categories.length\n      );\n      this.numCategories = this.groupSizes.reduce(\n        (numCategories, groupSize) => numCategories + groupSize,\n        0\n      );\n      this.groupLabels = this.options.stratification.groups.map(\n        (group, i) => group.label || `Group ${i}`\n      );\n\n      let k = 0;\n      this.options.stratification.groups.forEach((group, i) => {\n        this.groupToColor.set(i, [\n          HGC.utils.colorToHex(\n            group.color || DEFAULT_GROUP_COLORS[i % DEFAULT_GROUP_COLORS.length]\n          ),\n          HGC.utils.colorToHex(\n            group.backgroundColor ||\n              DEFAULT_GROUP_COLORS_LIGHT[i % DEFAULT_GROUP_COLORS.length]\n          ),\n        ]);\n        group.categories.forEach((category, j) => {\n          const cat = category.toLowerCase();\n          this.categoryToGroup.set(cat, i);\n          this.categoryToY.set(cat, k + j);\n          this.yToCategory.set(k + j, cat);\n        });\n        k += group.categories.length;\n      });\n\n      this.groupLabelsPixiText = this.groupLabels.map(\n        (label, i) =>\n          new PIXI.Text(label, {\n            fontSize: this.labelSize,\n            // fill: this.labelColor,\n            align: this.axisAlign === 'right' ? 'right' : 'left',\n            fill: HGC.utils.colorToHex(\n              this.options.stratification.groups[i].axisLabelColor ||\n                DEFAULT_GROUP_COLORS_DARK[i % DEFAULT_GROUP_COLORS_DARK.length]\n            ),\n          })\n      );\n    }\n\n    updateOptions() {\n      this.axisAlign = this.options.axisAlign || 'left';\n\n      this.labelColor = HGC.utils.colorToHex(\n        this.options.labelColor || 'black'\n      );\n\n      this.labelSize = this.options.labelSize || 12;\n\n      this.markColor = HGC.utils.colorToHex(this.options.markColor || 'black');\n\n      this.markColorRgbNorm = this.options.markColor\n        ? HGC.utils\n            .colorToRgba(this.options.markColor)\n            .slice(0, 3)\n            .map((x) => Math.min(1, Math.max(0, x / 255)))\n        : [0, 0, 0];\n\n      this.markOpacity = Number.isNaN(+this.options.markOpacity)\n        ? 1\n        : Math.min(1, Math.max(0, +this.options.markOpacity));\n\n      this.markSize = this.options.markSize || 2;\n      this.markMinWidth = this.options.markMinWidth || this.markSize;\n      this.markHeight = this.options.markHeight || this.markSize;\n\n      this.rowHeight = this.options.rowHeight || this.markHeight;\n\n      this.markColorHighlight = HGC.utils.colorToHex(\n        this.options.markColorHighlight || 'red'\n      );\n\n      this.markColorHighlightRgbNorm = this.options.markColorHighlight\n        ? HGC.utils\n            .colorToRgba(this.options.markColorHighlight)\n            .slice(0, 3)\n            .map((x) => Math.min(1, Math.max(0, x / 255)))\n        : [1, 0, 0];\n\n      this.markColorDehighlight = HGC.utils.colorToHex(\n        this.options.markColorDehighlight || '#999999'\n      );\n\n      this.markColorDehighlightRgbNorm = this.options.markColorDehighlight\n        ? HGC.utils\n            .colorToRgba(this.options.markColorDehighlight)\n            .slice(0, 3)\n            .map((x) => Math.min(1, Math.max(0, x / 255)))\n        : [0.6, 0.6, 0.6];\n\n      this.markOpacityFocus = Number.isNaN(+this.options.markOpacityFocus)\n        ? this.markOpacity\n        : Math.min(1, Math.max(0, +this.options.markOpacityFocus));\n\n      this.getImportance = this.options.importanceField\n        ? (item) => +item.fields[this.options.importanceField]\n        : (item) => item.width;\n\n      this.opacityEncoding = this.options.opacityEncoding || 'solid';\n\n      switch (this.opacityEncoding) {\n        case 'frequency':\n          this.opacityScale = () => 0.1;\n          break;\n\n        case 'highestImportance':\n        case 'closestImportance': {\n          const importanceDomain = this.options.importanceDomain || [1000, 1];\n          const opacityLinearScale = scaleLinear()\n            .domain(importanceDomain)\n            .range([1, 10]);\n          this.opacityScale = (x) => opacityLogScale(opacityLinearScale(x));\n          break;\n        }\n\n        case 'solid':\n        default:\n          this.opacityScale = () => 1;\n          break;\n      }\n\n      this.focusRegion = this.options.focusRegion\n        ? this.options.focusRegion\n        : [Infinity, Infinity];\n\n      this.getRegion = this.options.focusRegion\n        ? (item) => [item.xStart, item.xEnd]\n        : undefined;\n\n      this.focusGene = this.options.focusGene\n        ? this.options.focusGene.toLowerCase()\n        : undefined;\n\n      this.getGene = this.options.geneField\n        ? (item) => item.fields[this.options.geneField].toLowerCase()\n        : undefined;\n\n      this.focusStyle = this.options.focusStyle\n        ? this.options.focusStyle.toLowerCase()\n        : undefined;\n\n      this.minImportance = this.options.minImportance || 0;\n\n      this.updateStratificationOption();\n    }\n\n    rerender(newOptions) {\n      this.options = newOptions;\n      this.updateOptions();\n      this.updateExistingGraphics();\n    }\n\n    hasFetchedTiles() {\n      return Object.values(this.fetchedTiles).length;\n    }\n\n    updateScales() {\n      const fetchedTiles = Object.values(this.fetchedTiles);\n\n      if (!fetchedTiles.length) return;\n\n      const [, height] = this.dimensions;\n\n      this.maxWidth = getMaxWidth(this.fetchedTiles);\n\n      this.heightScale = scaleLinear()\n        .domain([0, this.maxWidth])\n        .range([Math.min(12, height / 10), height]);\n\n      this.categoryHeightScale = scaleLinear()\n        .domain([0, this.numCategories])\n        .range([0, this.numCategories * this.rowHeight]);\n\n      this.valueScale = scaleLinear()\n        .domain([0, this.maxWidth])\n        .range([height, 0]);\n\n      this.valueScaleInverted = scaleLinear()\n        .domain([0, this.maxWidth])\n        .range([0, height]);\n    }\n\n    itemToIndicatorCategory(item, isHighlighting) {\n      return {\n        cX: this._xScale(item.start),\n        y: this.categoryHeightScale(\n          this.categoryToY.get(this.getCategory(item))\n        ),\n        opacity: this.opacityScale(this.getImportance(item)),\n        highlight: isHighlighting && item.__focus,\n        widthHalf: Math.max(\n          this.markMinWidth / 2,\n          Math.abs(this._xScale(item.xStart) - this._xScale(item.xEnd)) / 2\n        ),\n        height: this.markHeight,\n        __item: item,\n      };\n    }\n\n    isItemInFocus() {\n      if (\n        this.getGene &&\n        this.focusGene &&\n        this.getRegion &&\n        this.focusRegion\n      ) {\n        return (item) => {\n          item.__focus =\n            this.getGene(item) === this.focusGene &&\n            contains(this.getRegion(item), this.focusRegion);\n          return item.__focus;\n        };\n      }\n\n      if (this.getGene && this.focusGene) {\n        return (item) => {\n          item.__focus = this.getGene(item) === this.focusGene;\n          return item.__focus;\n        };\n      }\n\n      if (this.getRegion && this.focusRegion) {\n        return (item) => {\n          item.__focus = contains(this.getRegion(item), this.focusRegion);\n          return item.__focus;\n        };\n      }\n\n      return (item) => {\n        item.__focus = false;\n        // If no focus was defined, we include all intervals\n        return true;\n      };\n    }\n\n    itemToIndicatorReducer(filterFn, addFn) {\n      if (this.focusStyle === 'highlighting') {\n        return (filteredItems, item) => {\n          filterFn(item);\n          addFn(filteredItems, item);\n          return filteredItems;\n        };\n      }\n\n      return (filteredItems, item) => {\n        if (filterFn(item)) addFn(filteredItems, item);\n        return filteredItems;\n      };\n    }\n\n    renderIndicatorPoints() {\n      this.drawnAtScale = scaleLinear()\n        .domain([...this.xScale().domain()])\n        .range([...this.xScale().range()]);\n\n      const isHighlighting =\n        this.focusStyle === 'highlighting' &&\n        ((this.focusGene && this.getGene) ||\n          (this.focusRegion && this.getRegion));\n\n      let reducerVar = [];\n      let addFn = (accumulator, item) =>\n        accumulator.push(this.itemToIndicatorCategory(item, isHighlighting));\n\n      if (this.opacityEncoding === 'highestImportance') {\n        reducerVar = {};\n        addFn = (accumulator, item) => {\n          if (accumulator[item.regionId]) {\n            const i1 = this.getImportance(accumulator[item.regionId].__item);\n            const i2 = this.getImportance(item);\n            if (i2 > i1) {\n              accumulator[item.regionId] = this.itemToIndicatorCategory(\n                item,\n                isHighlighting\n              );\n            }\n          } else {\n            accumulator[item.regionId] = this.itemToIndicatorCategory(\n              item,\n              isHighlighting\n            );\n          }\n        };\n      } else if (this.opacityEncoding === 'closestImportance') {\n        reducerVar = {};\n        addFn = (accumulator, item) => {\n          if (\n            !accumulator[item.regionId] ||\n            item.width < accumulator[item.regionId].__item.width\n          ) {\n            accumulator[item.regionId] = this.itemToIndicatorCategory(\n              item,\n              isHighlighting\n            );\n          }\n        };\n      }\n\n      const filterFn = this.isItemInFocus();\n      const dataToPoint = this.itemToIndicatorReducer(filterFn, addFn);\n\n      const points = Object.values(this.fetchedTiles).flatMap((tile) =>\n        Object.values(tile.tileData.reduce(dataToPoint, reducerVar))\n      );\n\n      const positions = new Float32Array(points.flatMap(pointToPosition));\n      const indices = new Uint16Array(points.flatMap(pointToIndex));\n      const opacities = new Float32Array(points.flatMap(pointToOpacity));\n      const highlights = new Float32Array(points.flatMap(pointToHighlight));\n\n      const uniforms = new PIXI.UniformGroup({\n        uColor: isHighlighting\n          ? [...this.markColorDehighlightRgbNorm, this.markOpacity]\n          : [...this.markColorRgbNorm, this.markOpacity],\n        uColorHighlight: [...this.markColorHighlightRgbNorm, this.markOpacity],\n        uHighlighting: isHighlighting,\n      });\n\n      const shader = PIXI.Shader.from(VS, FS, uniforms);\n\n      const geometry = new PIXI.Geometry();\n      geometry.addAttribute('aPosition', positions, 2);\n      geometry.addAttribute('aOpacity', opacities, 1);\n      geometry.addAttribute('aHighlight', highlights, 1);\n      geometry.addIndex(indices);\n\n      const mesh = new PIXI.Mesh(geometry, shader);\n\n      const newGraphics = new PIXI.Graphics();\n      newGraphics.addChild(mesh);\n\n      // eslint-disable-next-line\n      this.pMain.x = this.position[0];\n\n      if (this.indicatorPointGraphics) {\n        this.pMain.removeChild(this.indicatorPointGraphics);\n      }\n\n      this.pMain.addChild(newGraphics);\n      this.indicatorPointGraphics = newGraphics;\n\n      scaleScalableGraphics(\n        this.indicatorPointGraphics,\n        this._xScale,\n        this.drawnAtScale\n      );\n\n      this.draw();\n      this.animate();\n    }\n\n    renderIndicatorCategoryAxis() {\n      const [width] = this.dimensions;\n      const [left, top] = this.position;\n\n      this.pAxis.position.x = this.axisAlign === 'right' ? left + width : left;\n      this.pAxis.position.y = top;\n\n      this.pAxis.clear();\n      let yStart = 0;\n      let yEnd = 0;\n\n      const xTickOffset = this.axisAlign === 'right' ? -5 : 5;\n      const xTickEnd = this.axisAlign === 'right' ? -width : width;\n      const xLabelOffset = this.axisAlign === 'right' ? -3 : 3;\n      const numAxisLabels = this.pAxis.children.length;\n\n      this.pAxis.lineStyle(1, 0x000000, 1.0, 0.0);\n\n      this.groupLabelsPixiText.forEach((labelPixiText, i) => {\n        const height = this.categoryHeightScale(this.groupSizes[i]);\n        yEnd += height;\n        labelPixiText.x = xLabelOffset;\n        labelPixiText.y = yStart + height / 2;\n        labelPixiText.anchor.x = this.axisAlign === 'right' ? 1 : 0;\n        labelPixiText.anchor.y = 0.5;\n\n        if (this.options.focusStyle === 'highlighting') {\n          this.pAxis.beginFill(0xffffff, 0.66);\n        } else {\n          this.pAxis.beginFill(this.groupToColor.get(i)[1], 0.66);\n        }\n\n        this.pAxis.lineStyle(0);\n        if (this.axisAlign === 'right') {\n          this.pAxis.drawRect(\n            labelPixiText.x - labelPixiText.width,\n            labelPixiText.y - labelPixiText.height / 2,\n            labelPixiText.width,\n            labelPixiText.height\n          );\n        } else {\n          this.pAxis.drawRect(\n            labelPixiText.x,\n            labelPixiText.y - labelPixiText.height / 2,\n            labelPixiText.width,\n            labelPixiText.height\n          );\n        }\n        this.pAxis.endFill();\n\n        if (numAxisLabels < i + 1) {\n          this.pAxis.addChild(labelPixiText);\n        }\n\n        this.pAxis.lineStyle(1, 0x000000, 1.0, 0.0);\n        this.pAxis.moveTo(0, yStart);\n        this.pAxis.lineTo(xTickOffset, yStart);\n        if (this.options.stratification.axisShowGroupSeparator) {\n          dashedXLineTo(this.pAxis, 0, xTickEnd, yStart, 5);\n        }\n\n        yStart = yEnd;\n      });\n\n      this.pAxis.moveTo(0, 0);\n      this.pAxis.lineTo(0, yEnd);\n      this.pAxis.lineTo(xTickOffset, yEnd);\n      if (this.options.stratification.axisShowGroupSeparator) {\n        dashedXLineTo(this.pAxis, 0, xTickEnd, yEnd, 5);\n      }\n    }\n\n    updateIndicators() {\n      this.renderIndicatorCategoryAxis(this.valueScaleInverted);\n      this.renderIndicatorPoints();\n    }\n\n    // Called whenever a new tile comes in\n    updateExistingGraphics() {\n      if (!this.hasFetchedTiles()) return;\n      this.updateScales();\n      this.updateIndicators();\n    }\n\n    // Gets called on every draw call\n    drawTile(tile, storePolyStr) {\n      tile.graphics.clear();\n\n      if (!this.options.stratification.axisNoGroupColor) {\n        let yStart = 0;\n        let yEnd = 0;\n        this.groupSizes.forEach((size, i) => {\n          yEnd += this.categoryHeightScale(size);\n\n          tile.graphics.beginFill(this.groupToColor.get(i)[1]);\n          tile.graphics.drawRect(\n            0,\n            yStart,\n            this.dimensions[0],\n            Math.abs(yEnd - yStart)\n          );\n\n          yStart = yEnd;\n        });\n        tile.graphics.endFill();\n      }\n    }\n\n    /**\n     * Shows value and type for each bar\n     *\n     * @param trackX relative x-coordinate of mouse\n     * @param trackY relative y-coordinate of mouse\n     * @returns string with embedded values and svg square for color\n     */\n    getMouseOverHtml(trackX, trackY) {\n      if (!this.tilesetInfo) return '';\n\n      const zoomLevel = this.calculateZoomLevel();\n      const tileWidth = tileProxy.calculateTileWidth(\n        this.tilesetInfo,\n        zoomLevel,\n        this.tilesetInfo.tile_size\n      );\n\n      // the position of the tile containing the query position\n      const tileId = this.tileToLocalId([\n        zoomLevel,\n        Math.floor(this._xScale.invert(trackX) / tileWidth),\n      ]);\n      const fetchedTile = this.fetchedTiles[tileId];\n\n      if (!fetchedTile) return '';\n\n      const category = this.yToCategory.get(\n        Math.floor(this.categoryHeightScale.invert(trackY))\n      );\n\n      const xAbsLo = this._xScale.invert(trackX - 1);\n      const xAbsHi = this._xScale.invert(trackX + 1);\n\n      let foundItem;\n      fetchedTile.intervalTree.queryInterval(xAbsLo, xAbsHi, (interval) => {\n        const item = fetchedTile.tileData[interval[2]];\n        if (this.getCategory(item) === category) {\n          foundItem = item;\n          return true;\n        }\n        return false;\n      });\n\n      if (foundItem) {\n        const [color, bg] = this.groupToColor.get(\n          this.categoryToGroup.get(category)\n        );\n        const colorHex = `#${color.toString(16)}`;\n        const bgHex = `#${bg.toString(16)}`;\n        const value = this.getImportance(foundItem).toFixed(2);\n        return `<div style=\"margin: -0.25rem; padding: 0 0.25rem; background: ${bgHex}\"><strong style=\"color: ${colorHex};\">${category}:</strong> ${value}</div>`;\n      }\n\n      return '';\n    }\n\n    setPosition(newPosition) {\n      super.setPosition(newPosition);\n\n      [this.pMain.position.x, this.pMain.position.y] = this.position;\n    }\n\n    zoomed(newXScale, newYScale) {\n      this.xScale(newXScale);\n      this.yScale(newYScale);\n\n      if (this.indicatorPointGraphics) {\n        scaleScalableGraphics(\n          this.indicatorPointGraphics,\n          newXScale,\n          this.drawnAtScale\n        );\n      }\n\n      this.refreshTiles();\n      this.draw();\n    }\n\n    /**\n     * Export an SVG representation of this track\n     *\n     * @returns {Array} The two returned DOM nodes are both SVG\n     * elements [base,track]. Base is a parent which contains track as a\n     * child. Track is clipped with a clipping rectangle contained in base.\n     *\n     */\n    exportSVG() {\n      let track = null;\n      let base = null;\n\n      [base, track] = super.superSVG();\n\n      base.setAttribute('class', 'exported-arcs-track');\n      const output = document.createElement('g');\n\n      track.appendChild(output);\n      output.setAttribute(\n        'transform',\n        `translate(${this.position[0]},${this.position[1]})`\n      );\n\n      this.visibleAndFetchedTiles().forEach((tile) => {\n        this.polys = [];\n\n        // call drawTile with storePolyStr = true so that\n        // we record path strings to use in the SVG\n        this.drawTile(tile, true);\n\n        for (const { polyStr, opacity } of this.polys) {\n          const g = document.createElement('path');\n          g.setAttribute('fill', 'transparent');\n          g.setAttribute('opacity', opacity);\n\n          g.setAttribute('d', polyStr);\n          output.appendChild(g);\n        }\n      });\n      return [base, track];\n    }\n  }\n\n  return new StratifiedBedTrack(...args);\n};\n\nconst icon =\n  '<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\" fill-rule=\"evenodd\" clip-rule=\"evenodd\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"1.5\"><path d=\"M4 2.1L.5 3.5v12l5-2 5 2 5-2v-12l-5 2-3.17-1.268\" fill=\"none\" stroke=\"currentColor\"/><path d=\"M10.5 3.5v12\" fill=\"none\" stroke=\"currentColor\" stroke-opacity=\".33\" stroke-dasharray=\"1,2,0,0\"/><path d=\"M5.5 13.5V6\" fill=\"none\" stroke=\"currentColor\" stroke-opacity=\".33\" stroke-width=\".9969299999999999\" stroke-dasharray=\"1.71,3.43,0,0\"/><path d=\"M9.03 5l.053.003.054.006.054.008.054.012.052.015.052.017.05.02.05.024 4 2 .048.026.048.03.046.03.044.034.042.037.04.04.037.04.036.042.032.045.03.047.028.048.025.05.022.05.02.053.016.053.014.055.01.055.007.055.005.055v.056l-.002.056-.005.055-.008.055-.01.055-.015.054-.017.054-.02.052-.023.05-.026.05-.028.048-.03.046-.035.044-.035.043-.038.04-4 4-.04.037-.04.036-.044.032-.045.03-.046.03-.048.024-.05.023-.05.02-.052.016-.052.015-.053.012-.054.01-.054.005-.055.003H8.97l-.053-.003-.054-.006-.054-.008-.054-.012-.052-.015-.052-.017-.05-.02-.05-.024-4-2-.048-.026-.048-.03-.046-.03-.044-.034-.042-.037-.04-.04-.037-.04-.036-.042-.032-.045-.03-.047-.028-.048-.025-.05-.022-.05-.02-.053-.016-.053-.014-.055-.01-.055-.007-.055L4 10.05v-.056l.002-.056.005-.055.008-.055.01-.055.015-.054.017-.054.02-.052.023-.05.026-.05.028-.048.03-.046.035-.044.035-.043.038-.04 4-4 .04-.037.04-.036.044-.032.045-.03.046-.03.048-.024.05-.023.05-.02.052-.016.052-.015.053-.012.054-.01.054-.005L8.976 5h.054zM5 10l4 2 4-4-4-2-4 4z\" fill=\"currentColor\"/><path d=\"M7.124 0C7.884 0 8.5.616 8.5 1.376v3.748c0 .76-.616 1.376-1.376 1.376H3.876c-.76 0-1.376-.616-1.376-1.376V1.376C2.5.616 3.116 0 3.876 0h3.248zm.56 5.295L5.965 1H5.05L3.375 5.295h.92l.354-.976h1.716l.375.975h.945zm-1.596-1.7l-.592-1.593-.58 1.594h1.172z\" fill=\"currentColor\"/></svg>';\n\ncreateStratifiedBedTrack.config = {\n  type: 'stratified-bed',\n  datatype: ['arcs', 'bedlike'],\n  orientation: '1d',\n  name: 'Arcs1D',\n  thumbnail: new DOMParser().parseFromString(icon, 'text/xml').documentElement,\n  availableOptions: [\n    'arcStyle',\n    'flip1D',\n    'labelPosition',\n    'labelColor',\n    'labelTextOpacity',\n    'labelBackgroundOpacity',\n    'trackBorderWidth',\n    'trackBorderColor',\n  ],\n  defaultOptions: {\n    arcStyle: 'ellipse',\n    flip1D: 'no',\n    labelColor: 'black',\n    labelPosition: 'hidden',\n    trackBorderWidth: 0,\n    trackBorderColor: 'black',\n  },\n  optionsInfo: {\n    arcStyle: {\n      name: 'Arc Style',\n      inlineOptions: {\n        circle: {\n          name: 'Circle',\n          value: 'circle',\n        },\n        ellipse: {\n          name: 'Ellipse',\n          value: 'ellipse',\n        },\n      },\n    },\n  },\n};\n\nexport default createStratifiedBedTrack;\n","import { dashedXLineTo } from './utils';\n\nconst VS = `\n  precision mediump float;\n  attribute vec2 aPosition;\n  attribute float aOpacity;\n  attribute float aFocused;\n\n  uniform mat3 projectionMatrix;\n  uniform mat3 translationMatrix;\n  uniform float uPointSize;\n  uniform vec4 uColor;\n  uniform vec4 uColorFocused;\n\n  varying vec4 vColor;\n  varying vec4 vColorFocused;\n  varying float vOpacity;\n  varying float vFocused;\n\n  void main(void)\n  {\n    vColor = uColor;\n    vColorFocused = uColorFocused;\n    vOpacity = aOpacity;\n    vFocused = aFocused;\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aPosition, 1.0)).xy, 0.0, 1.0);\n    gl_PointSize = uPointSize;\n  }\n`;\n\nconst FS_ROUND = `\n  #ifdef GL_OES_standard_derivatives\n  #extension GL_OES_standard_derivatives : enable\n  #endif\n\n  precision mediump float;\n\n  varying vec4 vColor;\n  varying vec4 vColorFocused;\n  varying float vOpacity;\n  varying float vFocused;\n\n  void main() {\n    float r = 0.0, delta = 0.0, alpha = 1.0;\n    vec2 cxy = 2.0 * gl_PointCoord - 1.0;\n    r = dot(cxy, cxy);\n\n    #ifdef GL_OES_standard_derivatives\n      delta = fwidth(r);\n      alpha = 1.0 - smoothstep(1.0 - delta, 1.0 + delta, r);\n    #endif\n\n    gl_FragColor = vec4(vColor.rgb, alpha * vColor.a);\n  }\n`;\n\nconst FS_SQUARE = `\n  precision mediump float;\n  varying vec4 vColor;\n  varying vec4 vColorFocused;\n  varying float vOpacity;\n  varying float vFocused;\n\n  void main() {\n    float isNotFocused = 1.0 - vFocused;\n\n    float r = vColor.r * isNotFocused + vColorFocused.r * vFocused;\n    float g = vColor.g * isNotFocused + vColorFocused.g * vFocused;\n    float b = vColor.b * isNotFocused + vColorFocused.b * vFocused;\n\n    gl_FragColor = vec4(r, g, b, 1.0) * vOpacity;\n  }\n`;\n\nconst DEFAULT_GROUP_COLORS = [\n  // '#c17da5',\n  '#c76526',\n  '#dca237',\n  '#eee462',\n  '#469b76',\n  '#3170ad',\n  '#6fb2e4',\n  '#000000',\n  '#999999',\n];\n\nconst DEFAULT_GROUP_COLORS_DARK = [\n  // '#a1688a',\n  '#a65420',\n  '#b7872e',\n  '#9f9841',\n  '#3a8162',\n  '#295d90',\n  '#4a7798',\n  '#000000',\n  '#666666',\n];\n\nconst DEFAULT_GROUP_COLORS_LIGHT = [\n  // '#f5e9f0',\n  '#f6e5db',\n  '#f9f0de',\n  '#fcfbe5',\n  '#e0eee8',\n  '#dde7f1',\n  '#e7f2fb',\n  '#d5d5d5',\n  '#ffffff',\n];\n\nconst getIs2d = (tile) =>\n  tile.tileData.length && tile.tileData[0].yStart !== undefined;\n\nconst get1dItemWidth = (item) => item.xEnd - item.xStart;\n\nconst get2dItemWidth = (item) =>\n  Math.abs(\n    item.xStart +\n      (item.xEnd - item.xStart) / 2 -\n      (item.yStart + (item.yEnd - item.yStart) / 2)\n  );\n\nconst get1dStart = (item) => item.xStart;\n\nconst get2dStart = (item) => item.xStart + (item.xEnd - item.xStart) / 2;\n\nconst get1dEnd = (item) => item.xEnd;\n\nconst get2dEnd = (item) => item.yStart + (item.yEnd - item.yStart) / 2;\n\nconst getMaxWidth = (fetchedTiles) =>\n  Object.values(fetchedTiles).reduce(\n    (maxWidth, tile) =>\n      Math.max(\n        maxWidth,\n        tile.tileData.reduce(\n          (maxWidthItem, item) => Math.max(maxWidthItem, item.width),\n          0\n        )\n      ),\n    0\n  );\n\nconst scaleScalableGraphics = (graphics, xScale, drawnAtScale) => {\n  const tileK =\n    (drawnAtScale.domain()[1] - drawnAtScale.domain()[0]) /\n    (xScale.domain()[1] - xScale.domain()[0]);\n  const newRange = xScale.domain().map(drawnAtScale);\n\n  const posOffset = newRange[0];\n  graphics.scale.x = tileK;\n  graphics.position.x = -posOffset * tileK;\n};\n\nconst createScalableArcs1dTrack = function createScalableArcs1dTrack(\n  HGC,\n  ...args\n) {\n  if (!new.target) {\n    throw new Error(\n      'Uncaught TypeError: Class constructor cannot be invoked without \"new\"'\n    );\n  }\n\n  const { PIXI } = HGC.libraries;\n  const { scaleLinear, scaleLog } = HGC.libraries.d3Scale;\n\n  const opacityLogScale = scaleLog()\n    .domain([1, 10])\n    .range([0.1, 1])\n    .clamp(true);\n\n  class ScalableArcs1dTrack extends HGC.tracks.HorizontalLine1DPixiTrack {\n    constructor(context, options) {\n      super(context, options);\n\n      this.updateOptions();\n    }\n\n    initTile(tile) {\n      const is2d = getIs2d(tile);\n      const getItemWidth = is2d ? get2dItemWidth : get1dItemWidth;\n      const getStart = is2d ? get2dStart : get1dStart;\n      const getEnd = is2d ? get2dEnd : get1dEnd;\n\n      tile.tileData.forEach((item) => {\n        item.width = getItemWidth(item);\n        item.start = getStart(item);\n        item.end = getEnd(item);\n        item.isLeftToRight = item.start < item.end;\n      });\n    }\n\n    updateTileWidthHistogram(tile) {\n      const numBins = Math.max(this.dimensions[1] / this.pointSize);\n      const binSize = this.maxWidth / numBins;\n\n      let max = 0;\n\n      tile.widthHistogramLeft = new Uint32Array(numBins);\n      tile.widthHistogramRight = new Uint32Array(numBins);\n\n      tile.tileData.forEach((item) => {\n        const bin = Math.round(item.width / binSize);\n        // We will use this for vertical offsettings similar to a beeswarm plot\n        item.histPos = item.isLeftToRight\n          ? tile.widthHistogramRight[bin]++\n          : tile.widthHistogramLeft[bin]++;\n        max = max > item.histPos ? max : item.histPos;\n      });\n\n      tile.widthHistogramMax = max;\n    }\n\n    updateWidthHistograms() {\n      Object.values(this.fetchedTiles).forEach(\n        this.updateTileWidthHistogram.bind(this)\n      );\n    }\n\n    updateStratificationOption() {\n      if (!this.options.stratification) {\n        this.categoryField = undefined;\n        this.categoryToGroup = undefined;\n        this.groupToColor = undefined;\n        this.numGroups = 0;\n        this.numCategories = 0;\n        this.groupLabels = [];\n        return;\n      }\n\n      this.categoryField = this.options.stratification.categoryField;\n      this.categoryToGroup = new Map();\n      this.categoryToY = new Map();\n      this.groupToColor = new Map();\n      this.numGroups = this.options.stratification.groups.length;\n      this.groupSizes = this.options.stratification.groups.map(\n        (group) => group.categories.length\n      );\n      this.numCategories = this.groupSizes.reduce(\n        (numCategories, groupSize) => numCategories + groupSize,\n        0\n      );\n      this.groupLabels = this.options.stratification.groups.map(\n        (group, i) => group.label || `Group ${i}`\n      );\n\n      let k = 0;\n      this.options.stratification.groups.forEach((group, i) => {\n        this.groupToColor.set(i, [\n          HGC.utils.colorToHex(\n            group.color || DEFAULT_GROUP_COLORS[i % DEFAULT_GROUP_COLORS.length]\n          ),\n          HGC.utils.colorToHex(\n            group.backgroundColor ||\n              DEFAULT_GROUP_COLORS_LIGHT[i % DEFAULT_GROUP_COLORS.length]\n          ),\n        ]);\n        group.categories.forEach((category, j) => {\n          this.categoryToGroup.set(category.toLowerCase(), i);\n          this.categoryToY.set(category.toLowerCase(), k + j);\n        });\n        k += group.categories.length;\n      });\n\n      this.groupLabelsPixiText = this.groupLabels.map(\n        (label, i) =>\n          new PIXI.Text(label, {\n            fontSize: this.labelSize,\n            // fill: this.labelColor,\n            align: this.axisAlign === 'right' ? 'right' : 'left',\n            fill: HGC.utils.colorToHex(\n              this.options.stratification.groups[i].axisLabelColor ||\n                DEFAULT_GROUP_COLORS_DARK[i % DEFAULT_GROUP_COLORS_DARK.length]\n            ),\n          })\n      );\n    }\n\n    updateOptions() {\n      this.axisAlign = this.options.axisAlign || 'left';\n\n      this.labelColor = HGC.utils.colorToHex(\n        this.options.labelColor || 'black'\n      );\n\n      this.labelSize = this.options.labelSize || 12;\n\n      this.markColor = HGC.utils.colorToHex(this.options.markColor || 'black');\n\n      this.markColorRgbNorm = this.options.markColor\n        ? HGC.utils\n            .colorToRgba(this.options.markColor)\n            .slice(0, 3)\n            .map((x) => Math.min(1, Math.max(0, x / 255)))\n        : [0, 0, 0];\n\n      this.markOpacity = Number.isNaN(+this.options.markOpacity)\n        ? 1\n        : Math.min(1, Math.max(0, +this.options.markOpacity));\n\n      this.markSize = this.options.markSize || 2;\n\n      this.markColorFocus = HGC.utils.colorToHex(\n        this.options.markColorFocus || 'red'\n      );\n\n      this.markColorFocusRgbNorm = this.options.markColorFocus\n        ? HGC.utils\n            .colorToRgba(this.options.markColorFocus)\n            .slice(0, 3)\n            .map((x) => Math.min(1, Math.max(0, x / 255)))\n        : [1, 0, 0];\n\n      this.markOpacityFocus = Number.isNaN(+this.options.markOpacityFocus)\n        ? this.markOpacity\n        : Math.min(1, Math.max(0, +this.options.markOpacityFocus));\n\n      this.markSizeFocus = this.options.markSizeFocus || this.markSize;\n\n      this.strokeColor =\n        this.markColor ||\n        HGC.utils.colorToHex(this.options.strokeColor || 'black');\n\n      this.strokeWidth = this.options.strokeWidth || this.markSize;\n\n      this.getImportance = this.options.importanceField\n        ? (item) => +item.fields[this.options.importanceField]\n        : (item) => item.width;\n\n      const importanceDomain = this.options.importanceDomain || [1000, 1];\n\n      const opacityLinearScale = scaleLinear()\n        .domain(importanceDomain)\n        .range([1, 10]);\n\n      this.opacityScale = (x) => opacityLogScale(opacityLinearScale(x));\n\n      this.focusRegion = this.options.focusRegion\n        ? this.options.focusRegion\n        : [Infinity, Infinity];\n\n      this.focusGene = this.options.focusGene\n        ? this.options.focusGene.toLowerCase()\n        : undefined;\n\n      this.getGene = this.options.geneField\n        ? (item) => item.fields[this.options.geneField].toLowerCase()\n        : undefined;\n\n      this.minImportance = this.options.minImportance || 0;\n\n      this.updateStratificationOption();\n\n      this.updateWidthHistograms();\n    }\n\n    rerender(newOptions) {\n      this.options = newOptions;\n      this.updateOptions();\n      this.updateExistingGraphics();\n    }\n\n    updateScales() {\n      const fetchedTiles = Object.values(this.fetchedTiles);\n\n      if (!fetchedTiles.length) return;\n\n      const [, height] = this.dimensions;\n      const markSizeHalf = this.markSize / 2;\n\n      this.maxWidth = getMaxWidth(this.fetchedTiles);\n\n      this.heightScale = scaleLinear()\n        .domain([0, this.maxWidth])\n        .range([Math.min(12, height / 10), height]);\n\n      this.fullHeightScale = scaleLinear()\n        .domain([this.maxWidth, 0])\n        .range([\n          Math.min(markSizeHalf, height / 10),\n          Math.max(height - markSizeHalf, (9 * height) / 10),\n        ]);\n\n      this.fullHeightScaleInverted = scaleLinear()\n        .domain([0, this.maxWidth])\n        .range([\n          Math.min(markSizeHalf, height / 10),\n          Math.max(height - markSizeHalf, (9 * height) / 10),\n        ]);\n\n      this.incomingHeightScale = scaleLinear()\n        .domain([0, this.maxWidth])\n        .range([height / 2, height]);\n\n      this.outgoingHeightScale = scaleLinear()\n        .domain([0, this.maxWidth])\n        .range([height / 2, 0]);\n\n      this.categoryHeightScale = scaleLinear()\n        .domain([0, this.numCategories])\n        .range([0, this.numCategories * this.markSize]);\n\n      this.valueScale = scaleLinear()\n        .domain([0, this.maxWidth])\n        .range([height, 0]);\n\n      this.valueScaleInverted = scaleLinear()\n        .domain([0, this.maxWidth])\n        .range([0, height]);\n    }\n\n    itemToIndicatorDiverging(item) {\n      return {\n        startX: this._xScale(item.start),\n        endX: this._xScale(item.end),\n        startY: this.outgoingHeightScale(item.width),\n        endY: this.incomingHeightScale(item.width),\n        opacity: this.opacityScale(this.getImportance(item)),\n        size: this.markSize,\n      };\n    }\n\n    itemToIndicatorStart(item) {\n      return {\n        x: this._xScale(item.start),\n        y: this.fullHeightScale(item.width),\n        opacity: this.opacityScale(this.getImportance(item)),\n        size: this.markSize,\n      };\n    }\n\n    itemToIndicatorEnd(item) {\n      return {\n        x: this._xScale(item.end),\n        y: this.fullHeightScaleInverted(item.width),\n        opacity: this.opacityScale(this.getImportance(item)),\n        size: this.markSize,\n      };\n    }\n\n    itemToIndicatorCategory(item) {\n      return {\n        cX: this._xScale(item.start),\n        cY: this.categoryHeightScale(\n          this.categoryToY.get(item.fields[this.categoryField].toLowerCase())\n        ),\n        wHalf: Math.max(\n          this.markSize / 2,\n          Math.abs(this._xScale(item.xStart) - this._xScale(item.xEnd)) / 2\n        ),\n        opacity: this.opacityScale(this.getImportance(item)),\n        focused:\n          item.xStart <= this.focusRegion[1] &&\n          item.xEnd >= this.focusRegion[0],\n        size: this.markSize,\n        sizeHalf: this.markSize / 2,\n      };\n    }\n\n    itemToIndicatorReducer(mapFn) {\n      if (this.getGene && this.focusGene) {\n        return (filteredItems, item) => {\n          const gene = this.getGene(item);\n          if (gene === this.focusGene) filteredItems.push(mapFn(item));\n          return filteredItems;\n        };\n      }\n      return (filteredItems, item) => {\n        filteredItems.push(mapFn(item));\n        return filteredItems;\n      };\n    }\n\n    renderIndicatorPoints(\n      dataToPoint,\n      pointToPosition,\n      pointToOpacity,\n      pointToFocused,\n      {\n        vertexShader = VS,\n        fragmentShader = FS_ROUND,\n        drawTriangles = false,\n      } = {}\n    ) {\n      this.drawnAtScale = scaleLinear()\n        .domain([...this.xScale().domain()])\n        .range([...this.xScale().range()]);\n\n      const points = Object.values(this.fetchedTiles).flatMap((tile) =>\n        tile.tileData.reduce(dataToPoint, [])\n      );\n\n      const positions = new Float32Array(points.flatMap(pointToPosition));\n      const opacities = new Float32Array(points.flatMap(pointToOpacity));\n      const focused = new Float32Array(points.flatMap(pointToFocused));\n\n      const uniforms = new PIXI.UniformGroup({\n        uPointSize: this.markSize,\n        uColor: [...this.markColorRgbNorm, this.markOpacity],\n        uColorFocused: [...this.markColorFocusRgbNorm, this.markOpacity],\n      });\n\n      const shader = PIXI.Shader.from(vertexShader, fragmentShader, uniforms);\n\n      const geometry = new PIXI.Geometry();\n      geometry.addAttribute('aPosition', positions, 2);\n      geometry.addAttribute('aOpacity', opacities, 1);\n      geometry.addAttribute('aFocused', focused, 1);\n\n      const mesh = new PIXI.Mesh(\n        geometry,\n        shader,\n        new PIXI.State(),\n        drawTriangles ? PIXI.DRAW_MODES.TRIANGLES : PIXI.DRAW_MODES.POINTS\n      );\n      // mesh.blendMode = PIXI.BLEND_MODES.MULTIPLY;\n\n      const newGraphics = new PIXI.Graphics();\n      newGraphics.addChild(mesh);\n\n      // eslint-disable-next-line\n      this.pMain.x = this.position[0];\n\n      if (this.indicatorPointGraphics) {\n        this.pMain.removeChild(this.indicatorPointGraphics);\n      }\n\n      this.pMain.addChild(newGraphics);\n      this.indicatorPointGraphics = newGraphics;\n\n      scaleScalableGraphics(\n        this.indicatorPointGraphics,\n        this._xScale,\n        this.drawnAtScale\n      );\n\n      this.draw();\n      this.animate();\n    }\n\n    renderIndicatorDistanceAxis(valueScale) {\n      this.drawAxis(valueScale);\n    }\n\n    renderIndicatorCategoryAxis() {\n      const [width] = this.dimensions;\n      const [left, top] = this.position;\n\n      this.pAxis.position.x = this.axisAlign === 'right' ? left + width : left;\n      this.pAxis.position.y = top;\n\n      this.pAxis.clear();\n      let yStart = 0;\n      let yEnd = 0;\n\n      const xTickOffset = this.axisAlign === 'right' ? -5 : 5;\n      const xTickEnd = this.axisAlign === 'right' ? -width : width;\n      const xLabelOffset = this.axisAlign === 'right' ? -3 : 3;\n      const numAxisLabels = this.pAxis.children.length;\n\n      this.pAxis.lineStyle(1, 0x000000, 1.0, 0.0);\n\n      this.groupLabelsPixiText.forEach((labelPixiText, i) => {\n        const height = this.categoryHeightScale(this.groupSizes[i]);\n        yEnd += height;\n        labelPixiText.x = xLabelOffset;\n        labelPixiText.y = yStart + height / 2;\n        labelPixiText.anchor.x = this.axisAlign === 'right' ? 1 : 0;\n        labelPixiText.anchor.y = 0.5;\n\n        if (numAxisLabels < i + 1) {\n          this.pAxis.addChild(labelPixiText);\n        }\n\n        this.pAxis.moveTo(0, yStart);\n        this.pAxis.lineTo(xTickOffset, yStart);\n        if (this.options.stratification.axisShowGroupSeparator) {\n          dashedXLineTo(this.pAxis, 0, xTickEnd, yStart, 5);\n        }\n\n        yStart = yEnd;\n      });\n\n      this.pAxis.moveTo(0, 0);\n      this.pAxis.lineTo(0, yEnd);\n      this.pAxis.lineTo(xTickOffset, yEnd);\n      if (this.options.stratification.axisShowGroupSeparator) {\n        dashedXLineTo(this.pAxis, 0, xTickEnd, yEnd, 5);\n      }\n    }\n\n    updateIndicators() {\n      let dataToPoint = this.itemToIndicatorDiverging.bind(this);\n      let pointToPosition = (pt) => [pt.startX, pt.startY, pt.endX, pt.endY];\n      let pointToOpacity = (pt) => pt.opacity;\n      let pointToFocused = (pt) => pt.focused;\n      let fragmentShader = FS_ROUND;\n      let drawTriangles = false;\n\n      if (this.options.indicatorStyle === 'category') {\n        dataToPoint = this.itemToIndicatorCategory.bind(this);\n        pointToPosition = (pt) => [pt.cX, pt.cY];\n        fragmentShader = FS_SQUARE;\n        this.renderIndicatorCategoryAxis(this.valueScaleInverted);\n      } else if (this.options.indicatorStyle === 'category-rect') {\n        dataToPoint = this.itemToIndicatorCategory.bind(this);\n        // prettier-ignore\n        pointToPosition = (pt) => [\n          pt.cX - pt.wHalf, pt.cY,\n          pt.cX + pt.wHalf, pt.cY,\n          pt.cX + pt.wHalf, pt.cY + pt.size,\n          pt.cX + pt.wHalf, pt.cY + pt.size,\n          pt.cX - pt.wHalf, pt.cY + pt.size,\n          pt.cX - pt.wHalf, pt.cY,\n        ];\n        pointToOpacity = (pt) => [\n          pt.opacity,\n          pt.opacity,\n          pt.opacity,\n          pt.opacity,\n          pt.opacity,\n          pt.opacity,\n        ];\n        pointToFocused = (pt) => [\n          pt.focused,\n          pt.focused,\n          pt.focused,\n          pt.focused,\n          pt.focused,\n          pt.focused,\n        ];\n        fragmentShader = FS_SQUARE;\n        drawTriangles = true;\n        this.renderIndicatorCategoryAxis(this.valueScaleInverted);\n      } else if (this.options.indicatorStyle === 'start-only') {\n        dataToPoint = this.itemToIndicatorStart.bind(this);\n        pointToPosition = (pt) => [pt.x, pt.y];\n        this.renderIndicatorDistanceAxis(this.valueScale);\n      } else if (this.options.indicatorStyle === 'end-only') {\n        dataToPoint = this.itemToIndicatorEnd.bind(this);\n        pointToPosition = (pt) => [pt.x, pt.y];\n        this.renderIndicatorDistanceAxis(this.valueScaleInverted);\n      }\n\n      // dataToPoint must be a reducer.\n      dataToPoint = this.itemToIndicatorReducer(dataToPoint);\n\n      this.renderIndicatorPoints(\n        dataToPoint,\n        pointToPosition,\n        pointToOpacity,\n        pointToFocused,\n        {\n          fragmentShader,\n          drawTriangles,\n        }\n      );\n    }\n\n    // Called whenever a new tile comes in\n    updateExistingGraphics() {\n      this.updateScales();\n      this.updateWidthHistograms();\n      if (this.options.arcStyle === 'indicator') this.updateIndicators();\n    }\n\n    // Gets called on every draw call\n    drawTile(tile, storePolyStr) {\n      tile.graphics.clear();\n\n      if (!tile.tileData.length) return;\n\n      if (this.options.arcStyle === 'indicator') {\n        const [width, height] = this.dimensions;\n\n        if (this.options.indicatorStyle.startsWith('category')) {\n          if (!this.options.stratification.axisNoGroupColor) {\n            let yStart = 0;\n            let yEnd = 0;\n            this.groupSizes.forEach((size, i) => {\n              yEnd += this.categoryHeightScale(size);\n\n              tile.graphics.beginFill(this.groupToColor.get(i)[1]);\n              tile.graphics.drawRect(0, yStart, width, Math.abs(yEnd - yStart));\n\n              yStart = yEnd;\n            });\n            tile.graphics.endFill();\n          }\n        } else {\n          let y = Math.round(height / 2) - 0.5;\n\n          if (this.options.indicatorStyle === 'start-only') {\n            y = height - 0.5;\n          } else if (this.options.indicatorStyle === 'end-only') {\n            y = 0.5;\n          }\n          tile.graphics.lineStyle(1, 0, 0.2);\n          tile.graphics.moveTo(0, y);\n          tile.graphics.lineTo(width, y);\n        }\n      }\n\n      for (let i = 0; i < tile.tileData.length; i++) {\n        const item = tile.tileData[i];\n\n        if (this.options.arcStyle === 'circle') {\n          this.drawCircle(tile.graphics, item, storePolyStr);\n        } else if (this.options.arcStyle === 'indicator') {\n          // this.drawIndicator(tile.graphics, this.itemToIndicator(item));\n        } else {\n          this.drawEllipse(tile.graphics, item, storePolyStr);\n        }\n      }\n    }\n\n    drawIndicator(graphics, item) {\n      const startX = this._xScale(item.start);\n      const endX = this._xScale(item.end);\n      const startY = this.outgoingHeightScale(item.width);\n      const endY = this.incomingHeightScale(item.width);\n\n      const opacity = this.opacityScale(this.getImportance(item));\n\n      graphics.lineStyle(0, 0, 0);\n\n      graphics.beginFill(0x3d8cd9, opacity);\n      graphics.drawCircle(startX, startY, this.pointSize);\n      graphics.endFill();\n\n      graphics.beginFill(0xc17da5, opacity);\n      graphics.drawCircle(endX, endY, this.pointSize);\n      graphics.endFill();\n\n      if (\n        item.start <= this.focusRegion[1] &&\n        item.end >= this.focusRegion[0] &&\n        (item.start >= this.focusRegion[0] || item.end <= this.focusRegion[1])\n      ) {\n        graphics.lineStyle(this.pointSize, 0xc17da5, opacity);\n        graphics.moveTo(startX, endY);\n        graphics.lineTo(endX, endY);\n        graphics.endFill();\n      }\n    }\n\n    drawCircle(graphics, item, opacityScale, storePolyStr) {\n      const x1 = this._xScale(item.start);\n      const x2 = this._xScale(item.end);\n      const [trackWidth, trackHeight] = this.dimensions;\n      const [, trackY] = this.position;\n\n      const h = (x2 - x1) / 2;\n      const d = (x2 - x1) / 2;\n      const r = (d * d + h * h) / (2 * h);\n      const cx = (x1 + x2) / 2;\n      let cy = trackHeight - h + r;\n\n      let polyStr = '';\n\n      if (storePolyStr) {\n        polyStr += `M${x1},${trackY + trackHeight}`;\n      }\n\n      graphics.moveTo(x1, trackY + trackHeight);\n\n      const limitX1 = Math.max(0, x1);\n      const limitX2 = Math.min(trackWidth, x2);\n\n      let color = this.markColor;\n      let size = this.markSize;\n      let opacity = this.markOpacity;\n\n      if (\n        item.start <= this.focusRegion[1] &&\n        item.end >= this.focusRegion[0] &&\n        (item.start >= this.focusRegion[0] || item.end <= this.focusRegion[1])\n      ) {\n        color = this.markColorFocus;\n        size = this.markSizeFocus;\n        opacity = this.markOpacityFocus;\n      }\n\n      graphics.lineStyle(size, color, opacity);\n\n      const startAngle = Math.acos(\n        Math.min(Math.max(-(limitX1 - cx) / r, -1), 1)\n      );\n      let endAngle = Math.acos(Math.min(Math.max(-(limitX2 - cx) / r, -1), 1));\n\n      if (this.options.flip) {\n        cy = 0;\n        endAngle = -Math.PI;\n        graphics.moveTo(x1, 0);\n        if (storePolyStr) polyStr += `M${x1},0`;\n      }\n\n      const resolution = 10;\n      const angleScale = scaleLinear()\n        .domain([0, resolution - 1])\n        .range([startAngle, endAngle]);\n\n      for (let k = 0; k < resolution; k++) {\n        const ax = r * Math.cos(angleScale(k));\n        const ay = r * Math.sin(angleScale(k));\n\n        const rx = cx - ax;\n        const ry = cy - ay;\n\n        graphics.lineTo(rx, ry);\n        if (storePolyStr) polyStr += `L${rx},${ry}`;\n      }\n\n      if (storePolyStr) {\n        this.polys.push({\n          polyStr,\n          opacity,\n        });\n      }\n    }\n\n    drawEllipse(graphics, item, heightScale, opacityScale, storePolyStr) {\n      const x1 = this._xScale(item.start);\n      const x2 = this._xScale(item.end);\n      const [, trackHeight] = this.dimensions;\n\n      const h = this.heightScale(item.width);\n      const w = x2 - x1;\n      const r = w / 2;\n\n      const cx = (x1 + x2) / 2;\n      let cy = trackHeight;\n      const startAngle = 0;\n      let endAngle = Math.PI;\n\n      let polyStr = '';\n      if (storePolyStr) polyStr += `M${x1},${trackHeight}`;\n      graphics.moveTo(x1, trackHeight);\n\n      if (this.options.flip) {\n        cy = 0;\n        endAngle = -Math.PI;\n        graphics.moveTo(x1, 0);\n        if (storePolyStr) polyStr += `M${x1},0`;\n      }\n\n      let color = this.markColor;\n      let size = this.markSize;\n      let opacity = this.markOpacity;\n\n      if (\n        item.start <= this.focusRegion[1] &&\n        item.end >= this.focusRegion[0] &&\n        (item.start >= this.focusRegion[0] || item.end <= this.focusRegion[1])\n      ) {\n        color = this.markColorFocus;\n        size = this.markSizeFocus;\n        opacity = this.markOpacityFocus;\n      }\n\n      graphics.lineStyle(size, color, opacity);\n\n      const resolution = Math.round(Math.abs(w) / 200) * 10;\n\n      const angleScale = scaleLinear()\n        .domain([0, resolution - 1])\n        .range([startAngle, endAngle]);\n\n      for (let k = 0; k < resolution; k++) {\n        const ax = r * Math.cos(angleScale(k));\n        const ay = h * Math.sin(angleScale(k));\n\n        const rx = cx - ax;\n        const ry = cy - ay;\n\n        graphics.lineTo(rx, ry);\n        if (storePolyStr) polyStr += `L${rx},${ry}`;\n      }\n\n      if (storePolyStr) {\n        this.polys.push({\n          polyStr,\n          opacity,\n        });\n      }\n    }\n\n    getMouseOverHtml() {}\n\n    setPosition(newPosition) {\n      super.setPosition(newPosition);\n\n      [this.pMain.position.x, this.pMain.position.y] = this.position;\n    }\n\n    zoomed(newXScale, newYScale) {\n      this.xScale(newXScale);\n      this.yScale(newYScale);\n\n      if (this.indicatorPointGraphics) {\n        scaleScalableGraphics(\n          this.indicatorPointGraphics,\n          newXScale,\n          this.drawnAtScale\n        );\n      }\n\n      this.refreshTiles();\n      this.draw();\n    }\n\n    /**\n     * Export an SVG representation of this track\n     *\n     * @returns {Array} The two returned DOM nodes are both SVG\n     * elements [base,track]. Base is a parent which contains track as a\n     * child. Track is clipped with a clipping rectangle contained in base.\n     *\n     */\n    exportSVG() {\n      let track = null;\n      let base = null;\n\n      [base, track] = super.superSVG();\n\n      base.setAttribute('class', 'exported-arcs-track');\n      const output = document.createElement('g');\n\n      track.appendChild(output);\n      output.setAttribute(\n        'transform',\n        `translate(${this.position[0]},${this.position[1]})`\n      );\n\n      const strokeColor = this.options.strokeColor\n        ? this.options.strokeColor\n        : 'blue';\n      const strokeWidth = this.options.strokeWidth\n        ? this.options.strokeWidth\n        : 2;\n\n      this.visibleAndFetchedTiles().forEach((tile) => {\n        this.polys = [];\n\n        // call drawTile with storePolyStr = true so that\n        // we record path strings to use in the SVG\n        this.drawTile(tile, true);\n\n        for (const { polyStr, opacity } of this.polys) {\n          const g = document.createElement('path');\n          g.setAttribute('fill', 'transparent');\n          g.setAttribute('stroke', strokeColor);\n          g.setAttribute('stroke-width', strokeWidth);\n          g.setAttribute('opacity', opacity);\n\n          g.setAttribute('d', polyStr);\n          output.appendChild(g);\n        }\n      });\n      return [base, track];\n    }\n  }\n\n  return new ScalableArcs1dTrack(...args);\n};\n\nconst icon =\n  '<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\" fill-rule=\"evenodd\" clip-rule=\"evenodd\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"1.5\"><path d=\"M4 2.1L.5 3.5v12l5-2 5 2 5-2v-12l-5 2-3.17-1.268\" fill=\"none\" stroke=\"currentColor\"/><path d=\"M10.5 3.5v12\" fill=\"none\" stroke=\"currentColor\" stroke-opacity=\".33\" stroke-dasharray=\"1,2,0,0\"/><path d=\"M5.5 13.5V6\" fill=\"none\" stroke=\"currentColor\" stroke-opacity=\".33\" stroke-width=\".9969299999999999\" stroke-dasharray=\"1.71,3.43,0,0\"/><path d=\"M9.03 5l.053.003.054.006.054.008.054.012.052.015.052.017.05.02.05.024 4 2 .048.026.048.03.046.03.044.034.042.037.04.04.037.04.036.042.032.045.03.047.028.048.025.05.022.05.02.053.016.053.014.055.01.055.007.055.005.055v.056l-.002.056-.005.055-.008.055-.01.055-.015.054-.017.054-.02.052-.023.05-.026.05-.028.048-.03.046-.035.044-.035.043-.038.04-4 4-.04.037-.04.036-.044.032-.045.03-.046.03-.048.024-.05.023-.05.02-.052.016-.052.015-.053.012-.054.01-.054.005-.055.003H8.97l-.053-.003-.054-.006-.054-.008-.054-.012-.052-.015-.052-.017-.05-.02-.05-.024-4-2-.048-.026-.048-.03-.046-.03-.044-.034-.042-.037-.04-.04-.037-.04-.036-.042-.032-.045-.03-.047-.028-.048-.025-.05-.022-.05-.02-.053-.016-.053-.014-.055-.01-.055-.007-.055L4 10.05v-.056l.002-.056.005-.055.008-.055.01-.055.015-.054.017-.054.02-.052.023-.05.026-.05.028-.048.03-.046.035-.044.035-.043.038-.04 4-4 .04-.037.04-.036.044-.032.045-.03.046-.03.048-.024.05-.023.05-.02.052-.016.052-.015.053-.012.054-.01.054-.005L8.976 5h.054zM5 10l4 2 4-4-4-2-4 4z\" fill=\"currentColor\"/><path d=\"M7.124 0C7.884 0 8.5.616 8.5 1.376v3.748c0 .76-.616 1.376-1.376 1.376H3.876c-.76 0-1.376-.616-1.376-1.376V1.376C2.5.616 3.116 0 3.876 0h3.248zm.56 5.295L5.965 1H5.05L3.375 5.295h.92l.354-.976h1.716l.375.975h.945zm-1.596-1.7l-.592-1.593-.58 1.594h1.172z\" fill=\"currentColor\"/></svg>';\n\ncreateScalableArcs1dTrack.config = {\n  type: '1d-arcs',\n  datatype: ['arcs', 'bedlike'],\n  orientation: '1d',\n  name: 'Arcs1D',\n  thumbnail: new DOMParser().parseFromString(icon, 'text/xml').documentElement,\n  availableOptions: [\n    'arcStyle',\n    'flip1D',\n    'labelPosition',\n    'labelColor',\n    'labelTextOpacity',\n    'labelBackgroundOpacity',\n    'strokeColor',\n    'strokeWidth',\n    'trackBorderWidth',\n    'trackBorderColor',\n  ],\n  defaultOptions: {\n    arcStyle: 'ellipse',\n    flip1D: 'no',\n    labelColor: 'black',\n    labelPosition: 'hidden',\n    strokeColor: 'black',\n    strokeWidth: 1,\n    trackBorderWidth: 0,\n    trackBorderColor: 'black',\n  },\n  optionsInfo: {\n    arcStyle: {\n      name: 'Arc Style',\n      inlineOptions: {\n        circle: {\n          name: 'Circle',\n          value: 'circle',\n        },\n        ellipse: {\n          name: 'Ellipse',\n          value: 'ellipse',\n        },\n      },\n    },\n  },\n};\n\nexport default createScalableArcs1dTrack;\n","const MAX_RADIUS = 2;\nconst MAX_RADIUS_EXTENSION = 2;\n\n// const VS = `\n//   attribute vec2 aPosition;\n\n//   uniform mat3 projectionMatrix;\n//   uniform mat3 translationMatrix;\n//   uniform float uPointSize;\n//   uniform vec4 uColor;\n\n//   varying vec4 vColor;\n\n//   void main(void)\n//   {\n//     vColor = uColor;\n//     gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aPosition, 1.0)).xy, 0.0, 1.0);\n//     gl_PointSize = uPointSize;\n//   }\n// `;\n\n// const FS_ROUND = `\n//   #ifdef GL_OES_standard_derivatives\n//   #extension GL_OES_standard_derivatives : enable\n//   #endif\n\n//   precision mediump float;\n\n//   varying vec4 vColor;\n\n//   void main() {\n//     float r = 0.0, delta = 0.0, alpha = 1.0;\n//     vec2 cxy = 2.0 * gl_PointCoord - 1.0;\n//     r = dot(cxy, cxy);\n\n//     #ifdef GL_OES_standard_derivatives\n//       delta = fwidth(r);\n//       alpha = 1.0 - smoothstep(1.0 - delta, 1.0 + delta, r);\n//     #endif\n\n//     gl_FragColor = vec4(vColor.rgb, alpha * vColor.a);\n//   }\n// `;\n\n// const FS_SQUARE = `\n//   precision mediump float;\n//   varying vec4 vColor;\n\n//   void main() {\n//     gl_FragColor = vec4(vColor.rgb, vColor.a);\n//   }\n// `;\n\n// const DEFAULT_GROUP_COLORS = [\n//   '#c17da5',\n//   '#c76526',\n//   '#dca237',\n//   '#eee462',\n//   '#469b76',\n//   '#3170ad',\n//   '#6fb2e4',\n//   '#000000',\n//   '#999999',\n// ];\n\n// const DEFAULT_GROUP_COLORS_DARK = [\n//   '#a1688a',\n//   '#a65420',\n//   '#b7872e',\n//   '#9f9841',\n//   '#3a8162',\n//   '#295d90',\n//   '#4a7798',\n//   '#000000',\n//   '#666666',\n// ];\n\n// const DEFAULT_GROUP_COLORS_LIGHT = [\n//   '#f5e9f0',\n//   '#f6e5db',\n//   '#f9f0de',\n//   '#fcfbe5',\n//   '#e0eee8',\n//   '#dde7f1',\n//   '#e7f2fb',\n//   '#d5d5d5',\n//   '#ffffff',\n// ];\n\n// const scaleScalableGraphics = (graphics, xScale, drawnAtScale) => {\n//   const tileK =\n//     (drawnAtScale.domain()[1] - drawnAtScale.domain()[0]) /\n//     (xScale.domain()[1] - xScale.domain()[0]);\n//   const newRange = xScale.domain().map(drawnAtScale);\n\n//   const posOffset = newRange[0];\n//   graphics.scale.x = tileK;\n//   graphics.position.x = -posOffset * tileK;\n// };\n\nconst createSnpTrack = function createSnpTrack(HGC, ...args) {\n  if (!new.target) {\n    throw new Error(\n      'Uncaught TypeError: Class constructor cannot be invoked without \"new\"'\n    );\n  }\n\n  const { range } = HGC.libraries.d3Array;\n  const { scaleBand } = HGC.libraries.d3Scale;\n  const { tileProxy } = HGC.services;\n  const { colorToHex } = HGC.utils;\n\n  class SnpTrack extends HGC.tracks.BedLikeTrack {\n    setValueScale() {\n      this.valueScale = null;\n      if (this.options && this.options.valueColumn) {\n        const min = this.options.colorEncodingRange\n          ? +this.options.colorEncodingRange[0]\n          : this.minVisibleValueInTiles(+this.options.valueColumn);\n        const max = this.options.colorEncodingRange\n          ? +this.options.colorEncodingRange[1]\n          : this.maxVisibleValueInTiles(+this.options.valueColumn);\n\n        if (this.options.valueColumn) {\n          [this.valueScale] = this.makeValueScale(\n            min,\n            this.calculateMedianVisibleValue(+this.options.valueColumn),\n            max,\n            2\n          );\n        }\n      }\n    }\n\n    finalDotYPos(y, r) {\n      return Math.max(r, Math.min(this.dimensions[1] - r, y));\n    }\n\n    drawPoly(tile, xStartPos, xEndPos, rectY, doubleRadius = false) {\n      // prettier-ignore\n      const drawnPoly = [\n        // left top\n        xStartPos, rectY,\n        // right top\n        xEndPos, rectY,\n        // right bottom\n        xEndPos, this.dimensions[1],\n         // left bottom\n        xStartPos, this.dimensions[1]\n      ];\n\n      const anchorRadius = Math.max(MAX_RADIUS, xEndPos - xStartPos);\n      const radius = anchorRadius * (1 + MAX_RADIUS_EXTENSION * doubleRadius);\n\n      tile.rectGraphics.drawCircle(\n        xStartPos,\n        this.finalDotYPos(rectY, anchorRadius),\n        radius\n      );\n\n      return drawnPoly;\n    }\n\n    renderRows(tile, rows, maxRows, startY, endY, fill) {\n      const zoomLevel = +tile.tileId.split('.')[0];\n\n      this.initialize();\n\n      const rowScale = scaleBand()\n        .domain(range(maxRows))\n        .range([startY, endY])\n        .paddingInner(0);\n\n      const focusRegion = this.options.focusRegion || [Infinity, Infinity];\n\n      const circleDraws = [];\n      const circleFocusDraws = [];\n\n      for (let j = 0; j < rows.length; j++) {\n        for (let i = 0; i < rows[j].length; i++) {\n          const td = rows[j][i].value;\n          const geneInfo = td.fields;\n\n          // the returned positions are chromosome-based and they need to\n          // be converted to genome-based\n          const chrOffset = +td.chrOffset;\n          const txStart = +geneInfo[1] + chrOffset;\n          const txEnd = +geneInfo[2] + chrOffset;\n          let yMiddle = rowScale(j) + rowScale.step() / 2;\n\n          if (this.valueScale) {\n            yMiddle = this.valueScale(+geneInfo[+this.options.valueColumn - 1]);\n          }\n\n          const rectY = yMiddle;\n          const xStartPos = this._xScale(txStart);\n          const xEndPos = this._xScale(txEnd);\n\n          // don't draw anything that has already been drawn\n          if (\n            !(\n              zoomLevel in this.drawnRects &&\n              td.uid in this.drawnRects[zoomLevel]\n            )\n          ) {\n            if (!this.drawnRects[zoomLevel]) this.drawnRects[zoomLevel] = {};\n\n            const circleDraw = [xStartPos, xEndPos, rectY, td, txStart, txEnd];\n\n            if (txStart <= focusRegion[1] && txEnd >= focusRegion[0]) {\n              circleFocusDraws.push(circleDraw);\n            } else {\n              circleDraws.push(circleDraw);\n            }\n          }\n        }\n\n        // 1. draw white background to make clicking easier\n        tile.rectGraphics.lineStyle(0);\n        tile.rectGraphics.beginFill(0xffffff);\n        circleDraws.forEach((circleDraw) => {\n          this.drawPoly(\n            tile,\n            circleDraw[0],\n            circleDraw[1],\n            circleDraw[2],\n            true\n          );\n        });\n\n        // 2. Now draw the normal circles\n        let color = this.options.markColor || 'black';\n        let opacity = this.options.fillOpacity || 0.3;\n        tile.rectGraphics.lineStyle(1, colorToHex(color), opacity);\n        tile.rectGraphics.beginFill(colorToHex(color), opacity);\n        circleDraws.forEach((circleDraw) => {\n          const drawnPoly = this.drawPoly(\n            tile,\n            circleDraw[0],\n            circleDraw[1],\n            circleDraw[2]\n          );\n          this.drawnRects[zoomLevel][circleDraw[4].uid] = [\n            drawnPoly,\n            {\n              start: circleDraw[4],\n              end: circleDraw[5],\n              value: circleDraw[3],\n              tile,\n              fill,\n            },\n            tile.tileId,\n          ];\n        });\n\n        // 2. Now draw the focused circles\n        color = this.options.markColorFocus || 'red';\n        opacity = this.options.markOpacityFocus || 0.6;\n        tile.rectGraphics.lineStyle(1, colorToHex(color), opacity);\n        tile.rectGraphics.beginFill(colorToHex(color), opacity);\n        circleFocusDraws.forEach((circleDraw) => {\n          const drawnPoly = this.drawPoly(\n            tile,\n            circleDraw[0],\n            circleDraw[1],\n            circleDraw[2]\n          );\n          this.drawnRects[zoomLevel][circleDraw[4].uid] = [\n            drawnPoly,\n            {\n              start: circleDraw[4],\n              end: circleDraw[5],\n              value: circleDraw[3],\n              tile,\n              fill,\n            },\n            tile.tileId,\n          ];\n        });\n        tile.rectGraphics.endFill();\n      }\n\n      tile.rectGraphics.interactive = true;\n      tile.rectGraphics.buttonMode = true;\n      tile.rectGraphics.mouseup = (event) => {\n        if (this.hoveringSnp) {\n          this.pubSub.publish('app.click', {\n            type: 'snp',\n            event,\n            payload: this.hoveringSnp,\n          });\n        }\n      };\n    }\n\n    /**\n     * Shows value and type for each bar\n     *\n     * @param trackX relative x-coordinate of mouse\n     * @param trackY relative y-coordinate of mouse\n     * @returns string with embedded values and svg square for color\n     */\n    getMouseOverHtml(trackX, trackY) {\n      this.hoveringSnp = undefined;\n\n      if (!this.tilesetInfo || !this.options.toolTip) return '';\n\n      const zoomLevel = this.calculateZoomLevel();\n      const tileWidth = tileProxy.calculateTileWidth(\n        this.tilesetInfo,\n        zoomLevel,\n        this.tilesetInfo.tile_size\n      );\n\n      // the position of the tile containing the query position\n      const genomePos = this._xScale.invert(trackX);\n      const relTilePos = genomePos / tileWidth;\n      const tilePos = Math.floor(relTilePos);\n      const tileId = this.tileToLocalId([zoomLevel, tilePos]);\n      const fetchedTile = this.fetchedTiles[tileId];\n\n      if (!fetchedTile) return '';\n\n      let minDist = 3;\n      fetchedTile.tileData.forEach((item) => {\n        const dist = Math.abs(this._xScale(item.xStart) - trackX);\n        if (dist < minDist) {\n          this.hoveringSnp = item;\n          minDist = dist;\n        }\n      });\n\n      if (!this.hoveringSnp) return '';\n\n      const itemY = this.finalDotYPos(\n        this.valueScale(this.hoveringSnp.importance),\n        2\n      );\n\n      if (\n        Math.abs(itemY - (trackY - 1)) >\n        MAX_RADIUS * (MAX_RADIUS_EXTENSION + 1)\n      )\n        return '';\n\n      const name = this.hoveringSnp.fields[this.options.toolTip.name.field];\n      const value = (+this.hoveringSnp.fields[\n        this.options.toolTip.value.field\n      ]).toFixed(this.options.toolTip.value.numDecimals || 2);\n      let otherStr = '';\n\n      if (this.options.toolTip.other) {\n        this.options.toolTip.other.forEach((other) => {\n          const label = other.label || '';\n          const v = (+this.hoveringSnp.fields[other.field]).toFixed(\n            other.numDecimals || 2\n          );\n          otherStr += `${label}: ${v};`;\n        });\n        otherStr = ` (${otherStr.substr(0, otherStr.length - 1)})`;\n      }\n\n      return `<div><strong>${name}:</strong> ${value}${otherStr}</div>`;\n    }\n\n    /**\n     * Export an SVG representation of this track\n     *\n     * @returns {Array} The two returned DOM nodes are both SVG\n     * elements [base,track]. Base is a parent which contains track as a\n     * child. Track is clipped with a clipping rectangle contained in base.\n     *\n     */\n    exportSVG() {\n      let track = null;\n      let base = null;\n\n      [base, track] = super.superSVG();\n\n      base.setAttribute('class', 'exported-arcs-track');\n      const output = document.createElement('g');\n\n      track.appendChild(output);\n      output.setAttribute(\n        'transform',\n        `translate(${this.position[0]},${this.position[1]})`\n      );\n\n      const strokeColor = this.options.strokeColor\n        ? this.options.strokeColor\n        : 'blue';\n      const strokeWidth = this.options.strokeWidth\n        ? this.options.strokeWidth\n        : 2;\n\n      this.visibleAndFetchedTiles().forEach((tile) => {\n        this.polys = [];\n\n        // call drawTile with storePolyStr = true so that\n        // we record path strings to use in the SVG\n        this.drawTile(tile, true);\n\n        for (const { polyStr, opacity } of this.polys) {\n          const g = document.createElement('path');\n          g.setAttribute('fill', 'transparent');\n          g.setAttribute('stroke', strokeColor);\n          g.setAttribute('stroke-width', strokeWidth);\n          g.setAttribute('opacity', opacity);\n\n          g.setAttribute('d', polyStr);\n          output.appendChild(g);\n        }\n      });\n      return [base, track];\n    }\n  }\n\n  return new SnpTrack(...args);\n};\n\nconst icon =\n  '<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\" fill-rule=\"evenodd\" clip-rule=\"evenodd\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"1.5\"><path d=\"M4 2.1L.5 3.5v12l5-2 5 2 5-2v-12l-5 2-3.17-1.268\" fill=\"none\" stroke=\"currentColor\"/><path d=\"M10.5 3.5v12\" fill=\"none\" stroke=\"currentColor\" stroke-opacity=\".33\" stroke-dasharray=\"1,2,0,0\"/><path d=\"M5.5 13.5V6\" fill=\"none\" stroke=\"currentColor\" stroke-opacity=\".33\" stroke-width=\".9969299999999999\" stroke-dasharray=\"1.71,3.43,0,0\"/><path d=\"M9.03 5l.053.003.054.006.054.008.054.012.052.015.052.017.05.02.05.024 4 2 .048.026.048.03.046.03.044.034.042.037.04.04.037.04.036.042.032.045.03.047.028.048.025.05.022.05.02.053.016.053.014.055.01.055.007.055.005.055v.056l-.002.056-.005.055-.008.055-.01.055-.015.054-.017.054-.02.052-.023.05-.026.05-.028.048-.03.046-.035.044-.035.043-.038.04-4 4-.04.037-.04.036-.044.032-.045.03-.046.03-.048.024-.05.023-.05.02-.052.016-.052.015-.053.012-.054.01-.054.005-.055.003H8.97l-.053-.003-.054-.006-.054-.008-.054-.012-.052-.015-.052-.017-.05-.02-.05-.024-4-2-.048-.026-.048-.03-.046-.03-.044-.034-.042-.037-.04-.04-.037-.04-.036-.042-.032-.045-.03-.047-.028-.048-.025-.05-.022-.05-.02-.053-.016-.053-.014-.055-.01-.055-.007-.055L4 10.05v-.056l.002-.056.005-.055.008-.055.01-.055.015-.054.017-.054.02-.052.023-.05.026-.05.028-.048.03-.046.035-.044.035-.043.038-.04 4-4 .04-.037.04-.036.044-.032.045-.03.046-.03.048-.024.05-.023.05-.02.052-.016.052-.015.053-.012.054-.01.054-.005L8.976 5h.054zM5 10l4 2 4-4-4-2-4 4z\" fill=\"currentColor\"/><path d=\"M7.124 0C7.884 0 8.5.616 8.5 1.376v3.748c0 .76-.616 1.376-1.376 1.376H3.876c-.76 0-1.376-.616-1.376-1.376V1.376C2.5.616 3.116 0 3.876 0h3.248zm.56 5.295L5.965 1H5.05L3.375 5.295h.92l.354-.976h1.716l.375.975h.945zm-1.596-1.7l-.592-1.593-.58 1.594h1.172z\" fill=\"currentColor\"/></svg>';\n\ncreateSnpTrack.config = {\n  type: 'point-annotation',\n  datatype: ['arcs', 'bedlike'],\n  orientation: '1d',\n  name: 'Arcs1D',\n  thumbnail: new DOMParser().parseFromString(icon, 'text/xml').documentElement,\n  availableOptions: [\n    'arcStyle',\n    'flip1D',\n    'labelPosition',\n    'labelColor',\n    'labelTextOpacity',\n    'labelBackgroundOpacity',\n    'strokeColor',\n    'strokeWidth',\n    'trackBorderWidth',\n    'trackBorderColor',\n  ],\n  defaultOptions: {\n    arcStyle: 'ellipse',\n    flip1D: 'no',\n    labelColor: 'black',\n    labelPosition: 'hidden',\n    strokeColor: 'black',\n    strokeWidth: 1,\n    trackBorderWidth: 0,\n    trackBorderColor: 'black',\n  },\n  optionsInfo: {\n    arcStyle: {\n      name: 'Arc Style',\n      inlineOptions: {\n        circle: {\n          name: 'Circle',\n          value: 'circle',\n        },\n        ellipse: {\n          name: 'Ellipse',\n          value: 'ellipse',\n        },\n      },\n    },\n  },\n};\n\nexport default createSnpTrack;\n","import { createColorTexture } from './utils';\n\nconst DEFAULT_TILE_SIZE = 1024;\n\nconst DEFAULT_BIN_SIZE = 8; // 8 \"tile-pixels\" make up one bin by default\n\nconst VS = `\nprecision mediump float;\nattribute vec2 aPosition;\nattribute float aColorIdx;\nattribute float aFocused;\n\nuniform mat3 projectionMatrix;\nuniform mat3 translationMatrix;\nuniform sampler2D uColorMapTex;\nuniform float uColorMapTexRes;\nuniform sampler2D uColorMapFocusTex;\nuniform float uColorMapFocusTexRes;\n\nvarying vec4 vColor;\nvarying vec4 vColorFocused;\nvarying float vFocused;\n\nvoid main(void)\n{\n  // Half a texel (i.e., pixel in texture coordinates)\n  float eps = 0.5 / uColorMapTexRes;\n  float colorRowIndex = floor((aColorIdx + eps) / uColorMapTexRes);\n  vec2 colorTexIndex = vec2(\n    (aColorIdx / uColorMapTexRes) - colorRowIndex + eps,\n    (colorRowIndex / uColorMapTexRes) + eps\n  );\n  vColor = texture2D(uColorMapTex, colorTexIndex);\n\n  float eps2 = 0.5 / uColorMapFocusTexRes;\n  float colorRowIndex2 = floor((aColorIdx + eps2) / uColorMapFocusTexRes);\n  vec2 colorTexIndex2 = vec2(\n    (aColorIdx / uColorMapFocusTexRes) - colorRowIndex2 + eps2,\n    (colorRowIndex2 / uColorMapFocusTexRes) + eps2\n  );\n  vColorFocused = texture2D(uColorMapFocusTex, colorTexIndex2);\n\n  vFocused = aFocused;\n\n  gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aPosition, 1.0)).xy, 0.0, 1.0);\n}\n`;\n\nconst FS = `\n  precision mediump float;\n\n  varying vec4 vColor;\n  varying vec4 vColorFocused;\n  varying float vFocused;\n\n  void main() {\n    float isNotFocused = 1.0 - vFocused;\n\n    float r = vColor.r * isNotFocused + vColorFocused.r * vFocused;\n    float g = vColor.g * isNotFocused + vColorFocused.g * vFocused;\n    float b = vColor.b * isNotFocused + vColorFocused.b * vFocused;\n\n    gl_FragColor = vec4(r, g, b, 1.0);\n  }\n`;\n\nconst DEFAULT_COLOR_MAP = [\n  // '#c17da5',\n  '#c76526',\n  '#dca237',\n  '#eee462',\n  '#469b76',\n  '#3170ad',\n  '#6fb2e4',\n  '#000000',\n  '#999999',\n];\n\nconst DEFAULT_COLOR_MAP_DARK = [\n  // '#a1688a',\n  '#a65420',\n  '#b7872e',\n  '#9f9841',\n  '#3a8162',\n  '#295d90',\n  '#4a7798',\n  '#000000',\n  '#666666',\n];\n\nconst DEFAULT_COLOR_MAP_LIGHT = [\n  // '#f5e9f0',\n  '#f6e5db',\n  '#f9f0de',\n  '#fcfbe5',\n  '#e0eee8',\n  '#dde7f1',\n  '#e7f2fb',\n  '#d5d5d5',\n  '#ffffff',\n];\n\nconst getIs2d = (tile) =>\n  tile.tileData.length && tile.tileData[0].yStart !== undefined;\n\nconst get1dStart = (item) => item.xStart;\n\nconst get2dStart = (item) => item.xStart + (item.xEnd - item.xStart) / 2;\n\nconst get1dEnd = (item) => item.xEnd;\n\nconst get2dEnd = (item) => item.yStart + (item.yEnd - item.yStart) / 2;\n\nconst getHistMax = (fetchedTiles) =>\n  fetchedTiles.reduce(\n    (histMax, tile) => Math.max(histMax, tile.histogramMax),\n    0\n  );\n\nconst scaleScalableGraphics = (graphics, xScale, drawnAtScale) => {\n  const tileK =\n    (drawnAtScale.domain()[1] - drawnAtScale.domain()[0]) /\n    (xScale.domain()[1] - xScale.domain()[0]);\n  const newRange = xScale.domain().map(drawnAtScale);\n\n  const posOffset = newRange[0];\n  graphics.scale.x = tileK;\n  graphics.position.x = -posOffset * tileK;\n};\n\n// prettier-ignore\nconst segmentToPosition = (segment) => [\n  segment.xStart, segment.yStart,\n  segment.xEnd, segment.yStart,\n  segment.xEnd, segment.yEnd,\n  segment.xStart, segment.yStart,\n  segment.xStart, segment.yEnd,\n  segment.xEnd, segment.yEnd,\n];\n\nconst segmentToColorIdx = (segment) => [\n  segment.colorIdx,\n  segment.colorIdx,\n  segment.colorIdx,\n  segment.colorIdx,\n  segment.colorIdx,\n  segment.colorIdx,\n];\n\nconst segmentToFocused = (segment) => [\n  segment.focused,\n  segment.focused,\n  segment.focused,\n  segment.focused,\n  segment.focused,\n  segment.focused,\n];\n\nconst createStackedBarTrack = function createStackedBarTrack(HGC, ...args) {\n  if (!new.target) {\n    throw new Error(\n      'Uncaught TypeError: Class constructor cannot be invoked without \"new\"'\n    );\n  }\n\n  const { PIXI } = HGC.libraries;\n  const { scaleLinear, scaleLog } = HGC.libraries.d3Scale;\n  const { tileProxy } = HGC.services;\n  const { colorToHex } = HGC.utils;\n\n  const opacityLogScale = scaleLog()\n    .domain([1, 10])\n    .range([0.1, 1])\n    .clamp(true);\n\n  const toRgbNorm = (color) =>\n    HGC.utils\n      .colorToRgba(color)\n      .slice(0, 3)\n      .map((x) => Math.min(1, Math.max(0, x / 255)));\n\n  class StackedBarTrack extends HGC.tracks.HorizontalLine1DPixiTrack {\n    constructor(context, options) {\n      super(context, options);\n\n      this.updateOptions();\n    }\n\n    initTile(tile) {\n      const is2d = getIs2d(tile);\n      const getStart = is2d ? get2dStart : get1dStart;\n      const getEnd = is2d ? get2dEnd : get1dEnd;\n\n      tile.tileData.forEach((item) => {\n        item.start = getStart(item);\n        item.end = getEnd(item);\n        item.isLeftToRight = item.start < item.end;\n      });\n\n      tile.histogramMax = 0;\n\n      this.updateTileFocusMap(tile);\n    }\n\n    updateTileHistogram(tile) {\n      const { tileX, tileWidth } = this.getTilePosAndDimensions(\n        tile.tileData.zoomLevel,\n        tile.tileData.tilePos\n      );\n      const binSize = tileWidth / this.numBins;\n\n      tile.binXPos = new Float32Array(this.numBins + 1);\n      tile.histogram1d = new Float32Array(this.numBins);\n      tile.histogram2d = new Float32Array(this.numBins * this.numGroups);\n      tile.histogram2dNumPred = new Uint8Array(this.numBins * this.numGroups);\n\n      let max = 0;\n\n      // Determine bin boundaries\n      for (let i = 0; i <= this.numBins; i++) {\n        tile.binXPos[i] = tileX + binSize * i;\n      }\n\n      const categoryBinHash = new Map();\n\n      tile.tileData.forEach((item) => {\n        const group = this.categoryToGroup.get(\n          item.fields[this.categoryField].toLowerCase()\n        );\n        const maxBinId = this.numBins - 1;\n        const binStart = Math.max(\n          0,\n          Math.min(maxBinId, Math.round((item.xStart - tileX) / binSize))\n        );\n        const binEnd = Math.max(\n          0,\n          Math.min(maxBinId, Math.round((item.xEnd - tileX) / binSize))\n        );\n        const numBins = Math.abs(binEnd - binStart);\n        const score = this.getImportance(item);\n        const category = this.getCategory(item);\n        const base = group * this.numBins;\n\n        for (let i = 0; i <= numBins; i++) {\n          const bin = binStart + i;\n          const histIdx = base + bin;\n\n          const binHash = categoryBinHash.get(category) || {};\n\n          // Make sure we count multiple enhancer predictions of the same biosample and bin only once (i.e., summing up)\n          if (!binHash[bin]) {\n            binHash[bin] = binHash[bin] || score > 0;\n            tile.histogram2dNumPred[histIdx] += binHash[bin];\n            categoryBinHash.set(category, binHash);\n          }\n\n          tile.histogram2d[histIdx] += score;\n          tile.histogram1d[bin] += score;\n\n          max = Math.max(max, tile.histogram1d[bin]);\n        }\n      });\n\n      tile.histogramMax = max;\n    }\n\n    updateHistograms() {\n      Object.values(this.fetchedTiles).forEach(\n        this.updateTileHistogram.bind(this)\n      );\n    }\n\n    updateTileFocusMap(tile) {\n      tile.focusMap = new Float32Array(this.numBins);\n\n      const { tileX, tileWidth } = this.getTilePosAndDimensions(\n        tile.tileData.zoomLevel,\n        tile.tileData.tilePos\n      );\n\n      if (\n        tileX <= this.focusRegion[1] &&\n        tileX + tileWidth >= this.focusRegion[0]\n      ) {\n        const binSize = tileWidth / this.numBins;\n\n        const binStart = Math.max(\n          0,\n          Math.round((this.focusRegion[0] - tileX) / binSize)\n        );\n        const binEnd = Math.min(\n          this.numBins - 1,\n          Math.round((this.focusRegion[1] - tileX) / binSize)\n        );\n        const numBins = Math.abs(binEnd - binStart);\n\n        for (let i = 0; i <= numBins; i++) {\n          tile.focusMap[i] = 1;\n        }\n      }\n    }\n\n    updateFocusMap() {\n      Object.values(this.fetchedTiles).forEach(\n        this.updateTileFocusMap.bind(this)\n      );\n    }\n\n    updateStratificationOption() {\n      if (!this.options.stratification) {\n        this.categoryField = undefined;\n        this.categoryToGroup = undefined;\n        this.groupToColor = undefined;\n        this.numGroups = 0;\n        this.numCategories = 0;\n        this.groupLabels = [];\n        return;\n      }\n\n      this.categoryField = this.options.stratification.categoryField;\n      this.getCategory = (item) =>\n        item.fields[this.categoryField].toLowerCase();\n      this.categoryToGroup = new Map();\n      this.categoryToY = new Map();\n      this.groupToColor = new Map();\n      this.numGroups = this.options.stratification.groups.length;\n      this.groupSizes = this.options.stratification.groups.map(\n        (group) => group.categories.length\n      );\n      this.numCategories = this.groupSizes.reduce(\n        (numCategories, groupSize) => numCategories + groupSize,\n        0\n      );\n      this.groupLabels = this.options.stratification.groups.map(\n        (group, i) => group.label || `Group ${i}`\n      );\n\n      let k = 0;\n      this.options.stratification.groups.forEach((group, i) => {\n        this.groupToColor.set(i, [\n          colorToHex(\n            group.color || DEFAULT_COLOR_MAP[i % DEFAULT_COLOR_MAP.length]\n          ),\n          colorToHex(\n            group.backgroundColor ||\n              DEFAULT_COLOR_MAP_LIGHT[i % DEFAULT_COLOR_MAP_LIGHT.length]\n          ),\n        ]);\n        group.categories.forEach((category, j) => {\n          this.categoryToGroup.set(category.toLowerCase(), i);\n          this.categoryToY.set(category.toLowerCase(), k + j);\n        });\n        k += group.categories.length;\n      });\n\n      this.groupLabelsPixiText = this.groupLabels.map(\n        (label, i) =>\n          new PIXI.Text(label, {\n            fontSize: this.labelSize,\n            // fill: this.labelColor,\n            align: this.axisAlign === 'right' ? 'right' : 'left',\n            fill: colorToHex(\n              this.options.stratification.groups[i].axisLabelColor ||\n                DEFAULT_COLOR_MAP_DARK[i % DEFAULT_COLOR_MAP_DARK.length]\n            ),\n          })\n      );\n    }\n\n    updateOptions() {\n      this.axisAlign = this.options.axisAlign || 'left';\n\n      this.labelColor = colorToHex(this.options.labelColor || 'black');\n\n      this.labelSize = this.options.labelSize || 12;\n\n      this.colorMap = this.options.colorMap || [...DEFAULT_COLOR_MAP];\n\n      this.colorMapRgbNorm = this.colorMap.map(toRgbNorm);\n\n      [this.colorMapTex, this.colorMapTexRes] = createColorTexture(\n        PIXI,\n        this.colorMapRgbNorm\n      );\n\n      this.colorMapFocus = this.options.colorMapFocus || [\n        ...DEFAULT_COLOR_MAP_DARK,\n      ];\n\n      this.colorMapFocusRgbNorm = this.colorMapFocus.map(toRgbNorm);\n\n      [this.colorMapFocusTex, this.colorMapFocusTexRes] = createColorTexture(\n        PIXI,\n        this.colorMapFocusRgbNorm\n      );\n\n      this.markColor = colorToHex(this.options.markColor || 'black');\n\n      this.markColorRgbNorm = this.options.markColor\n        ? toRgbNorm(this.options.markColor)\n        : [0, 0, 0];\n\n      this.markOpacity = Number.isNaN(+this.options.markOpacity)\n        ? 1\n        : Math.min(1, Math.max(0, +this.options.markOpacity));\n\n      this.markSize = this.options.markSize || 2;\n\n      this.markColorFocus = colorToHex(this.options.markColorFocus || 'red');\n\n      this.markColorFocusRgbNorm = this.options.markColorFocus\n        ? toRgbNorm(this.options.markColorFocus)\n        : [1, 0, 0];\n\n      this.markOpacityFocus = Number.isNaN(+this.options.markOpacityFocus)\n        ? this.markOpacity\n        : Math.min(1, Math.max(0, +this.options.markOpacityFocus));\n\n      this.markSizeFocus = this.options.markSizeFocus || this.markSize;\n\n      this.binSize = this.options.binSize || DEFAULT_BIN_SIZE;\n\n      this.numBins = this.tilesetInfo\n        ? Math.round(this.tilesetInfo.tile_size / this.binSize)\n        : DEFAULT_TILE_SIZE / this.binSize;\n\n      this.getImportance = this.options.importanceField\n        ? (item) => +item.fields[this.options.importanceField]\n        : () => 1;\n\n      const importanceDomain = this.options.importanceDomain || [1000, 1];\n\n      const opacityLinearScale = scaleLinear()\n        .domain(importanceDomain)\n        .range([1, 10]);\n\n      this.opacityScale = (x) => opacityLogScale(opacityLinearScale(x));\n\n      this.focusRegion = this.options.focusRegion\n        ? this.options.focusRegion\n        : [Infinity, Infinity];\n\n      this.focusGene = this.options.focusGene\n        ? this.options.focusGene.toLowerCase()\n        : undefined;\n\n      this.getGene = this.options.geneField\n        ? (item) => item.fields[this.options.geneField].toLowerCase()\n        : undefined;\n\n      this.minImportance = this.options.minImportance || 0;\n\n      this.updateStratificationOption();\n\n      this.updateFocusMap();\n      this.updateHistograms();\n      this.updateScales();\n    }\n\n    refreshTiles(...brgs) {\n      super.refreshTiles(...brgs);\n      if (this.tilesetInfo) {\n        const oldNumBins = this.numBins;\n        this.numBins = Math.round(this.tilesetInfo.tile_size / this.binSize);\n        if (oldNumBins !== this.numBins) {\n          this.updateHistograms();\n          this.updateScales();\n        }\n      }\n    }\n\n    rerender(newOptions) {\n      this.options = newOptions;\n      this.updateOptions();\n      this.updateExistingGraphics();\n    }\n\n    updateScales() {\n      const fetchedTiles = Object.values(this.fetchedTiles);\n\n      if (!fetchedTiles.length) return;\n\n      const [, height] = this.dimensions;\n\n      this.histMax = getHistMax(fetchedTiles);\n\n      this.heightScale = scaleLinear()\n        .domain([0, this.histMax])\n        .range([height, 0]);\n\n      this.valueScale = this.heightScale;\n\n      this.valueScaleInverted = scaleLinear()\n        .domain([0, this.histMax])\n        .range([0, height]);\n    }\n\n    itemToPoint(item) {\n      return {\n        xStart: this._xScale(item.start),\n        xEnd: this._xScale(item.start),\n        yStart: this.heightScale(\n          this.categoryToY.get(item.fields[this.categoryField].toLowerCase())\n        ),\n        yEnd: () => {},\n        opacity: this.opacityScale(this.getImportance(item)),\n        focused:\n          item.xStart <= this.focusRegion[1] &&\n          item.xEnd >= this.focusRegion[0],\n      };\n    }\n\n    histToSegments(tile) {\n      const segments = [];\n\n      for (let i = 0; i < this.numBins; i++) {\n        let cumHeight = 0;\n        if (tile.histogram1d[i] > 0) {\n          for (let j = 0; j < this.numGroups; j++) {\n            const height = tile.histogram2d[j * this.numBins + i];\n\n            if (height) {\n              segments.push({\n                xStart: this._xScale(tile.binXPos[i]),\n                xEnd: this._xScale(tile.binXPos[i + 1]),\n                yStart: this.heightScale(cumHeight),\n                yEnd: this.heightScale(cumHeight + height),\n                colorIdx: j % this.colorMap.length,\n                focused: tile.focusMap[i],\n              });\n\n              cumHeight += height;\n            }\n          }\n        }\n      }\n\n      return segments;\n    }\n\n    renderStackedBars() {\n      this.drawnAtScale = scaleLinear()\n        .domain([...this.xScale().domain()])\n        .range([...this.xScale().range()]);\n\n      const segments = Object.values(this.fetchedTiles).flatMap(\n        this.histToSegments.bind(this)\n      );\n\n      const positions = new Float32Array(segments.flatMap(segmentToPosition));\n      const colorIdxs = new Float32Array(segments.flatMap(segmentToColorIdx));\n      const focused = new Float32Array(segments.flatMap(segmentToFocused));\n\n      const uniforms = new PIXI.UniformGroup({\n        uColorMapTex: this.colorMapTex,\n        uColorMapTexRes: this.colorMapTexRes,\n        uColorMapFocus: this.colorMapFocusTex,\n        uColorMapFocusTexRes: this.colorMapFocusTexRes,\n      });\n\n      const shader = PIXI.Shader.from(VS, FS, uniforms);\n\n      const geometry = new PIXI.Geometry();\n      geometry.addAttribute('aPosition', positions, 2);\n      geometry.addAttribute('aColorIdx', colorIdxs, 1);\n      geometry.addAttribute('aFocused', focused, 1);\n\n      const mesh = new PIXI.Mesh(\n        geometry,\n        shader,\n        new PIXI.State(),\n        PIXI.DRAW_MODES.TRIANGLES\n      );\n\n      const newGraphics = new PIXI.Graphics();\n      newGraphics.addChild(mesh);\n\n      // eslint-disable-next-line\n      this.pMain.x = this.position[0];\n\n      if (this.indicatorPointGraphics) {\n        this.pMain.removeChild(this.indicatorPointGraphics);\n      }\n\n      this.pMain.addChild(newGraphics);\n      this.indicatorPointGraphics = newGraphics;\n\n      scaleScalableGraphics(\n        this.indicatorPointGraphics,\n        this._xScale,\n        this.drawnAtScale\n      );\n\n      this.draw();\n      this.animate();\n    }\n\n    renderTrack() {\n      this.drawAxis(this.valueScaleInverted);\n      this.renderStackedBars();\n    }\n\n    hasFetchedTiles() {\n      return Object.values(this.fetchedTiles).length;\n    }\n\n    // Called whenever a new tile comes in\n    updateExistingGraphics() {\n      if (!this.hasFetchedTiles()) return;\n      this.updateHistograms();\n      this.updateScales();\n      this.renderTrack();\n    }\n\n    /**\n     * Shows value and type for each bar\n     *\n     * @param trackX relative x-coordinate of mouse\n     * @param trackY relative y-coordinate of mouse\n     * @returns string with embedded values and svg square for color\n     */\n    getMouseOverHtml(trackX, trackY) {\n      if (!this.tilesetInfo) return '';\n\n      const zoomLevel = this.calculateZoomLevel();\n      const tileWidth = tileProxy.calculateTileWidth(\n        this.tilesetInfo,\n        zoomLevel,\n        this.tilesetInfo.tile_size\n      );\n\n      // the position of the tile containing the query position\n      const relTilePos = this._xScale.invert(trackX) / tileWidth;\n      const tilePos = Math.floor(relTilePos);\n      const tileId = this.tileToLocalId([zoomLevel, tilePos]);\n      const fetchedTile = this.fetchedTiles[tileId];\n\n      if (!fetchedTile) return '';\n\n      const relPos = relTilePos - tilePos;\n      const binXPos = Math.floor(this.numBins * relPos);\n\n      const rowCumSum = [];\n      const rowNumPred = [];\n      let totalPred = 0;\n      let sum = 0;\n      for (let i = 0; i < this.numGroups; i++) {\n        sum += fetchedTile.histogram2d[i * this.numBins + binXPos];\n        const numPred =\n          fetchedTile.histogram2dNumPred[i * this.numBins + binXPos];\n        rowNumPred.push(numPred);\n        totalPred += numPred;\n        rowCumSum.push(sum);\n      }\n\n      const relYPos = this.heightScale.invert(trackY);\n      const group = rowCumSum.findIndex((cumHeight) => cumHeight > relYPos);\n\n      if (group >= 0) {\n        const [color, bg] = this.groupToColor.get(group);\n        const colorHex = `#${color.toString(16)}`;\n        const bgHex = `#${bg.toString(16)}`;\n        const value =\n          fetchedTile.histogram2dNumPred[group * this.numBins + binXPos];\n        return `<div style=\"margin: -0.25rem; padding: 0 0.25rem; background: ${bgHex}\"><strong style=\"color: ${colorHex};\">${this.groupLabels[group]}:</strong> ${value} of ${totalPred} samples</div>`;\n      }\n\n      return '';\n    }\n\n    setPosition(newPosition) {\n      super.setPosition(newPosition);\n\n      [this.pMain.position.x, this.pMain.position.y] = this.position;\n    }\n\n    zoomed(newXScale, newYScale) {\n      this.xScale(newXScale);\n      this.yScale(newYScale);\n\n      if (this.indicatorPointGraphics) {\n        scaleScalableGraphics(\n          this.indicatorPointGraphics,\n          newXScale,\n          this.drawnAtScale\n        );\n      }\n\n      this.refreshTiles();\n      this.draw();\n    }\n\n    /**\n     * Export an SVG representation of this track\n     *\n     * @returns {Array} The two returned DOM nodes are both SVG\n     * elements [base,track]. Base is a parent which contains track as a\n     * child. Track is clipped with a clipping rectangle contained in base.\n     *\n     */\n    exportSVG() {\n      let track = null;\n      let base = null;\n\n      [base, track] = super.superSVG();\n\n      base.setAttribute('class', 'exported-arcs-track');\n      const output = document.createElement('g');\n\n      track.appendChild(output);\n      output.setAttribute(\n        'transform',\n        `translate(${this.position[0]},${this.position[1]})`\n      );\n\n      const strokeColor = this.options.strokeColor\n        ? this.options.strokeColor\n        : 'blue';\n      const strokeWidth = this.options.strokeWidth\n        ? this.options.strokeWidth\n        : 2;\n\n      this.visibleAndFetchedTiles().forEach((tile) => {\n        this.polys = [];\n\n        // call drawTile with storePolyStr = true so that\n        // we record path strings to use in the SVG\n        this.drawTile(tile, true);\n\n        for (const { polyStr, opacity } of this.polys) {\n          const g = document.createElement('path');\n          g.setAttribute('fill', 'transparent');\n          g.setAttribute('stroke', strokeColor);\n          g.setAttribute('stroke-width', strokeWidth);\n          g.setAttribute('opacity', opacity);\n\n          g.setAttribute('d', polyStr);\n          output.appendChild(g);\n        }\n      });\n      return [base, track];\n    }\n  }\n\n  return new StackedBarTrack(...args);\n};\n\nconst icon =\n  '<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\" fill-rule=\"evenodd\" clip-rule=\"evenodd\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"1.5\"><path d=\"M4 2.1L.5 3.5v12l5-2 5 2 5-2v-12l-5 2-3.17-1.268\" fill=\"none\" stroke=\"currentColor\"/><path d=\"M10.5 3.5v12\" fill=\"none\" stroke=\"currentColor\" stroke-opacity=\".33\" stroke-dasharray=\"1,2,0,0\"/><path d=\"M5.5 13.5V6\" fill=\"none\" stroke=\"currentColor\" stroke-opacity=\".33\" stroke-width=\".9969299999999999\" stroke-dasharray=\"1.71,3.43,0,0\"/><path d=\"M9.03 5l.053.003.054.006.054.008.054.012.052.015.052.017.05.02.05.024 4 2 .048.026.048.03.046.03.044.034.042.037.04.04.037.04.036.042.032.045.03.047.028.048.025.05.022.05.02.053.016.053.014.055.01.055.007.055.005.055v.056l-.002.056-.005.055-.008.055-.01.055-.015.054-.017.054-.02.052-.023.05-.026.05-.028.048-.03.046-.035.044-.035.043-.038.04-4 4-.04.037-.04.036-.044.032-.045.03-.046.03-.048.024-.05.023-.05.02-.052.016-.052.015-.053.012-.054.01-.054.005-.055.003H8.97l-.053-.003-.054-.006-.054-.008-.054-.012-.052-.015-.052-.017-.05-.02-.05-.024-4-2-.048-.026-.048-.03-.046-.03-.044-.034-.042-.037-.04-.04-.037-.04-.036-.042-.032-.045-.03-.047-.028-.048-.025-.05-.022-.05-.02-.053-.016-.053-.014-.055-.01-.055-.007-.055L4 10.05v-.056l.002-.056.005-.055.008-.055.01-.055.015-.054.017-.054.02-.052.023-.05.026-.05.028-.048.03-.046.035-.044.035-.043.038-.04 4-4 .04-.037.04-.036.044-.032.045-.03.046-.03.048-.024.05-.023.05-.02.052-.016.052-.015.053-.012.054-.01.054-.005L8.976 5h.054zM5 10l4 2 4-4-4-2-4 4z\" fill=\"currentColor\"/><path d=\"M7.124 0C7.884 0 8.5.616 8.5 1.376v3.748c0 .76-.616 1.376-1.376 1.376H3.876c-.76 0-1.376-.616-1.376-1.376V1.376C2.5.616 3.116 0 3.876 0h3.248zm.56 5.295L5.965 1H5.05L3.375 5.295h.92l.354-.976h1.716l.375.975h.945zm-1.596-1.7l-.592-1.593-.58 1.594h1.172z\" fill=\"currentColor\"/></svg>';\n\ncreateStackedBarTrack.config = {\n  type: 'stacked-bar',\n  datatype: ['bedlike'],\n  orientation: '1d',\n  name: 'Arcs1D',\n  thumbnail: new DOMParser().parseFromString(icon, 'text/xml').documentElement,\n  availableOptions: [\n    'arcStyle',\n    'flip1D',\n    'labelPosition',\n    'labelColor',\n    'labelTextOpacity',\n    'labelBackgroundOpacity',\n    'strokeColor',\n    'strokeWidth',\n    'trackBorderWidth',\n    'trackBorderColor',\n  ],\n  defaultOptions: {\n    arcStyle: 'ellipse',\n    flip1D: 'no',\n    labelColor: 'black',\n    labelPosition: 'hidden',\n    strokeColor: 'black',\n    strokeWidth: 1,\n    trackBorderWidth: 0,\n    trackBorderColor: 'black',\n  },\n  optionsInfo: {\n    arcStyle: {\n      name: 'Arc Style',\n      inlineOptions: {\n        circle: {\n          name: 'Circle',\n          value: 'circle',\n        },\n        ellipse: {\n          name: 'Ellipse',\n          value: 'ellipse',\n        },\n      },\n    },\n  },\n};\n\nexport default createStackedBarTrack;\n","import createPubSub from 'pub-sub-es';\n\nfunction createTssTrack(HGC, ...args) {\n  if (!new.target) {\n    throw new Error(\n      'Uncaught TypeError: Class constructor cannot be invoked without \"new\"'\n    );\n  }\n\n  class TssTrack extends HGC.tracks.BedLikeTrack {\n    constructor(context, options) {\n      super(context, options);\n\n      const { publish, subscribe, unsubscribe } = createPubSub();\n      this.publish = publish;\n      this.subscribe = subscribe;\n      this.unsubscribe = unsubscribe;\n    }\n\n    drawPoly(tile, xStartPos, xEndPos, rectY, doubleRadius = false) {\n      // prettier-ignore\n      const drawnPoly = [\n        // left top\n        xStartPos, rectY,\n        // right top\n        xEndPos, rectY,\n        // right bottom\n        xEndPos, this.dimensions[1],\n         // left bottom\n        xStartPos, this.dimensions[1]\n      ];\n\n      const anchorRadius = 1;\n      const radius = 2;\n\n      tile.rectGraphics.drawCircle(\n        xStartPos,\n        this.finalDotYPos(rectY, anchorRadius),\n        radius\n      );\n\n      return drawnPoly;\n    }\n\n    renderRows(tile, rows, maxRows, startY, endY, fill) {\n      const zoomLevel = +tile.tileId.split('.')[0];\n\n      this.initialize();\n\n      const focusRegion = this.options.focusRegion || [Infinity, Infinity];\n\n      const circleDraws = [];\n      const circleFocusDraws = [];\n\n      for (let j = 0; j < rows.length; j++) {\n        for (let i = 0; i < rows[j].length; i++) {\n          const td = rows[j][i].value;\n          const geneInfo = td.fields;\n\n          // the returned positions are chromosome-based and they need to\n          // be converted to genome-based\n          const chrOffset = +td.chrOffset;\n          const txStart = +geneInfo[1] + chrOffset;\n          const txEnd = +geneInfo[2] + chrOffset;\n\n          const xStartPos = this._xScale(txStart);\n          const xEndPos = this._xScale(txEnd);\n\n          // don't draw anything that has already been drawn\n          if (\n            !(\n              zoomLevel in this.drawnRects &&\n              td.uid in this.drawnRects[zoomLevel]\n            )\n          ) {\n            if (!this.drawnRects[zoomLevel]) this.drawnRects[zoomLevel] = {};\n\n            const circleDraw = {\n              xStartScreen: xStartPos,\n              xEndScreen: xEndPos,\n              xStartAbs: txStart,\n              xEndAbs: txEnd,\n              data: td,\n            };\n\n            if (txStart <= focusRegion[1] && txEnd >= focusRegion[0]) {\n              circleFocusDraws.push(circleDraw);\n            } else {\n              circleDraws.push(circleDraw);\n            }\n          }\n        }\n\n        circleDraws.forEach((circleDraw) => {\n          this.publish('annotationDrawn', circleDraw);\n        });\n      }\n    }\n\n    rerender() {\n      // Monkey patch because TiledPixiTrack doesn't always fire correctly\n      this.draw();\n      this.pubSub.publish('TiledPixiTrack.tilesDrawnEnd', { uuid: this.uuid });\n    }\n\n    getMouseOverHtml() {\n      return '';\n    }\n  }\n\n  return new TssTrack(...args);\n}\n\ncreateTssTrack.config = {\n  type: 'tss',\n  datatype: ['bedlike'],\n};\n\nexport default createTssTrack;\n","import register from 'higlass-register';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport createAnnotationOverlayMetaTrack from './annotation-overlay-meta-track';\nimport createRidgePlotTrack from './ridge-plot-track';\nimport createStratifiedBedTrack from './stratified-bed-track';\nimport createScalableArcs1dTrack from './scalable-arcs-track';\nimport createSnpTrack from './snp-track';\nimport createStackedBarTrack from './stacked-bar-track';\nimport createTssTrack from './tss-track';\n\nimport './index.css';\n\nregister({\n  track: createRidgePlotTrack,\n  config: createRidgePlotTrack.config,\n});\n\nregister({\n  track: createScalableArcs1dTrack,\n  config: createScalableArcs1dTrack.config,\n});\n\nregister({\n  track: createStratifiedBedTrack,\n  config: createStratifiedBedTrack.config,\n});\n\nregister({\n  track: createSnpTrack,\n  config: createSnpTrack.config,\n});\n\nregister({\n  track: createStackedBarTrack,\n  config: createStackedBarTrack.config,\n});\n\nregister({\n  track: createTssTrack,\n  config: createTssTrack.config,\n});\n\nregister({\n  track: createAnnotationOverlayMetaTrack,\n  config: createAnnotationOverlayMetaTrack.config,\n  isMetaTrack: true,\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}